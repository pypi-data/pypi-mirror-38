Metadata-Version: 2.1
Name: poetry-setup
Version: 0.3.6
Summary: make setup.py (setutools) from pyproject.toml (poetry)
Home-page: https://github.com/orsinium/poetry-setup
Author: Gram Orsinium
Author-email: master_fess@mail.ru
License: UNKNOWN
Project-URL: homepage, https://github.com/orsinium/poetry-setup
Description: # poetry-setup
        
        ![poetry-setup logo](assets/logo.png)
        
        [![Build Status](https://travis-ci.org/orsinium/poetry-setup.svg?branch=master)](https://travis-ci.org/orsinium/poetry-setup) [![Beta](https://img.shields.io/pypi/status/poetry-setup.svg)](https://pypi.org/project/poetry-setup/) [![Apache-2.0](https://img.shields.io/github/license/orsinium/poetry-setup.svg)](https://github.com/orsinium/poetry-setup/blob/master/LICENSE)
        
        
        Make your [poetry](https://poetry.eustace.io/) project backward compatible.
        
        This tool generate some files from [pyproject.toml](https://poetry.eustace.io/docs/pyproject/):
        * [setup.py](https://packaging.python.org/tutorials/packaging-projects/#creating-setup-py)
        * [requirements.txt](https://pip.pypa.io/en/stable/user_guide/#requirements-files)
        * [constraints.txt](https://pip.pypa.io/en/stable/user_guide/#constraints-files) (from optional dependencies)
        
        ![files scheme](assets/scheme.png)
        
        ## Installation
        
        I'm recommend use [pipsi](https://github.com/mitsuhiko/pipsi) for all console scripts like this.
        
        Install via pipsi:
        
        ```bash
        pipsi install poetry-setup
        ```
        
        Install via pip:
        
        ```bash
        pip install poetry-setup
        ```
        
        Install via poetry:
        
        ```bash
        poetry install poetry-setup
        ```
        
        
        ## Usage
        
        ```bash
        poetry-setup [path/to/project/]
        ```
        
        Generate for project in current dir:
        
        ```bash
        poetry-setup
        ```
        
        Generate for project in `example` dir:
        
        ```bash
        poetry-setup example
        ```
        
        ## What about pipenv?
        
        Pipenv can generate `Pipfile` from `requirements.txt`.
        
        ## Run test
        
        ```bash
        pipenv install
        pipenv shell
        python -m pytest tests.py
        ```
        
Keywords: packaging dependency poetry setuptools pip
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Topic :: Software Development :: Build Tools
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Description-Content-Type: text/markdown
