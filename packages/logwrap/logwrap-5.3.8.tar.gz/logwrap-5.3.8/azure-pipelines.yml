# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

jobs:
- job: 'Test_pure_python'
  pool:
    vmIMage: 'VS2017-Win2016'
  strategy:
    maxParallel: 6
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -U setuptools
      pip install -r requirements.txt
    displayName: 'Install dependencies'

  - script: |
      pip install -Ue .
    displayName: 'Install'

  - script: |
      pip install pytest pytest-sugar

      pytest -vvv --junitxml=unit_result.xml test
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/unit_result.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()


- job: 'Test_Cythonized'
  pool:
    vmIMage: 'VS2017-Win2016'
  strategy:
    maxParallel: 6
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -U setuptools
      pip install -r build_requirements.txt
    displayName: 'Install dependencies'

  - script: |
      python setup.py bdist_wheel
      pip install --pre --no-index -f dist logwrap
    displayName: 'Build and install'

  - script: |
      pip install pytest pytest-sugar

      pytest -vvv --junitxml=unit_result.xml test
    displayName: 'pytest'

  - task: PublishTestResults@2
    inputs:
      testResultsFiles: '**/unit_result.xml'
      testRunTitle: 'Python $(python.version)'
    condition: succeededOrFailed()


- job: 'Build_and_deploy'
  dependsOn:
  - Test_pure_python
  - Test_Cythonized
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
  pool:
    vmIMage: 'VS2017-Win2016'
  strategy:
    maxParallel: 6
    matrix:
      Python35:
        python.version: '3.5'
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - script: |
      python -m pip install --upgrade pip
      pip install -U setuptools
      pip install -r build_requirements.txt
    displayName: 'Install dependencies'

  - script: |
      python setup.py bdist_wheel
    displayName: 'Build'

  - task: TwineAuthenticate@0
    displayName: 'Twine Authenticate '
    inputs:
      externalFeeds: PyPI

  - script: |
      pip install -U twine
      twine upload -r PyPI --config-file $(PYPIRC_PATH) dist/logwrap-* --skip-existing
    displayName: 'Deploy'
