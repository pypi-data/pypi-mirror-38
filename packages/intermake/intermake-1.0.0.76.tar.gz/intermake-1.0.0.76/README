====================================================================================================
                                             Intermake                                              
====================================================================================================

Automated application frontend.

example/__init__.py::

    from intermake import Application 

    app = Application( "Example" )

    @app.command()
    def say_hello(times : int):
        print("hello " * times)

example/__main__.py::

    import example
    example.app.start()

Usage::

      example say_hello 2
    ⇝ hello hello

      example gui
    ⇝ welcome to Example's graphical user interface
      *click say hello*
      *set times = 2*
    ⇝ *message box: hello hello*
      *click x*
        
      example pyi
    ⇝ welcome to Example's python interactive shell
      say_hello(2)
    ⇝ hello hello
      exit()

      example cli
    ⇝ welcome to Example's command line interactive
      say_hello 2
    ⇝ hello hello
      exit

      python
      import example
      example.say_hello(2)
    ⇝ hello hello
      exit()


.. attention::

    **Full documentation can be found `here<http://software.rusilowicz.com/intermake>`_.**

.. contents::

----------------------------------------------------------------------------------------------------
                                         What is Intermake?                                         
----------------------------------------------------------------------------------------------------

`Intermake`:t: is a library that automatically provides multiple front-ends a `Python`:t: application.
Once an application is registered with `Intermake`:t:, the following interfaces are provided:

* Command line arguments
* Command line interface (CLI)
* Python interactive shell
* Graphical user interface (GUI)
* Python library interface (DLL)
* Interactive Jupyter notebook
* ***Custom*** front-ends are also supported

It is used by:

* [Bio42](https://bitbucket.org/mjr129/bio42)
* [Neocommand](https://bitbucket.org/mjr129/neocommand)
* [Groot](https://bitbucket.org/mjr129/groot)
* [Faketree](https://bitbucket.org/mjr129/faketree)


----------------------------------------------------------------------------------------------------
                                             Rationale                                              
----------------------------------------------------------------------------------------------------

Intermake aims to be *reflective*, requiring minimal setup to expose Python functions through
an applications command line.


----------------------------------------------------------------------------------------------------
                                              License                                               
----------------------------------------------------------------------------------------------------


`Intermake`:t: is licensed under the [GNU AGPLv3](https://www.gnu.org/licenses/agpl-3.0.html).
