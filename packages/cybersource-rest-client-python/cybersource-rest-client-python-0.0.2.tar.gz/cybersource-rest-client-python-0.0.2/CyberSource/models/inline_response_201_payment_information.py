# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse201PaymentInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'card': 'InlineResponse201PaymentInformationCard',
        'tokenized_card': 'InlineResponse201PaymentInformationTokenizedCard',
        'account_features': 'InlineResponse201PaymentInformationAccountFeatures'
    }

    attribute_map = {
        'card': 'card',
        'tokenized_card': 'tokenizedCard',
        'account_features': 'accountFeatures'
    }

    def __init__(self, card=None, tokenized_card=None, account_features=None):
        """
        InlineResponse201PaymentInformation - a model defined in Swagger
        """

        self._card = None
        self._tokenized_card = None
        self._account_features = None

        if card is not None:
          self.card = card
        if tokenized_card is not None:
          self.tokenized_card = tokenized_card
        if account_features is not None:
          self.account_features = account_features

    @property
    def card(self):
        """
        Gets the card of this InlineResponse201PaymentInformation.

        :return: The card of this InlineResponse201PaymentInformation.
        :rtype: InlineResponse201PaymentInformationCard
        """
        return self._card

    @card.setter
    def card(self, card):
        """
        Sets the card of this InlineResponse201PaymentInformation.

        :param card: The card of this InlineResponse201PaymentInformation.
        :type: InlineResponse201PaymentInformationCard
        """

        self._card = card

    @property
    def tokenized_card(self):
        """
        Gets the tokenized_card of this InlineResponse201PaymentInformation.

        :return: The tokenized_card of this InlineResponse201PaymentInformation.
        :rtype: InlineResponse201PaymentInformationTokenizedCard
        """
        return self._tokenized_card

    @tokenized_card.setter
    def tokenized_card(self, tokenized_card):
        """
        Sets the tokenized_card of this InlineResponse201PaymentInformation.

        :param tokenized_card: The tokenized_card of this InlineResponse201PaymentInformation.
        :type: InlineResponse201PaymentInformationTokenizedCard
        """

        self._tokenized_card = tokenized_card

    @property
    def account_features(self):
        """
        Gets the account_features of this InlineResponse201PaymentInformation.

        :return: The account_features of this InlineResponse201PaymentInformation.
        :rtype: InlineResponse201PaymentInformationAccountFeatures
        """
        return self._account_features

    @account_features.setter
    def account_features(self, account_features):
        """
        Sets the account_features of this InlineResponse201PaymentInformation.

        :param account_features: The account_features of this InlineResponse201PaymentInformation.
        :type: InlineResponse201PaymentInformationAccountFeatures
        """

        self._account_features = account_features

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse201PaymentInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
