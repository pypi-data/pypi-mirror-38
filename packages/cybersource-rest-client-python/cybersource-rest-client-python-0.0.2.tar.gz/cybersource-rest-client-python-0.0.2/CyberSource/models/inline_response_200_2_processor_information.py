# coding: utf-8

"""
    CyberSource Flex API

    Simple PAN tokenization service

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InlineResponse2002ProcessorInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'approval_code': 'str',
        'card_verification': 'InlineResponse2002ProcessorInformationCardVerification',
        'avs': 'InlineResponse2002ProcessorInformationAvs',
        'transaction_id': 'str'
    }

    attribute_map = {
        'approval_code': 'approvalCode',
        'card_verification': 'cardVerification',
        'avs': 'avs',
        'transaction_id': 'transactionId'
    }

    def __init__(self, approval_code=None, card_verification=None, avs=None, transaction_id=None):
        """
        InlineResponse2002ProcessorInformation - a model defined in Swagger
        """

        self._approval_code = None
        self._card_verification = None
        self._avs = None
        self._transaction_id = None

        if approval_code is not None:
          self.approval_code = approval_code
        if card_verification is not None:
          self.card_verification = card_verification
        if avs is not None:
          self.avs = avs
        if transaction_id is not None:
          self.transaction_id = transaction_id

    @property
    def approval_code(self):
        """
        Gets the approval_code of this InlineResponse2002ProcessorInformation.
        Authorization code. Returned only when the processor returns this value. 

        :return: The approval_code of this InlineResponse2002ProcessorInformation.
        :rtype: str
        """
        return self._approval_code

    @approval_code.setter
    def approval_code(self, approval_code):
        """
        Sets the approval_code of this InlineResponse2002ProcessorInformation.
        Authorization code. Returned only when the processor returns this value. 

        :param approval_code: The approval_code of this InlineResponse2002ProcessorInformation.
        :type: str
        """

        self._approval_code = approval_code

    @property
    def card_verification(self):
        """
        Gets the card_verification of this InlineResponse2002ProcessorInformation.

        :return: The card_verification of this InlineResponse2002ProcessorInformation.
        :rtype: InlineResponse2002ProcessorInformationCardVerification
        """
        return self._card_verification

    @card_verification.setter
    def card_verification(self, card_verification):
        """
        Sets the card_verification of this InlineResponse2002ProcessorInformation.

        :param card_verification: The card_verification of this InlineResponse2002ProcessorInformation.
        :type: InlineResponse2002ProcessorInformationCardVerification
        """

        self._card_verification = card_verification

    @property
    def avs(self):
        """
        Gets the avs of this InlineResponse2002ProcessorInformation.

        :return: The avs of this InlineResponse2002ProcessorInformation.
        :rtype: InlineResponse2002ProcessorInformationAvs
        """
        return self._avs

    @avs.setter
    def avs(self, avs):
        """
        Sets the avs of this InlineResponse2002ProcessorInformation.

        :param avs: The avs of this InlineResponse2002ProcessorInformation.
        :type: InlineResponse2002ProcessorInformationAvs
        """

        self._avs = avs

    @property
    def transaction_id(self):
        """
        Gets the transaction_id of this InlineResponse2002ProcessorInformation.
        Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. 

        :return: The transaction_id of this InlineResponse2002ProcessorInformation.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """
        Sets the transaction_id of this InlineResponse2002ProcessorInformation.
        Network transaction identifier (TID). You can use this value to identify a specific transaction when you are discussing the transaction with your processor. Not all processors provide this  value. 

        :param transaction_id: The transaction_id of this InlineResponse2002ProcessorInformation.
        :type: str
        """
        if transaction_id is not None and len(transaction_id) > 50:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `50`")

        self._transaction_id = transaction_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InlineResponse2002ProcessorInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
