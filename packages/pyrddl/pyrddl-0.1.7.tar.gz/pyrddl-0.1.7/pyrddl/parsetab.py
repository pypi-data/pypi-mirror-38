
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftIFleftASSIGN_EQUALleftEXISTSleftFORALLleftAGG_OPERleftEQUIVleftIMPLYleftORleftANDAMPERSANDleftNOTleftCOMP_EQUALNEQLESSLESSEQGREATERGREATEREQleftPLUSMINUSleftTIMESDIVrightUMINUSACTION ACTION_PRECONDITIONS AMPERSAND AND ASSIGN_EQUAL BERNOULLI BOOL CASE CDFS COLON COMMA COMP_EQUAL CPFS DEFAULT DERIVED_FLUENT DIRAC_DELTA DIRICHLET DISCOUNT DISCRETE DIV DOLLAR_SIGN DOMAIN DOT DOUBLE ELSE ENUM_VAL EQUIV EXISTS EXPONENTIAL FALSE FORALL GAMMA GREATER GREATEREQ HORIZON IDENT IF IMPLY INIT_STATE INSTANCE INT INTEGER INTERMEDIATE KRON_DELTA LBRACK LCURLY LESS LESSEQ LEVEL LPAREN MAX_NONDEF_ACTIONS MINUS MULTINOMIAL NEG_INF NEQ NON_FLUENT NON_FLUENTS NORMAL NOT OBJECT OBJECTS OBSERVATION OR OTHERWISE PLUS POISSON POS_INF PVARIABLES QUESTION RBRACK RCURLY REAL REQUIREMENTS REWARD RPAREN SEMI STATE STATE_ACTION_CONSTRAINTS STATE_INVARIANTS SWITCH TERMINAL TERMINATE_WHEN THEN TIMES TRUE TYPES UNDERSCORE UNIFORM VAR WEIBULLrddl : rddl_blockrddl_block : rddl_block domain_block\n                      | rddl_block instance_block\n                      | rddl_block nonfluent_block\n                      | emptydomain_block : DOMAIN IDENT LCURLY req_section domain_list RCURLYreq_section : REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI\n                       | REQUIREMENTS LCURLY string_list RCURLY SEMI\n                       | emptydomain_list : domain_list type_section\n                       | domain_list pvar_section\n                       | domain_list cpf_section\n                       | domain_list reward_section\n                       | domain_list action_precond_section\n                       | domain_list state_action_constraint_section\n                       | domain_list state_invariant_section\n                       | emptytype_section : TYPES LCURLY type_list RCURLY SEMItype_list : type_list type_def\n                     | emptytype_def : IDENT COLON OBJECT SEMI\n                    | IDENT COLON LCURLY enum_list RCURLY SEMIenum_list : enum_list COMMA ENUM_VAL\n                     | ENUM_VAL\n                     | emptypvar_section : PVARIABLES LCURLY pvar_list RCURLY SEMIpvar_list : pvar_list pvar_def\n                     | emptypvar_def : nonfluent_def\n                    | statefluent_def\n                    | actionfluent_def\n                    | intermfluent_defnonfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                         | IDENT COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIstatefluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                           | IDENT COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIactionfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMIintermfluent_def : IDENT LPAREN param_list RPAREN COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI\n                            | IDENT COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMIcpf_section : cpf_header LCURLY cpf_list RCURLY SEMIcpf_header : CPFS\n                      | CDFScpf_list : cpf_list cpf_def\n                    | emptycpf_def : pvar_expr ASSIGN_EQUAL expr SEMIreward_section : REWARD ASSIGN_EQUAL expr SEMIaction_precond_section : ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI\n                                  | ACTION_PRECONDITIONS LCURLY RCURLY SEMIaction_precond_list : action_precond_list action_precond_def\n                               | action_precond_defaction_precond_def : expr SEMIstate_action_constraint_section : STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI\n                                           | STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMIstate_cons_list : state_cons_list state_cons_def\n                           | state_cons_defstate_cons_def : expr SEMIstate_invariant_section : STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI\n                                   | STATE_INVARIANTS LCURLY RCURLY SEMIstate_invariant_list : state_invariant_list state_invariant_def\n                                | state_invariant_defstate_invariant_def : expr SEMIterm_list : term_list COMMA term\n                     | term\n                     | emptyterm : VAR\n                | ENUM_VAL\n                | pvar_exprexpr : pvar_expr\n                | group_expr\n                | function_expr\n                | relational_expr\n                | boolean_expr\n                | quantifier_expr\n                | numerical_expr\n                | aggregation_expr\n                | control_expr\n                | randomvar_exprpvar_expr : IDENT LPAREN term_list RPAREN\n                     | IDENTgroup_expr : LBRACK expr RBRACK\n                      | LPAREN expr RPARENfunction_expr : IDENT LBRACK expr_list RBRACKrelational_expr : expr COMP_EQUAL expr\n                           | expr NEQ expr\n                           | expr GREATER expr\n                           | expr GREATEREQ expr\n                           | expr LESS expr\n                           | expr LESSEQ exprboolean_expr : expr AND expr\n                        | expr AMPERSAND expr\n                        | expr OR expr\n                        | expr IMPLY expr\n                        | expr EQUIV expr\n                        | NOT expr %prec UMINUS\n                        | bool_typequantifier_expr : FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr %prec FORALL\n                           | EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr %prec EXISTSnumerical_expr : expr PLUS expr\n                          | expr MINUS expr\n                          | expr TIMES expr\n                          | expr DIV expr\n                          | MINUS expr %prec UMINUS\n                          | PLUS expr %prec UMINUS\n                          | INTEGER\n                          | DOUBLEaggregation_expr : IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr %prec AGG_OPERcontrol_expr : IF LPAREN expr RPAREN THEN expr ELSE expr %prec IF\n                        | SWITCH LPAREN term RPAREN LCURLY case_list RCURLYrandomvar_expr : BERNOULLI LPAREN expr RPAREN\n                          | DIRAC_DELTA LPAREN expr RPAREN\n                          | KRON_DELTA LPAREN expr RPAREN\n                          | UNIFORM LPAREN expr COMMA expr RPAREN\n                          | NORMAL LPAREN expr COMMA expr RPAREN\n                          | EXPONENTIAL LPAREN expr RPAREN\n                          | DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN\n                          | DIRICHLET LPAREN IDENT COMMA expr RPAREN\n                          | POISSON LPAREN expr RPAREN\n                          | WEIBULL LPAREN expr COMMA expr RPAREN\n                          | GAMMA   LPAREN expr COMMA expr RPARENtyped_var_list : typed_var_list COMMA typed_var\n                          | typed_vartyped_var : VAR COLON IDENTexpr_list : expr_list COMMA expr\n                     | exprcase_list : case_list COMMA case_def\n                     | case_defcase_def : CASE term COLON expr\n                    | DEFAULT COLON exprlconst_case_list : lconst COLON expr\n                            | lconst COLON OTHERWISE\n                            | lconst_case_list COMMA lconst COLON exprlconst : IDENT\n                  | ENUM_VALparam_list : string_listtype_spec : IDENT\n                     | INT\n                     | REAL\n                     | BOOLrange_const : bool_type\n                       | double_type\n                       | int_type\n                       | IDENTbool_type : TRUE\n                     | FALSEdouble_type : DOUBLE\n                       | MINUS DOUBLE\n                       | POS_INF\n                       | NEG_INFint_type : INTEGER\n                    | MINUS INTEGERpos_int_type_or_pos_inf : INTEGER\n                                   | POS_INFinstance_block : INSTANCE IDENT LCURLY instance_list RCURLYinstance_list : instance_list domain_section\n                         | instance_list nonfluents_section\n                         | instance_list objects_section\n                         | instance_list init_state_section\n                         | instance_list max_nondef_actions_section\n                         | instance_list horizon_spec_section\n                         | instance_list discount_section\n                         | emptydomain_section : DOMAIN ASSIGN_EQUAL IDENT SEMInonfluents_section : NON_FLUENTS ASSIGN_EQUAL IDENT SEMIobjects_section : OBJECTS LCURLY objects_list RCURLY SEMIinit_state_section : INIT_STATE LCURLY pvar_inst_list RCURLY SEMImax_nondef_actions_section : MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMIhorizon_spec_section : HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI\n                                | HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPARENdiscount_section : DISCOUNT ASSIGN_EQUAL DOUBLE SEMInonfluent_block : NON_FLUENTS IDENT LCURLY nonfluent_list RCURLYnonfluent_list : nonfluent_list domain_section\n                          | nonfluent_list objects_section\n                          | nonfluent_list init_non_fluent_section\n                          | emptyinit_non_fluent_section : NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMIobjects_list : objects_list objects_def\n                        | objects_defobjects_def : IDENT COLON LCURLY object_const_list RCURLY SEMIobject_const_list : object_const_list COMMA IDENT\n                             | IDENTpvar_inst_list : pvar_inst_list pvar_inst_def\n                          | pvar_inst_defpvar_inst_def : IDENT LPAREN lconst_list RPAREN SEMI\n                         | IDENT SEMI\n                         | NOT IDENT LPAREN lconst_list RPAREN SEMI\n                         | NOT IDENT SEMI\n                         | IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI\n                         | IDENT ASSIGN_EQUAL range_const SEMIlconst_list : lconst_list COMMA lconst\n                       | lconststring_list : string_list COMMA IDENT\n                       | IDENT\n                       | emptyempty :'
    
_lr_action_items = {'DOMAIN':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,160,161,171,172,174,242,244,262,322,],[-195,7,-5,-2,-3,-4,-195,-195,35,-162,35,-175,-154,-155,-156,-157,-158,-159,-160,-161,-171,-172,-173,-174,-6,-163,-164,-167,-168,-170,-165,-166,-176,-169,]),'INSTANCE':([0,2,3,4,5,6,27,43,47,],[-195,8,-5,-2,-3,-4,-154,-171,-6,]),'NON_FLUENTS':([0,2,3,4,5,6,14,15,19,20,21,22,27,28,29,30,31,32,33,34,43,44,45,46,47,160,161,171,172,174,242,244,262,322,],[-195,9,-5,-2,-3,-4,-195,-195,36,-162,42,-175,-154,-155,-156,-157,-158,-159,-160,-161,-171,-172,-173,-174,-6,-163,-164,-167,-168,-170,-165,-166,-176,-169,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'rddl':([0,],[1,]),'rddl_block':([0,],[2,]),'empty':([0,13,14,15,16,26,64,76,77,78,206,266,324,],[3,18,20,22,24,67,67,103,105,107,287,67,360,]),'domain_block':([2,],[4,]),'instance_block':([2,],[5,]),'nonfluent_block':([2,],[6,]),'req_section':([13,],[16,]),'instance_list':([14,],[19,]),'nonfluent_list':([15,],[21,]),'domain_list':([16,],[23,]),'domain_section':([19,21,],[28,44,]),'nonfluents_section':([19,],[29,]),'objects_section':([19,21,],[30,45,]),'init_state_section':([19,],[31,]),'max_nondef_actions_section':([19,],[32,]),'horizon_spec_section':([19,],[33,]),'discount_section':([19,],[34,]),'init_non_fluent_section':([21,],[46,]),'type_section':([23,],[48,]),'pvar_section':([23,],[49,]),'cpf_section':([23,],[50,]),'reward_section':([23,],[51,]),'action_precond_section':([23,],[52,]),'state_action_constraint_section':([23,],[53,]),'state_invariant_section':([23,],[54,]),'cpf_header':([23,],[57,]),'string_list':([26,64,266,],[65,83,326,]),'objects_list':([70,],[88,]),'objects_def':([70,88,],[89,163,]),'pvar_inst_list':([71,75,],[91,101,]),'pvar_inst_def':([71,75,91,101,],[92,92,166,166,]),'pos_int_type_or_pos_inf':([72,73,],[95,98,]),'type_list':([76,],[102,]),'pvar_list':([77,],[104,]),'cpf_list':([78,],[106,]),'expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[108,148,152,156,209,210,211,214,215,148,152,156,261,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,292,298,300,301,302,303,304,305,308,309,310,328,368,376,377,380,381,382,394,397,398,399,430,440,443,453,454,]),'pvar_expr':([79,80,81,82,106,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,216,217,218,219,220,221,222,223,226,227,228,269,330,332,343,344,347,349,350,369,372,373,374,402,408,424,428,442,444,],[109,109,109,109,188,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,290,109,109,290,109,109,109,109,109,109,109,109,109,109,290,109,109,109,109,109,109,109,109,109,109,290,109,109,109,109,109,]),'group_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,]),'function_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,]),'relational_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,]),'boolean_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'quantifier_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,]),'numerical_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,]),'aggregation_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,]),'control_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,]),'randomvar_expr':([79,80,81,82,120,121,122,126,127,145,149,153,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,369,372,373,374,408,424,428,442,444,],[118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,]),'bool_type':([79,80,81,82,120,121,122,126,127,145,149,153,169,173,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,207,216,218,219,220,221,222,223,226,227,228,269,332,343,344,347,349,350,354,369,372,373,374,408,424,428,442,444,459,460,461,462,479,480,481,482,],[123,123,123,123,123,123,123,123,123,123,123,123,251,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,251,123,123,123,123,123,123,123,123,123,251,251,251,251,251,251,251,251,]),'action_precond_list':([80,],[145,]),'action_precond_def':([80,145,],[147,230,]),'state_cons_list':([81,],[149,]),'state_cons_def':([81,149,],[151,234,]),'state_invariant_list':([82,],[153,]),'state_invariant_def':([82,153,],[155,238,]),'type_def':([102,],[177,]),'pvar_def':([104,],[180,]),'nonfluent_def':([104,],[181,]),'statefluent_def':([104,],[182,]),'actionfluent_def':([104,],[183,]),'intermfluent_def':([104,],[184,]),'cpf_def':([106,],[187,]),'lconst_list':([167,259,],[246,321,]),'lconst':([167,259,317,346,406,],[247,247,355,379,429,]),'range_const':([169,354,459,460,461,462,479,480,481,482,],[250,385,467,468,469,470,487,488,489,490,]),'double_type':([169,354,459,460,461,462,479,480,481,482,],[252,252,252,252,252,252,252,252,252,252,]),'int_type':([169,354,459,460,461,462,479,480,481,482,],[253,253,253,253,253,253,253,253,253,253,]),'term_list':([206,],[285,]),'term':([206,217,330,402,],[286,299,367,427,]),'expr_list':([207,],[291,]),'object_const_list':([243,],[315,]),'param_list':([266,],[325,]),'typed_var_list':([293,296,297,],[333,336,337,]),'typed_var':([293,296,297,370,],[334,334,334,395,]),'enum_list':([324,],[358,]),'lconst_case_list':([346,],[378,]),'case_list':([375,],[400,]),'case_def':([375,426,],[401,441,]),'type_spec':([390,391,392,393,445,446,447,448,],[417,421,422,423,455,456,457,458,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rddl","S'",1,None,None,None),
  ('rddl -> rddl_block','rddl',1,'p_rddl','parser.py',251),
  ('rddl_block -> rddl_block domain_block','rddl_block',2,'p_rddl_block','parser.py',255),
  ('rddl_block -> rddl_block instance_block','rddl_block',2,'p_rddl_block','parser.py',256),
  ('rddl_block -> rddl_block nonfluent_block','rddl_block',2,'p_rddl_block','parser.py',257),
  ('rddl_block -> empty','rddl_block',1,'p_rddl_block','parser.py',258),
  ('domain_block -> DOMAIN IDENT LCURLY req_section domain_list RCURLY','domain_block',6,'p_domain_block','parser.py',267),
  ('req_section -> REQUIREMENTS ASSIGN_EQUAL LCURLY string_list RCURLY SEMI','req_section',6,'p_req_section','parser.py',272),
  ('req_section -> REQUIREMENTS LCURLY string_list RCURLY SEMI','req_section',5,'p_req_section','parser.py',273),
  ('req_section -> empty','req_section',1,'p_req_section','parser.py',274),
  ('domain_list -> domain_list type_section','domain_list',2,'p_domain_list','parser.py',281),
  ('domain_list -> domain_list pvar_section','domain_list',2,'p_domain_list','parser.py',282),
  ('domain_list -> domain_list cpf_section','domain_list',2,'p_domain_list','parser.py',283),
  ('domain_list -> domain_list reward_section','domain_list',2,'p_domain_list','parser.py',284),
  ('domain_list -> domain_list action_precond_section','domain_list',2,'p_domain_list','parser.py',285),
  ('domain_list -> domain_list state_action_constraint_section','domain_list',2,'p_domain_list','parser.py',286),
  ('domain_list -> domain_list state_invariant_section','domain_list',2,'p_domain_list','parser.py',287),
  ('domain_list -> empty','domain_list',1,'p_domain_list','parser.py',288),
  ('type_section -> TYPES LCURLY type_list RCURLY SEMI','type_section',5,'p_type_section','parser.py',297),
  ('type_list -> type_list type_def','type_list',2,'p_type_list','parser.py',301),
  ('type_list -> empty','type_list',1,'p_type_list','parser.py',302),
  ('type_def -> IDENT COLON OBJECT SEMI','type_def',4,'p_type_def','parser.py',310),
  ('type_def -> IDENT COLON LCURLY enum_list RCURLY SEMI','type_def',6,'p_type_def','parser.py',311),
  ('enum_list -> enum_list COMMA ENUM_VAL','enum_list',3,'p_enum_list','parser.py',318),
  ('enum_list -> ENUM_VAL','enum_list',1,'p_enum_list','parser.py',319),
  ('enum_list -> empty','enum_list',1,'p_enum_list','parser.py',320),
  ('pvar_section -> PVARIABLES LCURLY pvar_list RCURLY SEMI','pvar_section',5,'p_pvar_section','parser.py',330),
  ('pvar_list -> pvar_list pvar_def','pvar_list',2,'p_pvar_list','parser.py',334),
  ('pvar_list -> empty','pvar_list',1,'p_pvar_list','parser.py',335),
  ('pvar_def -> nonfluent_def','pvar_def',1,'p_pvar_def','parser.py',343),
  ('pvar_def -> statefluent_def','pvar_def',1,'p_pvar_def','parser.py',344),
  ('pvar_def -> actionfluent_def','pvar_def',1,'p_pvar_def','parser.py',345),
  ('pvar_def -> intermfluent_def','pvar_def',1,'p_pvar_def','parser.py',346),
  ('nonfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',15,'p_nonfluent_def','parser.py',350),
  ('nonfluent_def -> IDENT COLON LCURLY NON_FLUENT COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','nonfluent_def',12,'p_nonfluent_def','parser.py',351),
  ('statefluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',15,'p_statefluent_def','parser.py',358),
  ('statefluent_def -> IDENT COLON LCURLY STATE COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','statefluent_def',12,'p_statefluent_def','parser.py',359),
  ('actionfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',15,'p_actionfluent_def','parser.py',366),
  ('actionfluent_def -> IDENT COLON LCURLY ACTION COMMA type_spec COMMA DEFAULT ASSIGN_EQUAL range_const RCURLY SEMI','actionfluent_def',12,'p_actionfluent_def','parser.py',367),
  ('intermfluent_def -> IDENT LPAREN param_list RPAREN COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',15,'p_intermfluent_def','parser.py',374),
  ('intermfluent_def -> IDENT COLON LCURLY INTERMEDIATE COMMA type_spec COMMA LEVEL ASSIGN_EQUAL range_const RCURLY SEMI','intermfluent_def',12,'p_intermfluent_def','parser.py',375),
  ('cpf_section -> cpf_header LCURLY cpf_list RCURLY SEMI','cpf_section',5,'p_cpf_section','parser.py',382),
  ('cpf_header -> CPFS','cpf_header',1,'p_cpf_header','parser.py',386),
  ('cpf_header -> CDFS','cpf_header',1,'p_cpf_header','parser.py',387),
  ('cpf_list -> cpf_list cpf_def','cpf_list',2,'p_cpf_list','parser.py',391),
  ('cpf_list -> empty','cpf_list',1,'p_cpf_list','parser.py',392),
  ('cpf_def -> pvar_expr ASSIGN_EQUAL expr SEMI','cpf_def',4,'p_cpf_def','parser.py',400),
  ('reward_section -> REWARD ASSIGN_EQUAL expr SEMI','reward_section',4,'p_reward_section','parser.py',404),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY action_precond_list RCURLY SEMI','action_precond_section',5,'p_action_precond_section','parser.py',408),
  ('action_precond_section -> ACTION_PRECONDITIONS LCURLY RCURLY SEMI','action_precond_section',4,'p_action_precond_section','parser.py',409),
  ('action_precond_list -> action_precond_list action_precond_def','action_precond_list',2,'p_action_precond_list','parser.py',416),
  ('action_precond_list -> action_precond_def','action_precond_list',1,'p_action_precond_list','parser.py',417),
  ('action_precond_def -> expr SEMI','action_precond_def',2,'p_action_precond_def','parser.py',425),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY state_cons_list RCURLY SEMI','state_action_constraint_section',5,'p_state_action_constraint_section','parser.py',429),
  ('state_action_constraint_section -> STATE_ACTION_CONSTRAINTS LCURLY RCURLY SEMI','state_action_constraint_section',4,'p_state_action_constraint_section','parser.py',430),
  ('state_cons_list -> state_cons_list state_cons_def','state_cons_list',2,'p_state_cons_list','parser.py',437),
  ('state_cons_list -> state_cons_def','state_cons_list',1,'p_state_cons_list','parser.py',438),
  ('state_cons_def -> expr SEMI','state_cons_def',2,'p_state_cons_def','parser.py',446),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY state_invariant_list RCURLY SEMI','state_invariant_section',5,'p_state_invariant_section','parser.py',450),
  ('state_invariant_section -> STATE_INVARIANTS LCURLY RCURLY SEMI','state_invariant_section',4,'p_state_invariant_section','parser.py',451),
  ('state_invariant_list -> state_invariant_list state_invariant_def','state_invariant_list',2,'p_state_invariant_list','parser.py',458),
  ('state_invariant_list -> state_invariant_def','state_invariant_list',1,'p_state_invariant_list','parser.py',459),
  ('state_invariant_def -> expr SEMI','state_invariant_def',2,'p_state_invariant_def','parser.py',467),
  ('term_list -> term_list COMMA term','term_list',3,'p_term_list','parser.py',471),
  ('term_list -> term','term_list',1,'p_term_list','parser.py',472),
  ('term_list -> empty','term_list',1,'p_term_list','parser.py',473),
  ('term -> VAR','term',1,'p_term','parser.py',483),
  ('term -> ENUM_VAL','term',1,'p_term','parser.py',484),
  ('term -> pvar_expr','term',1,'p_term','parser.py',485),
  ('expr -> pvar_expr','expr',1,'p_expr','parser.py',489),
  ('expr -> group_expr','expr',1,'p_expr','parser.py',490),
  ('expr -> function_expr','expr',1,'p_expr','parser.py',491),
  ('expr -> relational_expr','expr',1,'p_expr','parser.py',492),
  ('expr -> boolean_expr','expr',1,'p_expr','parser.py',493),
  ('expr -> quantifier_expr','expr',1,'p_expr','parser.py',494),
  ('expr -> numerical_expr','expr',1,'p_expr','parser.py',495),
  ('expr -> aggregation_expr','expr',1,'p_expr','parser.py',496),
  ('expr -> control_expr','expr',1,'p_expr','parser.py',497),
  ('expr -> randomvar_expr','expr',1,'p_expr','parser.py',498),
  ('pvar_expr -> IDENT LPAREN term_list RPAREN','pvar_expr',4,'p_pvar_expr','parser.py',502),
  ('pvar_expr -> IDENT','pvar_expr',1,'p_pvar_expr','parser.py',503),
  ('group_expr -> LBRACK expr RBRACK','group_expr',3,'p_group_expr','parser.py',510),
  ('group_expr -> LPAREN expr RPAREN','group_expr',3,'p_group_expr','parser.py',511),
  ('function_expr -> IDENT LBRACK expr_list RBRACK','function_expr',4,'p_function_expr','parser.py',515),
  ('relational_expr -> expr COMP_EQUAL expr','relational_expr',3,'p_relational_expr','parser.py',519),
  ('relational_expr -> expr NEQ expr','relational_expr',3,'p_relational_expr','parser.py',520),
  ('relational_expr -> expr GREATER expr','relational_expr',3,'p_relational_expr','parser.py',521),
  ('relational_expr -> expr GREATEREQ expr','relational_expr',3,'p_relational_expr','parser.py',522),
  ('relational_expr -> expr LESS expr','relational_expr',3,'p_relational_expr','parser.py',523),
  ('relational_expr -> expr LESSEQ expr','relational_expr',3,'p_relational_expr','parser.py',524),
  ('boolean_expr -> expr AND expr','boolean_expr',3,'p_boolean_expr','parser.py',528),
  ('boolean_expr -> expr AMPERSAND expr','boolean_expr',3,'p_boolean_expr','parser.py',529),
  ('boolean_expr -> expr OR expr','boolean_expr',3,'p_boolean_expr','parser.py',530),
  ('boolean_expr -> expr IMPLY expr','boolean_expr',3,'p_boolean_expr','parser.py',531),
  ('boolean_expr -> expr EQUIV expr','boolean_expr',3,'p_boolean_expr','parser.py',532),
  ('boolean_expr -> NOT expr','boolean_expr',2,'p_boolean_expr','parser.py',533),
  ('boolean_expr -> bool_type','boolean_expr',1,'p_boolean_expr','parser.py',534),
  ('quantifier_expr -> FORALL UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',543),
  ('quantifier_expr -> EXISTS UNDERSCORE LCURLY typed_var_list RCURLY expr','quantifier_expr',6,'p_quantifier_expr','parser.py',544),
  ('numerical_expr -> expr PLUS expr','numerical_expr',3,'p_numerical_expr','parser.py',548),
  ('numerical_expr -> expr MINUS expr','numerical_expr',3,'p_numerical_expr','parser.py',549),
  ('numerical_expr -> expr TIMES expr','numerical_expr',3,'p_numerical_expr','parser.py',550),
  ('numerical_expr -> expr DIV expr','numerical_expr',3,'p_numerical_expr','parser.py',551),
  ('numerical_expr -> MINUS expr','numerical_expr',2,'p_numerical_expr','parser.py',552),
  ('numerical_expr -> PLUS expr','numerical_expr',2,'p_numerical_expr','parser.py',553),
  ('numerical_expr -> INTEGER','numerical_expr',1,'p_numerical_expr','parser.py',554),
  ('numerical_expr -> DOUBLE','numerical_expr',1,'p_numerical_expr','parser.py',555),
  ('aggregation_expr -> IDENT UNDERSCORE LCURLY typed_var_list RCURLY expr','aggregation_expr',6,'p_aggregation_expr','parser.py',564),
  ('control_expr -> IF LPAREN expr RPAREN THEN expr ELSE expr','control_expr',8,'p_control_expr','parser.py',568),
  ('control_expr -> SWITCH LPAREN term RPAREN LCURLY case_list RCURLY','control_expr',7,'p_control_expr','parser.py',569),
  ('randomvar_expr -> BERNOULLI LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',576),
  ('randomvar_expr -> DIRAC_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',577),
  ('randomvar_expr -> KRON_DELTA LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',578),
  ('randomvar_expr -> UNIFORM LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',579),
  ('randomvar_expr -> NORMAL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',580),
  ('randomvar_expr -> EXPONENTIAL LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',581),
  ('randomvar_expr -> DISCRETE LPAREN IDENT COMMA lconst_case_list RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',582),
  ('randomvar_expr -> DIRICHLET LPAREN IDENT COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',583),
  ('randomvar_expr -> POISSON LPAREN expr RPAREN','randomvar_expr',4,'p_randomvar_expr','parser.py',584),
  ('randomvar_expr -> WEIBULL LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',585),
  ('randomvar_expr -> GAMMA LPAREN expr COMMA expr RPAREN','randomvar_expr',6,'p_randomvar_expr','parser.py',586),
  ('typed_var_list -> typed_var_list COMMA typed_var','typed_var_list',3,'p_typed_var_list','parser.py',596),
  ('typed_var_list -> typed_var','typed_var_list',1,'p_typed_var_list','parser.py',597),
  ('typed_var -> VAR COLON IDENT','typed_var',3,'p_typed_var','parser.py',605),
  ('expr_list -> expr_list COMMA expr','expr_list',3,'p_expr_list','parser.py',609),
  ('expr_list -> expr','expr_list',1,'p_expr_list','parser.py',610),
  ('case_list -> case_list COMMA case_def','case_list',3,'p_case_list','parser.py',618),
  ('case_list -> case_def','case_list',1,'p_case_list','parser.py',619),
  ('case_def -> CASE term COLON expr','case_def',4,'p_case_def','parser.py',627),
  ('case_def -> DEFAULT COLON expr','case_def',3,'p_case_def','parser.py',628),
  ('lconst_case_list -> lconst COLON expr','lconst_case_list',3,'p_lconst_case_list','parser.py',635),
  ('lconst_case_list -> lconst COLON OTHERWISE','lconst_case_list',3,'p_lconst_case_list','parser.py',636),
  ('lconst_case_list -> lconst_case_list COMMA lconst COLON expr','lconst_case_list',5,'p_lconst_case_list','parser.py',637),
  ('lconst -> IDENT','lconst',1,'p_lconst','parser.py',645),
  ('lconst -> ENUM_VAL','lconst',1,'p_lconst','parser.py',646),
  ('param_list -> string_list','param_list',1,'p_param_list','parser.py',650),
  ('type_spec -> IDENT','type_spec',1,'p_type_spec','parser.py',654),
  ('type_spec -> INT','type_spec',1,'p_type_spec','parser.py',655),
  ('type_spec -> REAL','type_spec',1,'p_type_spec','parser.py',656),
  ('type_spec -> BOOL','type_spec',1,'p_type_spec','parser.py',657),
  ('range_const -> bool_type','range_const',1,'p_range_const','parser.py',661),
  ('range_const -> double_type','range_const',1,'p_range_const','parser.py',662),
  ('range_const -> int_type','range_const',1,'p_range_const','parser.py',663),
  ('range_const -> IDENT','range_const',1,'p_range_const','parser.py',664),
  ('bool_type -> TRUE','bool_type',1,'p_bool_type','parser.py',668),
  ('bool_type -> FALSE','bool_type',1,'p_bool_type','parser.py',669),
  ('double_type -> DOUBLE','double_type',1,'p_double_type','parser.py',673),
  ('double_type -> MINUS DOUBLE','double_type',2,'p_double_type','parser.py',674),
  ('double_type -> POS_INF','double_type',1,'p_double_type','parser.py',675),
  ('double_type -> NEG_INF','double_type',1,'p_double_type','parser.py',676),
  ('int_type -> INTEGER','int_type',1,'p_int_type','parser.py',680),
  ('int_type -> MINUS INTEGER','int_type',2,'p_int_type','parser.py',681),
  ('pos_int_type_or_pos_inf -> INTEGER','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',685),
  ('pos_int_type_or_pos_inf -> POS_INF','pos_int_type_or_pos_inf',1,'p_pos_int_type_or_pos_inf','parser.py',686),
  ('instance_block -> INSTANCE IDENT LCURLY instance_list RCURLY','instance_block',5,'p_instance_block','parser.py',690),
  ('instance_list -> instance_list domain_section','instance_list',2,'p_instance_list','parser.py',695),
  ('instance_list -> instance_list nonfluents_section','instance_list',2,'p_instance_list','parser.py',696),
  ('instance_list -> instance_list objects_section','instance_list',2,'p_instance_list','parser.py',697),
  ('instance_list -> instance_list init_state_section','instance_list',2,'p_instance_list','parser.py',698),
  ('instance_list -> instance_list max_nondef_actions_section','instance_list',2,'p_instance_list','parser.py',699),
  ('instance_list -> instance_list horizon_spec_section','instance_list',2,'p_instance_list','parser.py',700),
  ('instance_list -> instance_list discount_section','instance_list',2,'p_instance_list','parser.py',701),
  ('instance_list -> empty','instance_list',1,'p_instance_list','parser.py',702),
  ('domain_section -> DOMAIN ASSIGN_EQUAL IDENT SEMI','domain_section',4,'p_domain_section','parser.py',711),
  ('nonfluents_section -> NON_FLUENTS ASSIGN_EQUAL IDENT SEMI','nonfluents_section',4,'p_nonfluents_section','parser.py',715),
  ('objects_section -> OBJECTS LCURLY objects_list RCURLY SEMI','objects_section',5,'p_objects_section','parser.py',719),
  ('init_state_section -> INIT_STATE LCURLY pvar_inst_list RCURLY SEMI','init_state_section',5,'p_init_state_section','parser.py',723),
  ('max_nondef_actions_section -> MAX_NONDEF_ACTIONS ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','max_nondef_actions_section',4,'p_max_nondef_actions_section','parser.py',727),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL pos_int_type_or_pos_inf SEMI','horizon_spec_section',4,'p_horizon_spec_section','parser.py',731),
  ('horizon_spec_section -> HORIZON ASSIGN_EQUAL TERMINATE_WHEN LPAREN expr RPAREN','horizon_spec_section',6,'p_horizon_spec_section','parser.py',732),
  ('discount_section -> DISCOUNT ASSIGN_EQUAL DOUBLE SEMI','discount_section',4,'p_discount_section','parser.py',739),
  ('nonfluent_block -> NON_FLUENTS IDENT LCURLY nonfluent_list RCURLY','nonfluent_block',5,'p_nonfluent_block','parser.py',743),
  ('nonfluent_list -> nonfluent_list domain_section','nonfluent_list',2,'p_nonfluent_list','parser.py',748),
  ('nonfluent_list -> nonfluent_list objects_section','nonfluent_list',2,'p_nonfluent_list','parser.py',749),
  ('nonfluent_list -> nonfluent_list init_non_fluent_section','nonfluent_list',2,'p_nonfluent_list','parser.py',750),
  ('nonfluent_list -> empty','nonfluent_list',1,'p_nonfluent_list','parser.py',751),
  ('init_non_fluent_section -> NON_FLUENTS LCURLY pvar_inst_list RCURLY SEMI','init_non_fluent_section',5,'p_init_non_fluent_section','parser.py',760),
  ('objects_list -> objects_list objects_def','objects_list',2,'p_objects_list','parser.py',764),
  ('objects_list -> objects_def','objects_list',1,'p_objects_list','parser.py',765),
  ('objects_def -> IDENT COLON LCURLY object_const_list RCURLY SEMI','objects_def',6,'p_objects_def','parser.py',773),
  ('object_const_list -> object_const_list COMMA IDENT','object_const_list',3,'p_object_const_list','parser.py',777),
  ('object_const_list -> IDENT','object_const_list',1,'p_object_const_list','parser.py',778),
  ('pvar_inst_list -> pvar_inst_list pvar_inst_def','pvar_inst_list',2,'p_pvar_inst_list','parser.py',786),
  ('pvar_inst_list -> pvar_inst_def','pvar_inst_list',1,'p_pvar_inst_list','parser.py',787),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',5,'p_pvar_inst_def','parser.py',795),
  ('pvar_inst_def -> IDENT SEMI','pvar_inst_def',2,'p_pvar_inst_def','parser.py',796),
  ('pvar_inst_def -> NOT IDENT LPAREN lconst_list RPAREN SEMI','pvar_inst_def',6,'p_pvar_inst_def','parser.py',797),
  ('pvar_inst_def -> NOT IDENT SEMI','pvar_inst_def',3,'p_pvar_inst_def','parser.py',798),
  ('pvar_inst_def -> IDENT LPAREN lconst_list RPAREN ASSIGN_EQUAL range_const SEMI','pvar_inst_def',7,'p_pvar_inst_def','parser.py',799),
  ('pvar_inst_def -> IDENT ASSIGN_EQUAL range_const SEMI','pvar_inst_def',4,'p_pvar_inst_def','parser.py',800),
  ('lconst_list -> lconst_list COMMA lconst','lconst_list',3,'p_lconst_list','parser.py',815),
  ('lconst_list -> lconst','lconst_list',1,'p_lconst_list','parser.py',816),
  ('string_list -> string_list COMMA IDENT','string_list',3,'p_string_list','parser.py',824),
  ('string_list -> IDENT','string_list',1,'p_string_list','parser.py',825),
  ('string_list -> empty','string_list',1,'p_string_list','parser.py',826),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',836),
]
