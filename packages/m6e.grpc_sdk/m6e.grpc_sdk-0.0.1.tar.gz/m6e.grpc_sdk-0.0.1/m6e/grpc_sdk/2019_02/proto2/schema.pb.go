// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema.proto

/*
Package proto2 is a generated protocol buffer package.

It is generated from these files:
	schema.proto

It has these top-level messages:
	EndpointUnion
	IdUnionQuery
	AllQuery
	ServiceQuery
	ServicePortsQuery
	LocationQuery
	LengthValueQuery
	FloatRangeQuery
	GetServiceByIdRequestFilter
	IdUnionFilter
	AllFilter
	ServiceFilter
	ServicePortsFilter
	LocationFilter
	LengthValueFilter
	FloatRangeFilter
	EndpointUnionFilter
	StringFilter
	BooleanFilter
	IntFilter
	FloatFilter
	IdUnion
	All
	Service
	ServicePorts
	Location
	LengthValue
	FloatRange
	GetServicesEndpoint
	GetServiceByIdEndpoint
	CreateServicesEndpoint
	UpdateServicesEndpoint
	DeleteServicesEndpoint
	Error
	RequestMeta
	ResponseMeta
	GetServicesRequest
	GetServicesResponse
	GetServiceByIdRequest
	GetServiceByIdResponse
	CreateServicesRequest
	CreateServicesResponse
	UpdateServicesRequest
	UpdateServicesResponse
	DeleteServicesRequest
	DeleteServicesResponse
*/
package proto2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EndpointKind int32

const (
	EndpointKind_GET_SERVICES      EndpointKind = 0
	EndpointKind_GET_SERVICE_BY_ID EndpointKind = 1
	EndpointKind_CREATE_SERVICES   EndpointKind = 2
	EndpointKind_UPDATE_SERVICES   EndpointKind = 3
	EndpointKind_DELETE_SERVICES   EndpointKind = 4
	EndpointKind_WATCH_SERVICES    EndpointKind = 5
)

var EndpointKind_name = map[int32]string{
	0: "GET_SERVICES",
	1: "GET_SERVICE_BY_ID",
	2: "CREATE_SERVICES",
	3: "UPDATE_SERVICES",
	4: "DELETE_SERVICES",
	5: "WATCH_SERVICES",
}
var EndpointKind_value = map[string]int32{
	"GET_SERVICES":      0,
	"GET_SERVICE_BY_ID": 1,
	"CREATE_SERVICES":   2,
	"UPDATE_SERVICES":   3,
	"DELETE_SERVICES":   4,
	"WATCH_SERVICES":    5,
}

func (x EndpointKind) Enum() *EndpointKind {
	p := new(EndpointKind)
	*p = x
	return p
}
func (x EndpointKind) String() string {
	return proto.EnumName(EndpointKind_name, int32(x))
}
func (x *EndpointKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EndpointKind_value, data, "EndpointKind")
	if err != nil {
		return err
	}
	*x = EndpointKind(value)
	return nil
}
func (EndpointKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type IdKind int32

const (
	IdKind_URL      IdKind = 0
	IdKind_NAME     IdKind = 1
	IdKind_USERNAME IdKind = 2
)

var IdKind_name = map[int32]string{
	0: "URL",
	1: "NAME",
	2: "USERNAME",
}
var IdKind_value = map[string]int32{
	"URL":      0,
	"NAME":     1,
	"USERNAME": 2,
}

func (x IdKind) Enum() *IdKind {
	p := new(IdKind)
	*p = x
	return p
}
func (x IdKind) String() string {
	return proto.EnumName(IdKind_name, int32(x))
}
func (x *IdKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(IdKind_value, data, "IdKind")
	if err != nil {
		return err
	}
	*x = IdKind(value)
	return nil
}
func (IdKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type LengthUnit int32

const (
	LengthUnit_NANOMETER  LengthUnit = 0
	LengthUnit_MICROMETER LengthUnit = 1
	LengthUnit_MILLIMETER LengthUnit = 2
	LengthUnit_CENTIMETER LengthUnit = 3
	LengthUnit_DECIMETER  LengthUnit = 4
	LengthUnit_METER      LengthUnit = 5
	LengthUnit_KILOMETER  LengthUnit = 6
	LengthUnit_THOU       LengthUnit = 7
	LengthUnit_LINE       LengthUnit = 8
	LengthUnit_INCH       LengthUnit = 9
	LengthUnit_FOOT       LengthUnit = 10
	LengthUnit_YARD       LengthUnit = 11
	LengthUnit_MILE       LengthUnit = 12
	LengthUnit_LEAGUE     LengthUnit = 13
)

var LengthUnit_name = map[int32]string{
	0:  "NANOMETER",
	1:  "MICROMETER",
	2:  "MILLIMETER",
	3:  "CENTIMETER",
	4:  "DECIMETER",
	5:  "METER",
	6:  "KILOMETER",
	7:  "THOU",
	8:  "LINE",
	9:  "INCH",
	10: "FOOT",
	11: "YARD",
	12: "MILE",
	13: "LEAGUE",
}
var LengthUnit_value = map[string]int32{
	"NANOMETER":  0,
	"MICROMETER": 1,
	"MILLIMETER": 2,
	"CENTIMETER": 3,
	"DECIMETER":  4,
	"METER":      5,
	"KILOMETER":  6,
	"THOU":       7,
	"LINE":       8,
	"INCH":       9,
	"FOOT":       10,
	"YARD":       11,
	"MILE":       12,
	"LEAGUE":     13,
}

func (x LengthUnit) Enum() *LengthUnit {
	p := new(LengthUnit)
	*p = x
	return p
}
func (x LengthUnit) String() string {
	return proto.EnumName(LengthUnit_name, int32(x))
}
func (x *LengthUnit) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(LengthUnit_value, data, "LengthUnit")
	if err != nil {
		return err
	}
	*x = LengthUnit(value)
	return nil
}
func (LengthUnit) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type ValueKind int32

const (
	ValueKind_VALUE ValueKind = 0
	ValueKind_RANGE ValueKind = 1
)

var ValueKind_name = map[int32]string{
	0: "VALUE",
	1: "RANGE",
}
var ValueKind_value = map[string]int32{
	"VALUE": 0,
	"RANGE": 1,
}

func (x ValueKind) Enum() *ValueKind {
	p := new(ValueKind)
	*p = x
	return p
}
func (x ValueKind) String() string {
	return proto.EnumName(ValueKind_name, int32(x))
}
func (x *ValueKind) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ValueKind_value, data, "ValueKind")
	if err != nil {
		return err
	}
	*x = ValueKind(value)
	return nil
}
func (ValueKind) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type EndpointUnion struct {
	Hash             *string                 `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Kind             *EndpointKind           `protobuf:"varint,2,opt,name=kind,enum=EndpointKind" json:"kind,omitempty"`
	GetServices      *GetServicesEndpoint    `protobuf:"bytes,3,opt,name=getServices" json:"getServices,omitempty"`
	GetServiceById   *GetServiceByIdEndpoint `protobuf:"bytes,4,opt,name=getServiceById" json:"getServiceById,omitempty"`
	CreateServices   *CreateServicesEndpoint `protobuf:"bytes,5,opt,name=createServices" json:"createServices,omitempty"`
	UpdateServices   *UpdateServicesEndpoint `protobuf:"bytes,6,opt,name=updateServices" json:"updateServices,omitempty"`
	DeleteServices   *DeleteServicesEndpoint `protobuf:"bytes,7,opt,name=deleteServices" json:"deleteServices,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *EndpointUnion) Reset()                    { *m = EndpointUnion{} }
func (m *EndpointUnion) String() string            { return proto.CompactTextString(m) }
func (*EndpointUnion) ProtoMessage()               {}
func (*EndpointUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EndpointUnion) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *EndpointUnion) GetKind() EndpointKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return EndpointKind_GET_SERVICES
}

func (m *EndpointUnion) GetGetServices() *GetServicesEndpoint {
	if m != nil {
		return m.GetServices
	}
	return nil
}

func (m *EndpointUnion) GetGetServiceById() *GetServiceByIdEndpoint {
	if m != nil {
		return m.GetServiceById
	}
	return nil
}

func (m *EndpointUnion) GetCreateServices() *CreateServicesEndpoint {
	if m != nil {
		return m.CreateServices
	}
	return nil
}

func (m *EndpointUnion) GetUpdateServices() *UpdateServicesEndpoint {
	if m != nil {
		return m.UpdateServices
	}
	return nil
}

func (m *EndpointUnion) GetDeleteServices() *DeleteServicesEndpoint {
	if m != nil {
		return m.DeleteServices
	}
	return nil
}

type IdUnionQuery struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Kind             *IdKind `protobuf:"varint,2,opt,name=kind,enum=IdKind" json:"kind,omitempty"`
	Url              *string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Name             *string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Username         *string `protobuf:"bytes,5,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IdUnionQuery) Reset()                    { *m = IdUnionQuery{} }
func (m *IdUnionQuery) String() string            { return proto.CompactTextString(m) }
func (*IdUnionQuery) ProtoMessage()               {}
func (*IdUnionQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *IdUnionQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *IdUnionQuery) GetKind() IdKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return IdKind_URL
}

func (m *IdUnionQuery) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *IdUnionQuery) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *IdUnionQuery) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

type AllQuery struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	ILte             *int32   `protobuf:"varint,2,opt,name=i_lte,json=iLte" json:"i_lte,omitempty"`
	IGte             *int32   `protobuf:"varint,3,opt,name=i_gte,json=iGte" json:"i_gte,omitempty"`
	S                *string  `protobuf:"bytes,4,opt,name=s" json:"s,omitempty"`
	FLte             *float64 `protobuf:"fixed64,5,opt,name=f_lte,json=fLte" json:"f_lte,omitempty"`
	FGte             *float64 `protobuf:"fixed64,6,opt,name=f_gte,json=fGte" json:"f_gte,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *AllQuery) Reset()                    { *m = AllQuery{} }
func (m *AllQuery) String() string            { return proto.CompactTextString(m) }
func (*AllQuery) ProtoMessage()               {}
func (*AllQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AllQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *AllQuery) GetILte() int32 {
	if m != nil && m.ILte != nil {
		return *m.ILte
	}
	return 0
}

func (m *AllQuery) GetIGte() int32 {
	if m != nil && m.IGte != nil {
		return *m.IGte
	}
	return 0
}

func (m *AllQuery) GetS() string {
	if m != nil && m.S != nil {
		return *m.S
	}
	return ""
}

func (m *AllQuery) GetFLte() float64 {
	if m != nil && m.FLte != nil {
		return *m.FLte
	}
	return 0
}

func (m *AllQuery) GetFGte() float64 {
	if m != nil && m.FGte != nil {
		return *m.FGte
	}
	return 0
}

type ServiceQuery struct {
	Hash             *string            `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Name             *string            `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Host             *string            `protobuf:"bytes,3,opt,name=host" json:"host,omitempty"`
	Ports            *ServicePortsQuery `protobuf:"bytes,4,opt,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *ServiceQuery) Reset()                    { *m = ServiceQuery{} }
func (m *ServiceQuery) String() string            { return proto.CompactTextString(m) }
func (*ServiceQuery) ProtoMessage()               {}
func (*ServiceQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ServiceQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ServiceQuery) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *ServiceQuery) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *ServiceQuery) GetPorts() *ServicePortsQuery {
	if m != nil {
		return m.Ports
	}
	return nil
}

type ServicePortsQuery struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	GrpcLte          *int32  `protobuf:"varint,2,opt,name=grpc_lte,json=grpcLte" json:"grpc_lte,omitempty"`
	GrpcGte          *int32  `protobuf:"varint,3,opt,name=grpc_gte,json=grpcGte" json:"grpc_gte,omitempty"`
	GraphqlLte       *int32  `protobuf:"varint,4,opt,name=graphql_lte,json=graphqlLte" json:"graphql_lte,omitempty"`
	GraphqlGte       *int32  `protobuf:"varint,5,opt,name=graphql_gte,json=graphqlGte" json:"graphql_gte,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServicePortsQuery) Reset()                    { *m = ServicePortsQuery{} }
func (m *ServicePortsQuery) String() string            { return proto.CompactTextString(m) }
func (*ServicePortsQuery) ProtoMessage()               {}
func (*ServicePortsQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ServicePortsQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ServicePortsQuery) GetGrpcLte() int32 {
	if m != nil && m.GrpcLte != nil {
		return *m.GrpcLte
	}
	return 0
}

func (m *ServicePortsQuery) GetGrpcGte() int32 {
	if m != nil && m.GrpcGte != nil {
		return *m.GrpcGte
	}
	return 0
}

func (m *ServicePortsQuery) GetGraphqlLte() int32 {
	if m != nil && m.GraphqlLte != nil {
		return *m.GraphqlLte
	}
	return 0
}

func (m *ServicePortsQuery) GetGraphqlGte() int32 {
	if m != nil && m.GraphqlGte != nil {
		return *m.GraphqlGte
	}
	return 0
}

type LocationQuery struct {
	Hash                 *string           `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Radius               *LengthValueQuery `protobuf:"bytes,2,opt,name=radius" json:"radius,omitempty"`
	Street               *string           `protobuf:"bytes,3,opt,name=street" json:"street,omitempty"`
	ZipCode              *string           `protobuf:"bytes,4,opt,name=zipCode" json:"zipCode,omitempty"`
	City                 *string           `protobuf:"bytes,5,opt,name=city" json:"city,omitempty"`
	CityDistrict         *string           `protobuf:"bytes,6,opt,name=cityDistrict" json:"cityDistrict,omitempty"`
	Country              *string           `protobuf:"bytes,7,opt,name=country" json:"country,omitempty"`
	CountryState         *string           `protobuf:"bytes,8,opt,name=countryState" json:"countryState,omitempty"`
	CountryStateDistrict *string           `protobuf:"bytes,9,opt,name=countryStateDistrict" json:"countryStateDistrict,omitempty"`
	XXX_unrecognized     []byte            `json:"-"`
}

func (m *LocationQuery) Reset()                    { *m = LocationQuery{} }
func (m *LocationQuery) String() string            { return proto.CompactTextString(m) }
func (*LocationQuery) ProtoMessage()               {}
func (*LocationQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *LocationQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *LocationQuery) GetRadius() *LengthValueQuery {
	if m != nil {
		return m.Radius
	}
	return nil
}

func (m *LocationQuery) GetStreet() string {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return ""
}

func (m *LocationQuery) GetZipCode() string {
	if m != nil && m.ZipCode != nil {
		return *m.ZipCode
	}
	return ""
}

func (m *LocationQuery) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *LocationQuery) GetCityDistrict() string {
	if m != nil && m.CityDistrict != nil {
		return *m.CityDistrict
	}
	return ""
}

func (m *LocationQuery) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *LocationQuery) GetCountryState() string {
	if m != nil && m.CountryState != nil {
		return *m.CountryState
	}
	return ""
}

func (m *LocationQuery) GetCountryStateDistrict() string {
	if m != nil && m.CountryStateDistrict != nil {
		return *m.CountryStateDistrict
	}
	return ""
}

type LengthValueQuery struct {
	Hash             *string          `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Kind             *ValueKind       `protobuf:"varint,2,opt,name=kind,enum=ValueKind" json:"kind,omitempty"`
	Unit             *LengthUnit      `protobuf:"varint,3,opt,name=unit,enum=LengthUnit" json:"unit,omitempty"`
	BaseValueLte     *float64         `protobuf:"fixed64,4,opt,name=baseValue_lte,json=baseValueLte" json:"baseValue_lte,omitempty"`
	BaseValueGte     *float64         `protobuf:"fixed64,5,opt,name=baseValue_gte,json=baseValueGte" json:"baseValue_gte,omitempty"`
	ValueLte         *float64         `protobuf:"fixed64,6,opt,name=value_lte,json=valueLte" json:"value_lte,omitempty"`
	ValueGte         *float64         `protobuf:"fixed64,7,opt,name=value_gte,json=valueGte" json:"value_gte,omitempty"`
	BaseRange        *FloatRangeQuery `protobuf:"bytes,8,opt,name=baseRange" json:"baseRange,omitempty"`
	Range            *FloatRangeQuery `protobuf:"bytes,9,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *LengthValueQuery) Reset()                    { *m = LengthValueQuery{} }
func (m *LengthValueQuery) String() string            { return proto.CompactTextString(m) }
func (*LengthValueQuery) ProtoMessage()               {}
func (*LengthValueQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *LengthValueQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *LengthValueQuery) GetKind() ValueKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ValueKind_VALUE
}

func (m *LengthValueQuery) GetUnit() LengthUnit {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return LengthUnit_NANOMETER
}

func (m *LengthValueQuery) GetBaseValueLte() float64 {
	if m != nil && m.BaseValueLte != nil {
		return *m.BaseValueLte
	}
	return 0
}

func (m *LengthValueQuery) GetBaseValueGte() float64 {
	if m != nil && m.BaseValueGte != nil {
		return *m.BaseValueGte
	}
	return 0
}

func (m *LengthValueQuery) GetValueLte() float64 {
	if m != nil && m.ValueLte != nil {
		return *m.ValueLte
	}
	return 0
}

func (m *LengthValueQuery) GetValueGte() float64 {
	if m != nil && m.ValueGte != nil {
		return *m.ValueGte
	}
	return 0
}

func (m *LengthValueQuery) GetBaseRange() *FloatRangeQuery {
	if m != nil {
		return m.BaseRange
	}
	return nil
}

func (m *LengthValueQuery) GetRange() *FloatRangeQuery {
	if m != nil {
		return m.Range
	}
	return nil
}

type FloatRangeQuery struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	FromLte          *float64 `protobuf:"fixed64,2,opt,name=from_lte,json=fromLte" json:"from_lte,omitempty"`
	FromGte          *float64 `protobuf:"fixed64,3,opt,name=from_gte,json=fromGte" json:"from_gte,omitempty"`
	ToLte            *float64 `protobuf:"fixed64,4,opt,name=to_lte,json=toLte" json:"to_lte,omitempty"`
	ToGte            *float64 `protobuf:"fixed64,5,opt,name=to_gte,json=toGte" json:"to_gte,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FloatRangeQuery) Reset()                    { *m = FloatRangeQuery{} }
func (m *FloatRangeQuery) String() string            { return proto.CompactTextString(m) }
func (*FloatRangeQuery) ProtoMessage()               {}
func (*FloatRangeQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FloatRangeQuery) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *FloatRangeQuery) GetFromLte() float64 {
	if m != nil && m.FromLte != nil {
		return *m.FromLte
	}
	return 0
}

func (m *FloatRangeQuery) GetFromGte() float64 {
	if m != nil && m.FromGte != nil {
		return *m.FromGte
	}
	return 0
}

func (m *FloatRangeQuery) GetToLte() float64 {
	if m != nil && m.ToLte != nil {
		return *m.ToLte
	}
	return 0
}

func (m *FloatRangeQuery) GetToGte() float64 {
	if m != nil && m.ToGte != nil {
		return *m.ToGte
	}
	return 0
}

type GetServiceByIdRequestFilter struct {
	Hash             *string                        `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Id               *IdUnionFilter                 `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	And              []*GetServiceByIdRequestFilter `protobuf:"bytes,3,rep,name=and" json:"and,omitempty"`
	Or               []*GetServiceByIdRequestFilter `protobuf:"bytes,4,rep,name=or" json:"or,omitempty"`
	Not              []*GetServiceByIdRequestFilter `protobuf:"bytes,5,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *GetServiceByIdRequestFilter) Reset()                    { *m = GetServiceByIdRequestFilter{} }
func (m *GetServiceByIdRequestFilter) String() string            { return proto.CompactTextString(m) }
func (*GetServiceByIdRequestFilter) ProtoMessage()               {}
func (*GetServiceByIdRequestFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetServiceByIdRequestFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServiceByIdRequestFilter) GetId() *IdUnionFilter {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetServiceByIdRequestFilter) GetAnd() []*GetServiceByIdRequestFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *GetServiceByIdRequestFilter) GetOr() []*GetServiceByIdRequestFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *GetServiceByIdRequestFilter) GetNot() []*GetServiceByIdRequestFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type IdUnionFilter struct {
	Hash                  *string          `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	KindIs                *IdKind          `protobuf:"varint,2,opt,name=kind_is,json=kindIs,enum=IdKind" json:"kind_is,omitempty"`
	KindNot               *IdKind          `protobuf:"varint,3,opt,name=kind_not,json=kindNot,enum=IdKind" json:"kind_not,omitempty"`
	KindIn                []IdKind         `protobuf:"varint,4,rep,name=kind_in,json=kindIn,enum=IdKind" json:"kind_in,omitempty"`
	KindNotIn             []IdKind         `protobuf:"varint,5,rep,name=kind_not_in,json=kindNotIn,enum=IdKind" json:"kind_not_in,omitempty"`
	UrlIs                 *string          `protobuf:"bytes,6,opt,name=url_is,json=urlIs" json:"url_is,omitempty"`
	UrlNot                *string          `protobuf:"bytes,7,opt,name=url_not,json=urlNot" json:"url_not,omitempty"`
	UrlLt                 *string          `protobuf:"bytes,8,opt,name=url_lt,json=urlLt" json:"url_lt,omitempty"`
	UrlLte                *string          `protobuf:"bytes,9,opt,name=url_lte,json=urlLte" json:"url_lte,omitempty"`
	UrlGt                 *string          `protobuf:"bytes,10,opt,name=url_gt,json=urlGt" json:"url_gt,omitempty"`
	UrlGte                *string          `protobuf:"bytes,11,opt,name=url_gte,json=urlGte" json:"url_gte,omitempty"`
	UrlContains           *string          `protobuf:"bytes,12,opt,name=url_contains,json=urlContains" json:"url_contains,omitempty"`
	UrlNotContains        *string          `protobuf:"bytes,13,opt,name=url_not_contains,json=urlNotContains" json:"url_not_contains,omitempty"`
	UrlStartsWith         *string          `protobuf:"bytes,14,opt,name=url_starts_with,json=urlStartsWith" json:"url_starts_with,omitempty"`
	UrlNotStartsWith      *string          `protobuf:"bytes,15,opt,name=url_not_starts_with,json=urlNotStartsWith" json:"url_not_starts_with,omitempty"`
	UrlEndsWith           *string          `protobuf:"bytes,16,opt,name=url_ends_with,json=urlEndsWith" json:"url_ends_with,omitempty"`
	UrlNotEndsWith        *string          `protobuf:"bytes,17,opt,name=url_not_ends_with,json=urlNotEndsWith" json:"url_not_ends_with,omitempty"`
	UrlIn                 []string         `protobuf:"bytes,18,rep,name=url_in,json=urlIn" json:"url_in,omitempty"`
	UrlNotIn              []string         `protobuf:"bytes,19,rep,name=url_not_in,json=urlNotIn" json:"url_not_in,omitempty"`
	NameIs                *string          `protobuf:"bytes,20,opt,name=name_is,json=nameIs" json:"name_is,omitempty"`
	NameNot               *string          `protobuf:"bytes,21,opt,name=name_not,json=nameNot" json:"name_not,omitempty"`
	NameLt                *string          `protobuf:"bytes,22,opt,name=name_lt,json=nameLt" json:"name_lt,omitempty"`
	NameLte               *string          `protobuf:"bytes,23,opt,name=name_lte,json=nameLte" json:"name_lte,omitempty"`
	NameGt                *string          `protobuf:"bytes,24,opt,name=name_gt,json=nameGt" json:"name_gt,omitempty"`
	NameGte               *string          `protobuf:"bytes,25,opt,name=name_gte,json=nameGte" json:"name_gte,omitempty"`
	NameContains          *string          `protobuf:"bytes,26,opt,name=name_contains,json=nameContains" json:"name_contains,omitempty"`
	NameNotContains       *string          `protobuf:"bytes,27,opt,name=name_not_contains,json=nameNotContains" json:"name_not_contains,omitempty"`
	NameStartsWith        *string          `protobuf:"bytes,28,opt,name=name_starts_with,json=nameStartsWith" json:"name_starts_with,omitempty"`
	NameNotStartsWith     *string          `protobuf:"bytes,29,opt,name=name_not_starts_with,json=nameNotStartsWith" json:"name_not_starts_with,omitempty"`
	NameEndsWith          *string          `protobuf:"bytes,30,opt,name=name_ends_with,json=nameEndsWith" json:"name_ends_with,omitempty"`
	NameNotEndsWith       *string          `protobuf:"bytes,31,opt,name=name_not_ends_with,json=nameNotEndsWith" json:"name_not_ends_with,omitempty"`
	NameIn                []string         `protobuf:"bytes,32,rep,name=name_in,json=nameIn" json:"name_in,omitempty"`
	NameNotIn             []string         `protobuf:"bytes,33,rep,name=name_not_in,json=nameNotIn" json:"name_not_in,omitempty"`
	UsernameIs            *string          `protobuf:"bytes,34,opt,name=username_is,json=usernameIs" json:"username_is,omitempty"`
	UsernameNot           *string          `protobuf:"bytes,35,opt,name=username_not,json=usernameNot" json:"username_not,omitempty"`
	UsernameLt            *string          `protobuf:"bytes,36,opt,name=username_lt,json=usernameLt" json:"username_lt,omitempty"`
	UsernameLte           *string          `protobuf:"bytes,37,opt,name=username_lte,json=usernameLte" json:"username_lte,omitempty"`
	UsernameGt            *string          `protobuf:"bytes,38,opt,name=username_gt,json=usernameGt" json:"username_gt,omitempty"`
	UsernameGte           *string          `protobuf:"bytes,39,opt,name=username_gte,json=usernameGte" json:"username_gte,omitempty"`
	UsernameContains      *string          `protobuf:"bytes,40,opt,name=username_contains,json=usernameContains" json:"username_contains,omitempty"`
	UsernameNotContains   *string          `protobuf:"bytes,41,opt,name=username_not_contains,json=usernameNotContains" json:"username_not_contains,omitempty"`
	UsernameStartsWith    *string          `protobuf:"bytes,42,opt,name=username_starts_with,json=usernameStartsWith" json:"username_starts_with,omitempty"`
	UsernameNotStartsWith *string          `protobuf:"bytes,43,opt,name=username_not_starts_with,json=usernameNotStartsWith" json:"username_not_starts_with,omitempty"`
	UsernameEndsWith      *string          `protobuf:"bytes,44,opt,name=username_ends_with,json=usernameEndsWith" json:"username_ends_with,omitempty"`
	UsernameNotEndsWith   *string          `protobuf:"bytes,45,opt,name=username_not_ends_with,json=usernameNotEndsWith" json:"username_not_ends_with,omitempty"`
	UsernameIn            []string         `protobuf:"bytes,46,rep,name=username_in,json=usernameIn" json:"username_in,omitempty"`
	UsernameNotIn         []string         `protobuf:"bytes,47,rep,name=username_not_in,json=usernameNotIn" json:"username_not_in,omitempty"`
	And                   []*IdUnionFilter `protobuf:"bytes,48,rep,name=and" json:"and,omitempty"`
	Or                    []*IdUnionFilter `protobuf:"bytes,49,rep,name=or" json:"or,omitempty"`
	Not                   []*IdUnionFilter `protobuf:"bytes,50,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized      []byte           `json:"-"`
}

func (m *IdUnionFilter) Reset()                    { *m = IdUnionFilter{} }
func (m *IdUnionFilter) String() string            { return proto.CompactTextString(m) }
func (*IdUnionFilter) ProtoMessage()               {}
func (*IdUnionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *IdUnionFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *IdUnionFilter) GetKindIs() IdKind {
	if m != nil && m.KindIs != nil {
		return *m.KindIs
	}
	return IdKind_URL
}

func (m *IdUnionFilter) GetKindNot() IdKind {
	if m != nil && m.KindNot != nil {
		return *m.KindNot
	}
	return IdKind_URL
}

func (m *IdUnionFilter) GetKindIn() []IdKind {
	if m != nil {
		return m.KindIn
	}
	return nil
}

func (m *IdUnionFilter) GetKindNotIn() []IdKind {
	if m != nil {
		return m.KindNotIn
	}
	return nil
}

func (m *IdUnionFilter) GetUrlIs() string {
	if m != nil && m.UrlIs != nil {
		return *m.UrlIs
	}
	return ""
}

func (m *IdUnionFilter) GetUrlNot() string {
	if m != nil && m.UrlNot != nil {
		return *m.UrlNot
	}
	return ""
}

func (m *IdUnionFilter) GetUrlLt() string {
	if m != nil && m.UrlLt != nil {
		return *m.UrlLt
	}
	return ""
}

func (m *IdUnionFilter) GetUrlLte() string {
	if m != nil && m.UrlLte != nil {
		return *m.UrlLte
	}
	return ""
}

func (m *IdUnionFilter) GetUrlGt() string {
	if m != nil && m.UrlGt != nil {
		return *m.UrlGt
	}
	return ""
}

func (m *IdUnionFilter) GetUrlGte() string {
	if m != nil && m.UrlGte != nil {
		return *m.UrlGte
	}
	return ""
}

func (m *IdUnionFilter) GetUrlContains() string {
	if m != nil && m.UrlContains != nil {
		return *m.UrlContains
	}
	return ""
}

func (m *IdUnionFilter) GetUrlNotContains() string {
	if m != nil && m.UrlNotContains != nil {
		return *m.UrlNotContains
	}
	return ""
}

func (m *IdUnionFilter) GetUrlStartsWith() string {
	if m != nil && m.UrlStartsWith != nil {
		return *m.UrlStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUrlNotStartsWith() string {
	if m != nil && m.UrlNotStartsWith != nil {
		return *m.UrlNotStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUrlEndsWith() string {
	if m != nil && m.UrlEndsWith != nil {
		return *m.UrlEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUrlNotEndsWith() string {
	if m != nil && m.UrlNotEndsWith != nil {
		return *m.UrlNotEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUrlIn() []string {
	if m != nil {
		return m.UrlIn
	}
	return nil
}

func (m *IdUnionFilter) GetUrlNotIn() []string {
	if m != nil {
		return m.UrlNotIn
	}
	return nil
}

func (m *IdUnionFilter) GetNameIs() string {
	if m != nil && m.NameIs != nil {
		return *m.NameIs
	}
	return ""
}

func (m *IdUnionFilter) GetNameNot() string {
	if m != nil && m.NameNot != nil {
		return *m.NameNot
	}
	return ""
}

func (m *IdUnionFilter) GetNameLt() string {
	if m != nil && m.NameLt != nil {
		return *m.NameLt
	}
	return ""
}

func (m *IdUnionFilter) GetNameLte() string {
	if m != nil && m.NameLte != nil {
		return *m.NameLte
	}
	return ""
}

func (m *IdUnionFilter) GetNameGt() string {
	if m != nil && m.NameGt != nil {
		return *m.NameGt
	}
	return ""
}

func (m *IdUnionFilter) GetNameGte() string {
	if m != nil && m.NameGte != nil {
		return *m.NameGte
	}
	return ""
}

func (m *IdUnionFilter) GetNameContains() string {
	if m != nil && m.NameContains != nil {
		return *m.NameContains
	}
	return ""
}

func (m *IdUnionFilter) GetNameNotContains() string {
	if m != nil && m.NameNotContains != nil {
		return *m.NameNotContains
	}
	return ""
}

func (m *IdUnionFilter) GetNameStartsWith() string {
	if m != nil && m.NameStartsWith != nil {
		return *m.NameStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetNameNotStartsWith() string {
	if m != nil && m.NameNotStartsWith != nil {
		return *m.NameNotStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetNameEndsWith() string {
	if m != nil && m.NameEndsWith != nil {
		return *m.NameEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetNameNotEndsWith() string {
	if m != nil && m.NameNotEndsWith != nil {
		return *m.NameNotEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetNameIn() []string {
	if m != nil {
		return m.NameIn
	}
	return nil
}

func (m *IdUnionFilter) GetNameNotIn() []string {
	if m != nil {
		return m.NameNotIn
	}
	return nil
}

func (m *IdUnionFilter) GetUsernameIs() string {
	if m != nil && m.UsernameIs != nil {
		return *m.UsernameIs
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameNot() string {
	if m != nil && m.UsernameNot != nil {
		return *m.UsernameNot
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameLt() string {
	if m != nil && m.UsernameLt != nil {
		return *m.UsernameLt
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameLte() string {
	if m != nil && m.UsernameLte != nil {
		return *m.UsernameLte
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameGt() string {
	if m != nil && m.UsernameGt != nil {
		return *m.UsernameGt
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameGte() string {
	if m != nil && m.UsernameGte != nil {
		return *m.UsernameGte
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameContains() string {
	if m != nil && m.UsernameContains != nil {
		return *m.UsernameContains
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameNotContains() string {
	if m != nil && m.UsernameNotContains != nil {
		return *m.UsernameNotContains
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameStartsWith() string {
	if m != nil && m.UsernameStartsWith != nil {
		return *m.UsernameStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameNotStartsWith() string {
	if m != nil && m.UsernameNotStartsWith != nil {
		return *m.UsernameNotStartsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameEndsWith() string {
	if m != nil && m.UsernameEndsWith != nil {
		return *m.UsernameEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameNotEndsWith() string {
	if m != nil && m.UsernameNotEndsWith != nil {
		return *m.UsernameNotEndsWith
	}
	return ""
}

func (m *IdUnionFilter) GetUsernameIn() []string {
	if m != nil {
		return m.UsernameIn
	}
	return nil
}

func (m *IdUnionFilter) GetUsernameNotIn() []string {
	if m != nil {
		return m.UsernameNotIn
	}
	return nil
}

func (m *IdUnionFilter) GetAnd() []*IdUnionFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *IdUnionFilter) GetOr() []*IdUnionFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *IdUnionFilter) GetNot() []*IdUnionFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type AllFilter struct {
	Hash             *string        `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	IIs              *int32         `protobuf:"varint,2,opt,name=i_is,json=iIs" json:"i_is,omitempty"`
	INot             *int32         `protobuf:"varint,3,opt,name=i_not,json=iNot" json:"i_not,omitempty"`
	ILt              *int32         `protobuf:"varint,4,opt,name=i_lt,json=iLt" json:"i_lt,omitempty"`
	ILte             *int32         `protobuf:"varint,5,opt,name=i_lte,json=iLte" json:"i_lte,omitempty"`
	IGt              *int32         `protobuf:"varint,6,opt,name=i_gt,json=iGt" json:"i_gt,omitempty"`
	IGte             *int32         `protobuf:"varint,7,opt,name=i_gte,json=iGte" json:"i_gte,omitempty"`
	IIn              []int32        `protobuf:"varint,8,rep,name=i_in,json=iIn" json:"i_in,omitempty"`
	INotIn           []int32        `protobuf:"varint,9,rep,name=i_not_in,json=iNotIn" json:"i_not_in,omitempty"`
	SIs              *string        `protobuf:"bytes,10,opt,name=s_is,json=sIs" json:"s_is,omitempty"`
	SNot             *string        `protobuf:"bytes,11,opt,name=s_not,json=sNot" json:"s_not,omitempty"`
	SLt              *string        `protobuf:"bytes,12,opt,name=s_lt,json=sLt" json:"s_lt,omitempty"`
	SLte             *string        `protobuf:"bytes,13,opt,name=s_lte,json=sLte" json:"s_lte,omitempty"`
	SGt              *string        `protobuf:"bytes,14,opt,name=s_gt,json=sGt" json:"s_gt,omitempty"`
	SGte             *string        `protobuf:"bytes,15,opt,name=s_gte,json=sGte" json:"s_gte,omitempty"`
	SContains        *string        `protobuf:"bytes,16,opt,name=s_contains,json=sContains" json:"s_contains,omitempty"`
	SNotContains     *string        `protobuf:"bytes,17,opt,name=s_not_contains,json=sNotContains" json:"s_not_contains,omitempty"`
	SStartsWith      *string        `protobuf:"bytes,18,opt,name=s_starts_with,json=sStartsWith" json:"s_starts_with,omitempty"`
	SNotStartsWith   *string        `protobuf:"bytes,19,opt,name=s_not_starts_with,json=sNotStartsWith" json:"s_not_starts_with,omitempty"`
	SEndsWith        *string        `protobuf:"bytes,20,opt,name=s_ends_with,json=sEndsWith" json:"s_ends_with,omitempty"`
	SNotEndsWith     *string        `protobuf:"bytes,21,opt,name=s_not_ends_with,json=sNotEndsWith" json:"s_not_ends_with,omitempty"`
	SIn              []string       `protobuf:"bytes,22,rep,name=s_in,json=sIn" json:"s_in,omitempty"`
	SNotIn           []string       `protobuf:"bytes,23,rep,name=s_not_in,json=sNotIn" json:"s_not_in,omitempty"`
	BIs              *bool          `protobuf:"varint,24,opt,name=b_is,json=bIs" json:"b_is,omitempty"`
	BNot             *bool          `protobuf:"varint,25,opt,name=b_not,json=bNot" json:"b_not,omitempty"`
	FIs              *float64       `protobuf:"fixed64,26,opt,name=f_is,json=fIs" json:"f_is,omitempty"`
	FNot             *float64       `protobuf:"fixed64,27,opt,name=f_not,json=fNot" json:"f_not,omitempty"`
	FLt              *float64       `protobuf:"fixed64,28,opt,name=f_lt,json=fLt" json:"f_lt,omitempty"`
	FLte             *float64       `protobuf:"fixed64,29,opt,name=f_lte,json=fLte" json:"f_lte,omitempty"`
	FGt              *float64       `protobuf:"fixed64,30,opt,name=f_gt,json=fGt" json:"f_gt,omitempty"`
	FGte             *float64       `protobuf:"fixed64,31,opt,name=f_gte,json=fGte" json:"f_gte,omitempty"`
	FIn              []float64      `protobuf:"fixed64,32,rep,name=f_in,json=fIn" json:"f_in,omitempty"`
	FNotIn           []float64      `protobuf:"fixed64,33,rep,name=f_not_in,json=fNotIn" json:"f_not_in,omitempty"`
	IsEvery          *IntFilter     `protobuf:"bytes,34,opt,name=is_every,json=isEvery" json:"is_every,omitempty"`
	IsSome           *IntFilter     `protobuf:"bytes,35,opt,name=is_some,json=isSome" json:"is_some,omitempty"`
	IsNone           *IntFilter     `protobuf:"bytes,36,opt,name=is_none,json=isNone" json:"is_none,omitempty"`
	SsEvery          *StringFilter  `protobuf:"bytes,37,opt,name=ss_every,json=ssEvery" json:"ss_every,omitempty"`
	SsSome           *StringFilter  `protobuf:"bytes,38,opt,name=ss_some,json=ssSome" json:"ss_some,omitempty"`
	SsNone           *StringFilter  `protobuf:"bytes,39,opt,name=ss_none,json=ssNone" json:"ss_none,omitempty"`
	BsEvery          *BooleanFilter `protobuf:"bytes,40,opt,name=bs_every,json=bsEvery" json:"bs_every,omitempty"`
	BsSome           *BooleanFilter `protobuf:"bytes,41,opt,name=bs_some,json=bsSome" json:"bs_some,omitempty"`
	BsNone           *BooleanFilter `protobuf:"bytes,42,opt,name=bs_none,json=bsNone" json:"bs_none,omitempty"`
	FsEvery          *FloatFilter   `protobuf:"bytes,43,opt,name=fs_every,json=fsEvery" json:"fs_every,omitempty"`
	FsSome           *FloatFilter   `protobuf:"bytes,44,opt,name=fs_some,json=fsSome" json:"fs_some,omitempty"`
	FsNone           *FloatFilter   `protobuf:"bytes,45,opt,name=fs_none,json=fsNone" json:"fs_none,omitempty"`
	And              []*AllFilter   `protobuf:"bytes,46,rep,name=and" json:"and,omitempty"`
	Or               []*AllFilter   `protobuf:"bytes,47,rep,name=or" json:"or,omitempty"`
	Not              []*AllFilter   `protobuf:"bytes,48,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *AllFilter) Reset()                    { *m = AllFilter{} }
func (m *AllFilter) String() string            { return proto.CompactTextString(m) }
func (*AllFilter) ProtoMessage()               {}
func (*AllFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AllFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *AllFilter) GetIIs() int32 {
	if m != nil && m.IIs != nil {
		return *m.IIs
	}
	return 0
}

func (m *AllFilter) GetINot() int32 {
	if m != nil && m.INot != nil {
		return *m.INot
	}
	return 0
}

func (m *AllFilter) GetILt() int32 {
	if m != nil && m.ILt != nil {
		return *m.ILt
	}
	return 0
}

func (m *AllFilter) GetILte() int32 {
	if m != nil && m.ILte != nil {
		return *m.ILte
	}
	return 0
}

func (m *AllFilter) GetIGt() int32 {
	if m != nil && m.IGt != nil {
		return *m.IGt
	}
	return 0
}

func (m *AllFilter) GetIGte() int32 {
	if m != nil && m.IGte != nil {
		return *m.IGte
	}
	return 0
}

func (m *AllFilter) GetIIn() []int32 {
	if m != nil {
		return m.IIn
	}
	return nil
}

func (m *AllFilter) GetINotIn() []int32 {
	if m != nil {
		return m.INotIn
	}
	return nil
}

func (m *AllFilter) GetSIs() string {
	if m != nil && m.SIs != nil {
		return *m.SIs
	}
	return ""
}

func (m *AllFilter) GetSNot() string {
	if m != nil && m.SNot != nil {
		return *m.SNot
	}
	return ""
}

func (m *AllFilter) GetSLt() string {
	if m != nil && m.SLt != nil {
		return *m.SLt
	}
	return ""
}

func (m *AllFilter) GetSLte() string {
	if m != nil && m.SLte != nil {
		return *m.SLte
	}
	return ""
}

func (m *AllFilter) GetSGt() string {
	if m != nil && m.SGt != nil {
		return *m.SGt
	}
	return ""
}

func (m *AllFilter) GetSGte() string {
	if m != nil && m.SGte != nil {
		return *m.SGte
	}
	return ""
}

func (m *AllFilter) GetSContains() string {
	if m != nil && m.SContains != nil {
		return *m.SContains
	}
	return ""
}

func (m *AllFilter) GetSNotContains() string {
	if m != nil && m.SNotContains != nil {
		return *m.SNotContains
	}
	return ""
}

func (m *AllFilter) GetSStartsWith() string {
	if m != nil && m.SStartsWith != nil {
		return *m.SStartsWith
	}
	return ""
}

func (m *AllFilter) GetSNotStartsWith() string {
	if m != nil && m.SNotStartsWith != nil {
		return *m.SNotStartsWith
	}
	return ""
}

func (m *AllFilter) GetSEndsWith() string {
	if m != nil && m.SEndsWith != nil {
		return *m.SEndsWith
	}
	return ""
}

func (m *AllFilter) GetSNotEndsWith() string {
	if m != nil && m.SNotEndsWith != nil {
		return *m.SNotEndsWith
	}
	return ""
}

func (m *AllFilter) GetSIn() []string {
	if m != nil {
		return m.SIn
	}
	return nil
}

func (m *AllFilter) GetSNotIn() []string {
	if m != nil {
		return m.SNotIn
	}
	return nil
}

func (m *AllFilter) GetBIs() bool {
	if m != nil && m.BIs != nil {
		return *m.BIs
	}
	return false
}

func (m *AllFilter) GetBNot() bool {
	if m != nil && m.BNot != nil {
		return *m.BNot
	}
	return false
}

func (m *AllFilter) GetFIs() float64 {
	if m != nil && m.FIs != nil {
		return *m.FIs
	}
	return 0
}

func (m *AllFilter) GetFNot() float64 {
	if m != nil && m.FNot != nil {
		return *m.FNot
	}
	return 0
}

func (m *AllFilter) GetFLt() float64 {
	if m != nil && m.FLt != nil {
		return *m.FLt
	}
	return 0
}

func (m *AllFilter) GetFLte() float64 {
	if m != nil && m.FLte != nil {
		return *m.FLte
	}
	return 0
}

func (m *AllFilter) GetFGt() float64 {
	if m != nil && m.FGt != nil {
		return *m.FGt
	}
	return 0
}

func (m *AllFilter) GetFGte() float64 {
	if m != nil && m.FGte != nil {
		return *m.FGte
	}
	return 0
}

func (m *AllFilter) GetFIn() []float64 {
	if m != nil {
		return m.FIn
	}
	return nil
}

func (m *AllFilter) GetFNotIn() []float64 {
	if m != nil {
		return m.FNotIn
	}
	return nil
}

func (m *AllFilter) GetIsEvery() *IntFilter {
	if m != nil {
		return m.IsEvery
	}
	return nil
}

func (m *AllFilter) GetIsSome() *IntFilter {
	if m != nil {
		return m.IsSome
	}
	return nil
}

func (m *AllFilter) GetIsNone() *IntFilter {
	if m != nil {
		return m.IsNone
	}
	return nil
}

func (m *AllFilter) GetSsEvery() *StringFilter {
	if m != nil {
		return m.SsEvery
	}
	return nil
}

func (m *AllFilter) GetSsSome() *StringFilter {
	if m != nil {
		return m.SsSome
	}
	return nil
}

func (m *AllFilter) GetSsNone() *StringFilter {
	if m != nil {
		return m.SsNone
	}
	return nil
}

func (m *AllFilter) GetBsEvery() *BooleanFilter {
	if m != nil {
		return m.BsEvery
	}
	return nil
}

func (m *AllFilter) GetBsSome() *BooleanFilter {
	if m != nil {
		return m.BsSome
	}
	return nil
}

func (m *AllFilter) GetBsNone() *BooleanFilter {
	if m != nil {
		return m.BsNone
	}
	return nil
}

func (m *AllFilter) GetFsEvery() *FloatFilter {
	if m != nil {
		return m.FsEvery
	}
	return nil
}

func (m *AllFilter) GetFsSome() *FloatFilter {
	if m != nil {
		return m.FsSome
	}
	return nil
}

func (m *AllFilter) GetFsNone() *FloatFilter {
	if m != nil {
		return m.FsNone
	}
	return nil
}

func (m *AllFilter) GetAnd() []*AllFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *AllFilter) GetOr() []*AllFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *AllFilter) GetNot() []*AllFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type ServiceFilter struct {
	Hash              *string              `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	IdsEvery          *IdUnionFilter       `protobuf:"bytes,2,opt,name=ids_every,json=idsEvery" json:"ids_every,omitempty"`
	IdsSome           *IdUnionFilter       `protobuf:"bytes,3,opt,name=ids_some,json=idsSome" json:"ids_some,omitempty"`
	IdsNone           *IdUnionFilter       `protobuf:"bytes,4,opt,name=ids_none,json=idsNone" json:"ids_none,omitempty"`
	NameIs            *string              `protobuf:"bytes,5,opt,name=name_is,json=nameIs" json:"name_is,omitempty"`
	NameNot           *string              `protobuf:"bytes,6,opt,name=name_not,json=nameNot" json:"name_not,omitempty"`
	NameLt            *string              `protobuf:"bytes,7,opt,name=name_lt,json=nameLt" json:"name_lt,omitempty"`
	NameLte           *string              `protobuf:"bytes,8,opt,name=name_lte,json=nameLte" json:"name_lte,omitempty"`
	NameGt            *string              `protobuf:"bytes,9,opt,name=name_gt,json=nameGt" json:"name_gt,omitempty"`
	NameGte           *string              `protobuf:"bytes,10,opt,name=name_gte,json=nameGte" json:"name_gte,omitempty"`
	NameContains      *string              `protobuf:"bytes,11,opt,name=name_contains,json=nameContains" json:"name_contains,omitempty"`
	NameNotContains   *string              `protobuf:"bytes,12,opt,name=name_not_contains,json=nameNotContains" json:"name_not_contains,omitempty"`
	NameStartsWith    *string              `protobuf:"bytes,13,opt,name=name_starts_with,json=nameStartsWith" json:"name_starts_with,omitempty"`
	NameNotStartsWith *string              `protobuf:"bytes,14,opt,name=name_not_starts_with,json=nameNotStartsWith" json:"name_not_starts_with,omitempty"`
	NameEndsWith      *string              `protobuf:"bytes,15,opt,name=name_ends_with,json=nameEndsWith" json:"name_ends_with,omitempty"`
	NameNotEndsWith   *string              `protobuf:"bytes,16,opt,name=name_not_ends_with,json=nameNotEndsWith" json:"name_not_ends_with,omitempty"`
	NameIn            []string             `protobuf:"bytes,17,rep,name=name_in,json=nameIn" json:"name_in,omitempty"`
	NameNotIn         []string             `protobuf:"bytes,18,rep,name=name_not_in,json=nameNotIn" json:"name_not_in,omitempty"`
	EndpointsEvery    *EndpointUnionFilter `protobuf:"bytes,19,opt,name=endpoints_every,json=endpointsEvery" json:"endpoints_every,omitempty"`
	EndpointsSome     *EndpointUnionFilter `protobuf:"bytes,20,opt,name=endpoints_some,json=endpointsSome" json:"endpoints_some,omitempty"`
	EndpointsNone     *EndpointUnionFilter `protobuf:"bytes,21,opt,name=endpoints_none,json=endpointsNone" json:"endpoints_none,omitempty"`
	HostIs            *string              `protobuf:"bytes,22,opt,name=host_is,json=hostIs" json:"host_is,omitempty"`
	HostNot           *string              `protobuf:"bytes,23,opt,name=host_not,json=hostNot" json:"host_not,omitempty"`
	HostLt            *string              `protobuf:"bytes,24,opt,name=host_lt,json=hostLt" json:"host_lt,omitempty"`
	HostLte           *string              `protobuf:"bytes,25,opt,name=host_lte,json=hostLte" json:"host_lte,omitempty"`
	HostGt            *string              `protobuf:"bytes,26,opt,name=host_gt,json=hostGt" json:"host_gt,omitempty"`
	HostGte           *string              `protobuf:"bytes,27,opt,name=host_gte,json=hostGte" json:"host_gte,omitempty"`
	HostContains      *string              `protobuf:"bytes,28,opt,name=host_contains,json=hostContains" json:"host_contains,omitempty"`
	HostNotContains   *string              `protobuf:"bytes,29,opt,name=host_not_contains,json=hostNotContains" json:"host_not_contains,omitempty"`
	HostStartsWith    *string              `protobuf:"bytes,30,opt,name=host_starts_with,json=hostStartsWith" json:"host_starts_with,omitempty"`
	HostNotStartsWith *string              `protobuf:"bytes,31,opt,name=host_not_starts_with,json=hostNotStartsWith" json:"host_not_starts_with,omitempty"`
	HostEndsWith      *string              `protobuf:"bytes,32,opt,name=host_ends_with,json=hostEndsWith" json:"host_ends_with,omitempty"`
	HostNotEndsWith   *string              `protobuf:"bytes,33,opt,name=host_not_ends_with,json=hostNotEndsWith" json:"host_not_ends_with,omitempty"`
	HostIn            []string             `protobuf:"bytes,34,rep,name=host_in,json=hostIn" json:"host_in,omitempty"`
	HostNotIn         []string             `protobuf:"bytes,35,rep,name=host_not_in,json=hostNotIn" json:"host_not_in,omitempty"`
	Ports             *ServicePortsFilter  `protobuf:"bytes,36,opt,name=ports" json:"ports,omitempty"`
	And               []*ServiceFilter     `protobuf:"bytes,37,rep,name=and" json:"and,omitempty"`
	Or                []*ServiceFilter     `protobuf:"bytes,38,rep,name=or" json:"or,omitempty"`
	Not               []*ServiceFilter     `protobuf:"bytes,39,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized  []byte               `json:"-"`
}

func (m *ServiceFilter) Reset()                    { *m = ServiceFilter{} }
func (m *ServiceFilter) String() string            { return proto.CompactTextString(m) }
func (*ServiceFilter) ProtoMessage()               {}
func (*ServiceFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ServiceFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ServiceFilter) GetIdsEvery() *IdUnionFilter {
	if m != nil {
		return m.IdsEvery
	}
	return nil
}

func (m *ServiceFilter) GetIdsSome() *IdUnionFilter {
	if m != nil {
		return m.IdsSome
	}
	return nil
}

func (m *ServiceFilter) GetIdsNone() *IdUnionFilter {
	if m != nil {
		return m.IdsNone
	}
	return nil
}

func (m *ServiceFilter) GetNameIs() string {
	if m != nil && m.NameIs != nil {
		return *m.NameIs
	}
	return ""
}

func (m *ServiceFilter) GetNameNot() string {
	if m != nil && m.NameNot != nil {
		return *m.NameNot
	}
	return ""
}

func (m *ServiceFilter) GetNameLt() string {
	if m != nil && m.NameLt != nil {
		return *m.NameLt
	}
	return ""
}

func (m *ServiceFilter) GetNameLte() string {
	if m != nil && m.NameLte != nil {
		return *m.NameLte
	}
	return ""
}

func (m *ServiceFilter) GetNameGt() string {
	if m != nil && m.NameGt != nil {
		return *m.NameGt
	}
	return ""
}

func (m *ServiceFilter) GetNameGte() string {
	if m != nil && m.NameGte != nil {
		return *m.NameGte
	}
	return ""
}

func (m *ServiceFilter) GetNameContains() string {
	if m != nil && m.NameContains != nil {
		return *m.NameContains
	}
	return ""
}

func (m *ServiceFilter) GetNameNotContains() string {
	if m != nil && m.NameNotContains != nil {
		return *m.NameNotContains
	}
	return ""
}

func (m *ServiceFilter) GetNameStartsWith() string {
	if m != nil && m.NameStartsWith != nil {
		return *m.NameStartsWith
	}
	return ""
}

func (m *ServiceFilter) GetNameNotStartsWith() string {
	if m != nil && m.NameNotStartsWith != nil {
		return *m.NameNotStartsWith
	}
	return ""
}

func (m *ServiceFilter) GetNameEndsWith() string {
	if m != nil && m.NameEndsWith != nil {
		return *m.NameEndsWith
	}
	return ""
}

func (m *ServiceFilter) GetNameNotEndsWith() string {
	if m != nil && m.NameNotEndsWith != nil {
		return *m.NameNotEndsWith
	}
	return ""
}

func (m *ServiceFilter) GetNameIn() []string {
	if m != nil {
		return m.NameIn
	}
	return nil
}

func (m *ServiceFilter) GetNameNotIn() []string {
	if m != nil {
		return m.NameNotIn
	}
	return nil
}

func (m *ServiceFilter) GetEndpointsEvery() *EndpointUnionFilter {
	if m != nil {
		return m.EndpointsEvery
	}
	return nil
}

func (m *ServiceFilter) GetEndpointsSome() *EndpointUnionFilter {
	if m != nil {
		return m.EndpointsSome
	}
	return nil
}

func (m *ServiceFilter) GetEndpointsNone() *EndpointUnionFilter {
	if m != nil {
		return m.EndpointsNone
	}
	return nil
}

func (m *ServiceFilter) GetHostIs() string {
	if m != nil && m.HostIs != nil {
		return *m.HostIs
	}
	return ""
}

func (m *ServiceFilter) GetHostNot() string {
	if m != nil && m.HostNot != nil {
		return *m.HostNot
	}
	return ""
}

func (m *ServiceFilter) GetHostLt() string {
	if m != nil && m.HostLt != nil {
		return *m.HostLt
	}
	return ""
}

func (m *ServiceFilter) GetHostLte() string {
	if m != nil && m.HostLte != nil {
		return *m.HostLte
	}
	return ""
}

func (m *ServiceFilter) GetHostGt() string {
	if m != nil && m.HostGt != nil {
		return *m.HostGt
	}
	return ""
}

func (m *ServiceFilter) GetHostGte() string {
	if m != nil && m.HostGte != nil {
		return *m.HostGte
	}
	return ""
}

func (m *ServiceFilter) GetHostContains() string {
	if m != nil && m.HostContains != nil {
		return *m.HostContains
	}
	return ""
}

func (m *ServiceFilter) GetHostNotContains() string {
	if m != nil && m.HostNotContains != nil {
		return *m.HostNotContains
	}
	return ""
}

func (m *ServiceFilter) GetHostStartsWith() string {
	if m != nil && m.HostStartsWith != nil {
		return *m.HostStartsWith
	}
	return ""
}

func (m *ServiceFilter) GetHostNotStartsWith() string {
	if m != nil && m.HostNotStartsWith != nil {
		return *m.HostNotStartsWith
	}
	return ""
}

func (m *ServiceFilter) GetHostEndsWith() string {
	if m != nil && m.HostEndsWith != nil {
		return *m.HostEndsWith
	}
	return ""
}

func (m *ServiceFilter) GetHostNotEndsWith() string {
	if m != nil && m.HostNotEndsWith != nil {
		return *m.HostNotEndsWith
	}
	return ""
}

func (m *ServiceFilter) GetHostIn() []string {
	if m != nil {
		return m.HostIn
	}
	return nil
}

func (m *ServiceFilter) GetHostNotIn() []string {
	if m != nil {
		return m.HostNotIn
	}
	return nil
}

func (m *ServiceFilter) GetPorts() *ServicePortsFilter {
	if m != nil {
		return m.Ports
	}
	return nil
}

func (m *ServiceFilter) GetAnd() []*ServiceFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *ServiceFilter) GetOr() []*ServiceFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *ServiceFilter) GetNot() []*ServiceFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type ServicePortsFilter struct {
	Hash             *string               `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	IdsEvery         *IdUnionFilter        `protobuf:"bytes,2,opt,name=ids_every,json=idsEvery" json:"ids_every,omitempty"`
	IdsSome          *IdUnionFilter        `protobuf:"bytes,3,opt,name=ids_some,json=idsSome" json:"ids_some,omitempty"`
	IdsNone          *IdUnionFilter        `protobuf:"bytes,4,opt,name=ids_none,json=idsNone" json:"ids_none,omitempty"`
	GrpcIs           *int32                `protobuf:"varint,5,opt,name=grpc_is,json=grpcIs" json:"grpc_is,omitempty"`
	GrpcNot          *int32                `protobuf:"varint,6,opt,name=grpc_not,json=grpcNot" json:"grpc_not,omitempty"`
	GrpcLt           *int32                `protobuf:"varint,7,opt,name=grpc_lt,json=grpcLt" json:"grpc_lt,omitempty"`
	GrpcLte          *int32                `protobuf:"varint,8,opt,name=grpc_lte,json=grpcLte" json:"grpc_lte,omitempty"`
	GrpcGt           *int32                `protobuf:"varint,9,opt,name=grpc_gt,json=grpcGt" json:"grpc_gt,omitempty"`
	GrpcGte          *int32                `protobuf:"varint,10,opt,name=grpc_gte,json=grpcGte" json:"grpc_gte,omitempty"`
	GrpcIn           []int32               `protobuf:"varint,11,rep,name=grpc_in,json=grpcIn" json:"grpc_in,omitempty"`
	GrpcNotIn        []int32               `protobuf:"varint,12,rep,name=grpc_not_in,json=grpcNotIn" json:"grpc_not_in,omitempty"`
	GraphqlIs        *int32                `protobuf:"varint,13,opt,name=graphql_is,json=graphqlIs" json:"graphql_is,omitempty"`
	GraphqlNot       *int32                `protobuf:"varint,14,opt,name=graphql_not,json=graphqlNot" json:"graphql_not,omitempty"`
	GraphqlLt        *int32                `protobuf:"varint,15,opt,name=graphql_lt,json=graphqlLt" json:"graphql_lt,omitempty"`
	GraphqlLte       *int32                `protobuf:"varint,16,opt,name=graphql_lte,json=graphqlLte" json:"graphql_lte,omitempty"`
	GraphqlGt        *int32                `protobuf:"varint,17,opt,name=graphql_gt,json=graphqlGt" json:"graphql_gt,omitempty"`
	GraphqlGte       *int32                `protobuf:"varint,18,opt,name=graphql_gte,json=graphqlGte" json:"graphql_gte,omitempty"`
	GraphqlIn        []int32               `protobuf:"varint,19,rep,name=graphql_in,json=graphqlIn" json:"graphql_in,omitempty"`
	GraphqlNotIn     []int32               `protobuf:"varint,20,rep,name=graphql_not_in,json=graphqlNotIn" json:"graphql_not_in,omitempty"`
	And              []*ServicePortsFilter `protobuf:"bytes,21,rep,name=and" json:"and,omitempty"`
	Or               []*ServicePortsFilter `protobuf:"bytes,22,rep,name=or" json:"or,omitempty"`
	Not              []*ServicePortsFilter `protobuf:"bytes,23,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *ServicePortsFilter) Reset()                    { *m = ServicePortsFilter{} }
func (m *ServicePortsFilter) String() string            { return proto.CompactTextString(m) }
func (*ServicePortsFilter) ProtoMessage()               {}
func (*ServicePortsFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ServicePortsFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ServicePortsFilter) GetIdsEvery() *IdUnionFilter {
	if m != nil {
		return m.IdsEvery
	}
	return nil
}

func (m *ServicePortsFilter) GetIdsSome() *IdUnionFilter {
	if m != nil {
		return m.IdsSome
	}
	return nil
}

func (m *ServicePortsFilter) GetIdsNone() *IdUnionFilter {
	if m != nil {
		return m.IdsNone
	}
	return nil
}

func (m *ServicePortsFilter) GetGrpcIs() int32 {
	if m != nil && m.GrpcIs != nil {
		return *m.GrpcIs
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcNot() int32 {
	if m != nil && m.GrpcNot != nil {
		return *m.GrpcNot
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcLt() int32 {
	if m != nil && m.GrpcLt != nil {
		return *m.GrpcLt
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcLte() int32 {
	if m != nil && m.GrpcLte != nil {
		return *m.GrpcLte
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcGt() int32 {
	if m != nil && m.GrpcGt != nil {
		return *m.GrpcGt
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcGte() int32 {
	if m != nil && m.GrpcGte != nil {
		return *m.GrpcGte
	}
	return 0
}

func (m *ServicePortsFilter) GetGrpcIn() []int32 {
	if m != nil {
		return m.GrpcIn
	}
	return nil
}

func (m *ServicePortsFilter) GetGrpcNotIn() []int32 {
	if m != nil {
		return m.GrpcNotIn
	}
	return nil
}

func (m *ServicePortsFilter) GetGraphqlIs() int32 {
	if m != nil && m.GraphqlIs != nil {
		return *m.GraphqlIs
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlNot() int32 {
	if m != nil && m.GraphqlNot != nil {
		return *m.GraphqlNot
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlLt() int32 {
	if m != nil && m.GraphqlLt != nil {
		return *m.GraphqlLt
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlLte() int32 {
	if m != nil && m.GraphqlLte != nil {
		return *m.GraphqlLte
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlGt() int32 {
	if m != nil && m.GraphqlGt != nil {
		return *m.GraphqlGt
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlGte() int32 {
	if m != nil && m.GraphqlGte != nil {
		return *m.GraphqlGte
	}
	return 0
}

func (m *ServicePortsFilter) GetGraphqlIn() []int32 {
	if m != nil {
		return m.GraphqlIn
	}
	return nil
}

func (m *ServicePortsFilter) GetGraphqlNotIn() []int32 {
	if m != nil {
		return m.GraphqlNotIn
	}
	return nil
}

func (m *ServicePortsFilter) GetAnd() []*ServicePortsFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *ServicePortsFilter) GetOr() []*ServicePortsFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *ServicePortsFilter) GetNot() []*ServicePortsFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type LocationFilter struct {
	Hash                              *string            `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	IdsEvery                          *IdUnionFilter     `protobuf:"bytes,2,opt,name=ids_every,json=idsEvery" json:"ids_every,omitempty"`
	IdsSome                           *IdUnionFilter     `protobuf:"bytes,3,opt,name=ids_some,json=idsSome" json:"ids_some,omitempty"`
	IdsNone                           *IdUnionFilter     `protobuf:"bytes,4,opt,name=ids_none,json=idsNone" json:"ids_none,omitempty"`
	Radius                            *LengthValueFilter `protobuf:"bytes,5,opt,name=radius" json:"radius,omitempty"`
	StreetIs                          *string            `protobuf:"bytes,6,opt,name=street_is,json=streetIs" json:"street_is,omitempty"`
	StreetNot                         *string            `protobuf:"bytes,7,opt,name=street_not,json=streetNot" json:"street_not,omitempty"`
	StreetLt                          *string            `protobuf:"bytes,8,opt,name=street_lt,json=streetLt" json:"street_lt,omitempty"`
	StreetLte                         *string            `protobuf:"bytes,9,opt,name=street_lte,json=streetLte" json:"street_lte,omitempty"`
	StreetGt                          *string            `protobuf:"bytes,10,opt,name=street_gt,json=streetGt" json:"street_gt,omitempty"`
	StreetGte                         *string            `protobuf:"bytes,11,opt,name=street_gte,json=streetGte" json:"street_gte,omitempty"`
	StreetContains                    *string            `protobuf:"bytes,12,opt,name=street_contains,json=streetContains" json:"street_contains,omitempty"`
	StreetNotContains                 *string            `protobuf:"bytes,13,opt,name=street_not_contains,json=streetNotContains" json:"street_not_contains,omitempty"`
	StreetStartsWith                  *string            `protobuf:"bytes,14,opt,name=street_starts_with,json=streetStartsWith" json:"street_starts_with,omitempty"`
	StreetNotStartsWith               *string            `protobuf:"bytes,15,opt,name=street_not_starts_with,json=streetNotStartsWith" json:"street_not_starts_with,omitempty"`
	StreetEndsWith                    *string            `protobuf:"bytes,16,opt,name=street_ends_with,json=streetEndsWith" json:"street_ends_with,omitempty"`
	StreetNotEndsWith                 *string            `protobuf:"bytes,17,opt,name=street_not_ends_with,json=streetNotEndsWith" json:"street_not_ends_with,omitempty"`
	StreetIn                          []string           `protobuf:"bytes,18,rep,name=street_in,json=streetIn" json:"street_in,omitempty"`
	StreetNotIn                       []string           `protobuf:"bytes,19,rep,name=street_not_in,json=streetNotIn" json:"street_not_in,omitempty"`
	ZipCodeIs                         *string            `protobuf:"bytes,20,opt,name=zipCode_is,json=zipCodeIs" json:"zipCode_is,omitempty"`
	ZipCodeNot                        *string            `protobuf:"bytes,21,opt,name=zipCode_not,json=zipCodeNot" json:"zipCode_not,omitempty"`
	ZipCodeLt                         *string            `protobuf:"bytes,22,opt,name=zipCode_lt,json=zipCodeLt" json:"zipCode_lt,omitempty"`
	ZipCodeLte                        *string            `protobuf:"bytes,23,opt,name=zipCode_lte,json=zipCodeLte" json:"zipCode_lte,omitempty"`
	ZipCodeGt                         *string            `protobuf:"bytes,24,opt,name=zipCode_gt,json=zipCodeGt" json:"zipCode_gt,omitempty"`
	ZipCodeGte                        *string            `protobuf:"bytes,25,opt,name=zipCode_gte,json=zipCodeGte" json:"zipCode_gte,omitempty"`
	ZipCodeContains                   *string            `protobuf:"bytes,26,opt,name=zipCode_contains,json=zipCodeContains" json:"zipCode_contains,omitempty"`
	ZipCodeNotContains                *string            `protobuf:"bytes,27,opt,name=zipCode_not_contains,json=zipCodeNotContains" json:"zipCode_not_contains,omitempty"`
	ZipCodeStartsWith                 *string            `protobuf:"bytes,28,opt,name=zipCode_starts_with,json=zipCodeStartsWith" json:"zipCode_starts_with,omitempty"`
	ZipCodeNotStartsWith              *string            `protobuf:"bytes,29,opt,name=zipCode_not_starts_with,json=zipCodeNotStartsWith" json:"zipCode_not_starts_with,omitempty"`
	ZipCodeEndsWith                   *string            `protobuf:"bytes,30,opt,name=zipCode_ends_with,json=zipCodeEndsWith" json:"zipCode_ends_with,omitempty"`
	ZipCodeNotEndsWith                *string            `protobuf:"bytes,31,opt,name=zipCode_not_ends_with,json=zipCodeNotEndsWith" json:"zipCode_not_ends_with,omitempty"`
	ZipCodeIn                         []string           `protobuf:"bytes,32,rep,name=zipCode_in,json=zipCodeIn" json:"zipCode_in,omitempty"`
	ZipCodeNotIn                      []string           `protobuf:"bytes,33,rep,name=zipCode_not_in,json=zipCodeNotIn" json:"zipCode_not_in,omitempty"`
	CityIs                            *string            `protobuf:"bytes,34,opt,name=city_is,json=cityIs" json:"city_is,omitempty"`
	CityNot                           *string            `protobuf:"bytes,35,opt,name=city_not,json=cityNot" json:"city_not,omitempty"`
	CityLt                            *string            `protobuf:"bytes,36,opt,name=city_lt,json=cityLt" json:"city_lt,omitempty"`
	CityLte                           *string            `protobuf:"bytes,37,opt,name=city_lte,json=cityLte" json:"city_lte,omitempty"`
	CityGt                            *string            `protobuf:"bytes,38,opt,name=city_gt,json=cityGt" json:"city_gt,omitempty"`
	CityGte                           *string            `protobuf:"bytes,39,opt,name=city_gte,json=cityGte" json:"city_gte,omitempty"`
	CityContains                      *string            `protobuf:"bytes,40,opt,name=city_contains,json=cityContains" json:"city_contains,omitempty"`
	CityNotContains                   *string            `protobuf:"bytes,41,opt,name=city_not_contains,json=cityNotContains" json:"city_not_contains,omitempty"`
	CityStartsWith                    *string            `protobuf:"bytes,42,opt,name=city_starts_with,json=cityStartsWith" json:"city_starts_with,omitempty"`
	CityNotStartsWith                 *string            `protobuf:"bytes,43,opt,name=city_not_starts_with,json=cityNotStartsWith" json:"city_not_starts_with,omitempty"`
	CityEndsWith                      *string            `protobuf:"bytes,44,opt,name=city_ends_with,json=cityEndsWith" json:"city_ends_with,omitempty"`
	CityNotEndsWith                   *string            `protobuf:"bytes,45,opt,name=city_not_ends_with,json=cityNotEndsWith" json:"city_not_ends_with,omitempty"`
	CityIn                            []string           `protobuf:"bytes,46,rep,name=city_in,json=cityIn" json:"city_in,omitempty"`
	CityNotIn                         []string           `protobuf:"bytes,47,rep,name=city_not_in,json=cityNotIn" json:"city_not_in,omitempty"`
	CityDistrictIs                    *string            `protobuf:"bytes,48,opt,name=cityDistrict_is,json=cityDistrictIs" json:"cityDistrict_is,omitempty"`
	CityDistrictNot                   *string            `protobuf:"bytes,49,opt,name=cityDistrict_not,json=cityDistrictNot" json:"cityDistrict_not,omitempty"`
	CityDistrictLt                    *string            `protobuf:"bytes,50,opt,name=cityDistrict_lt,json=cityDistrictLt" json:"cityDistrict_lt,omitempty"`
	CityDistrictLte                   *string            `protobuf:"bytes,51,opt,name=cityDistrict_lte,json=cityDistrictLte" json:"cityDistrict_lte,omitempty"`
	CityDistrictGt                    *string            `protobuf:"bytes,52,opt,name=cityDistrict_gt,json=cityDistrictGt" json:"cityDistrict_gt,omitempty"`
	CityDistrictGte                   *string            `protobuf:"bytes,53,opt,name=cityDistrict_gte,json=cityDistrictGte" json:"cityDistrict_gte,omitempty"`
	CityDistrictContains              *string            `protobuf:"bytes,54,opt,name=cityDistrict_contains,json=cityDistrictContains" json:"cityDistrict_contains,omitempty"`
	CityDistrictNotContains           *string            `protobuf:"bytes,55,opt,name=cityDistrict_not_contains,json=cityDistrictNotContains" json:"cityDistrict_not_contains,omitempty"`
	CityDistrictStartsWith            *string            `protobuf:"bytes,56,opt,name=cityDistrict_starts_with,json=cityDistrictStartsWith" json:"cityDistrict_starts_with,omitempty"`
	CityDistrictNotStartsWith         *string            `protobuf:"bytes,57,opt,name=cityDistrict_not_starts_with,json=cityDistrictNotStartsWith" json:"cityDistrict_not_starts_with,omitempty"`
	CityDistrictEndsWith              *string            `protobuf:"bytes,58,opt,name=cityDistrict_ends_with,json=cityDistrictEndsWith" json:"cityDistrict_ends_with,omitempty"`
	CityDistrictNotEndsWith           *string            `protobuf:"bytes,59,opt,name=cityDistrict_not_ends_with,json=cityDistrictNotEndsWith" json:"cityDistrict_not_ends_with,omitempty"`
	CityDistrictIn                    []string           `protobuf:"bytes,60,rep,name=cityDistrict_in,json=cityDistrictIn" json:"cityDistrict_in,omitempty"`
	CityDistrictNotIn                 []string           `protobuf:"bytes,61,rep,name=cityDistrict_not_in,json=cityDistrictNotIn" json:"cityDistrict_not_in,omitempty"`
	CountryIs                         *string            `protobuf:"bytes,62,opt,name=country_is,json=countryIs" json:"country_is,omitempty"`
	CountryNot                        *string            `protobuf:"bytes,63,opt,name=country_not,json=countryNot" json:"country_not,omitempty"`
	CountryLt                         *string            `protobuf:"bytes,64,opt,name=country_lt,json=countryLt" json:"country_lt,omitempty"`
	CountryLte                        *string            `protobuf:"bytes,65,opt,name=country_lte,json=countryLte" json:"country_lte,omitempty"`
	CountryGt                         *string            `protobuf:"bytes,66,opt,name=country_gt,json=countryGt" json:"country_gt,omitempty"`
	CountryGte                        *string            `protobuf:"bytes,67,opt,name=country_gte,json=countryGte" json:"country_gte,omitempty"`
	CountryContains                   *string            `protobuf:"bytes,68,opt,name=country_contains,json=countryContains" json:"country_contains,omitempty"`
	CountryNotContains                *string            `protobuf:"bytes,69,opt,name=country_not_contains,json=countryNotContains" json:"country_not_contains,omitempty"`
	CountryStartsWith                 *string            `protobuf:"bytes,70,opt,name=country_starts_with,json=countryStartsWith" json:"country_starts_with,omitempty"`
	CountryNotStartsWith              *string            `protobuf:"bytes,71,opt,name=country_not_starts_with,json=countryNotStartsWith" json:"country_not_starts_with,omitempty"`
	CountryEndsWith                   *string            `protobuf:"bytes,72,opt,name=country_ends_with,json=countryEndsWith" json:"country_ends_with,omitempty"`
	CountryNotEndsWith                *string            `protobuf:"bytes,73,opt,name=country_not_ends_with,json=countryNotEndsWith" json:"country_not_ends_with,omitempty"`
	CountryIn                         []string           `protobuf:"bytes,74,rep,name=country_in,json=countryIn" json:"country_in,omitempty"`
	CountryNotIn                      []string           `protobuf:"bytes,75,rep,name=country_not_in,json=countryNotIn" json:"country_not_in,omitempty"`
	CountryStateIs                    *string            `protobuf:"bytes,76,opt,name=countryState_is,json=countryStateIs" json:"countryState_is,omitempty"`
	CountryStateNot                   *string            `protobuf:"bytes,77,opt,name=countryState_not,json=countryStateNot" json:"countryState_not,omitempty"`
	CountryStateLt                    *string            `protobuf:"bytes,78,opt,name=countryState_lt,json=countryStateLt" json:"countryState_lt,omitempty"`
	CountryStateLte                   *string            `protobuf:"bytes,79,opt,name=countryState_lte,json=countryStateLte" json:"countryState_lte,omitempty"`
	CountryStateGt                    *string            `protobuf:"bytes,80,opt,name=countryState_gt,json=countryStateGt" json:"countryState_gt,omitempty"`
	CountryStateGte                   *string            `protobuf:"bytes,81,opt,name=countryState_gte,json=countryStateGte" json:"countryState_gte,omitempty"`
	CountryStateContains              *string            `protobuf:"bytes,82,opt,name=countryState_contains,json=countryStateContains" json:"countryState_contains,omitempty"`
	CountryStateNotContains           *string            `protobuf:"bytes,83,opt,name=countryState_not_contains,json=countryStateNotContains" json:"countryState_not_contains,omitempty"`
	CountryStateStartsWith            *string            `protobuf:"bytes,84,opt,name=countryState_starts_with,json=countryStateStartsWith" json:"countryState_starts_with,omitempty"`
	CountryStateNotStartsWith         *string            `protobuf:"bytes,85,opt,name=countryState_not_starts_with,json=countryStateNotStartsWith" json:"countryState_not_starts_with,omitempty"`
	CountryStateEndsWith              *string            `protobuf:"bytes,86,opt,name=countryState_ends_with,json=countryStateEndsWith" json:"countryState_ends_with,omitempty"`
	CountryStateNotEndsWith           *string            `protobuf:"bytes,87,opt,name=countryState_not_ends_with,json=countryStateNotEndsWith" json:"countryState_not_ends_with,omitempty"`
	CountryStateIn                    []string           `protobuf:"bytes,88,rep,name=countryState_in,json=countryStateIn" json:"countryState_in,omitempty"`
	CountryStateNotIn                 []string           `protobuf:"bytes,89,rep,name=countryState_not_in,json=countryStateNotIn" json:"countryState_not_in,omitempty"`
	CountryStateDistrictIs            *string            `protobuf:"bytes,90,opt,name=countryStateDistrict_is,json=countryStateDistrictIs" json:"countryStateDistrict_is,omitempty"`
	CountryStateDistrictNot           *string            `protobuf:"bytes,91,opt,name=countryStateDistrict_not,json=countryStateDistrictNot" json:"countryStateDistrict_not,omitempty"`
	CountryStateDistrictLt            *string            `protobuf:"bytes,92,opt,name=countryStateDistrict_lt,json=countryStateDistrictLt" json:"countryStateDistrict_lt,omitempty"`
	CountryStateDistrictLte           *string            `protobuf:"bytes,93,opt,name=countryStateDistrict_lte,json=countryStateDistrictLte" json:"countryStateDistrict_lte,omitempty"`
	CountryStateDistrictGt            *string            `protobuf:"bytes,94,opt,name=countryStateDistrict_gt,json=countryStateDistrictGt" json:"countryStateDistrict_gt,omitempty"`
	CountryStateDistrictGte           *string            `protobuf:"bytes,95,opt,name=countryStateDistrict_gte,json=countryStateDistrictGte" json:"countryStateDistrict_gte,omitempty"`
	CountryStateDistrictContains      *string            `protobuf:"bytes,96,opt,name=countryStateDistrict_contains,json=countryStateDistrictContains" json:"countryStateDistrict_contains,omitempty"`
	CountryStateDistrictNotContains   *string            `protobuf:"bytes,97,opt,name=countryStateDistrict_not_contains,json=countryStateDistrictNotContains" json:"countryStateDistrict_not_contains,omitempty"`
	CountryStateDistrictStartsWith    *string            `protobuf:"bytes,98,opt,name=countryStateDistrict_starts_with,json=countryStateDistrictStartsWith" json:"countryStateDistrict_starts_with,omitempty"`
	CountryStateDistrictNotStartsWith *string            `protobuf:"bytes,99,opt,name=countryStateDistrict_not_starts_with,json=countryStateDistrictNotStartsWith" json:"countryStateDistrict_not_starts_with,omitempty"`
	CountryStateDistrictEndsWith      *string            `protobuf:"bytes,100,opt,name=countryStateDistrict_ends_with,json=countryStateDistrictEndsWith" json:"countryStateDistrict_ends_with,omitempty"`
	CountryStateDistrictNotEndsWith   *string            `protobuf:"bytes,101,opt,name=countryStateDistrict_not_ends_with,json=countryStateDistrictNotEndsWith" json:"countryStateDistrict_not_ends_with,omitempty"`
	CountryStateDistrictIn            []string           `protobuf:"bytes,102,rep,name=countryStateDistrict_in,json=countryStateDistrictIn" json:"countryStateDistrict_in,omitempty"`
	CountryStateDistrictNotIn         []string           `protobuf:"bytes,103,rep,name=countryStateDistrict_not_in,json=countryStateDistrictNotIn" json:"countryStateDistrict_not_in,omitempty"`
	And                               []*LocationFilter  `protobuf:"bytes,104,rep,name=and" json:"and,omitempty"`
	Or                                []*LocationFilter  `protobuf:"bytes,105,rep,name=or" json:"or,omitempty"`
	Not                               []*LocationFilter  `protobuf:"bytes,106,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized                  []byte             `json:"-"`
}

func (m *LocationFilter) Reset()                    { *m = LocationFilter{} }
func (m *LocationFilter) String() string            { return proto.CompactTextString(m) }
func (*LocationFilter) ProtoMessage()               {}
func (*LocationFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *LocationFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *LocationFilter) GetIdsEvery() *IdUnionFilter {
	if m != nil {
		return m.IdsEvery
	}
	return nil
}

func (m *LocationFilter) GetIdsSome() *IdUnionFilter {
	if m != nil {
		return m.IdsSome
	}
	return nil
}

func (m *LocationFilter) GetIdsNone() *IdUnionFilter {
	if m != nil {
		return m.IdsNone
	}
	return nil
}

func (m *LocationFilter) GetRadius() *LengthValueFilter {
	if m != nil {
		return m.Radius
	}
	return nil
}

func (m *LocationFilter) GetStreetIs() string {
	if m != nil && m.StreetIs != nil {
		return *m.StreetIs
	}
	return ""
}

func (m *LocationFilter) GetStreetNot() string {
	if m != nil && m.StreetNot != nil {
		return *m.StreetNot
	}
	return ""
}

func (m *LocationFilter) GetStreetLt() string {
	if m != nil && m.StreetLt != nil {
		return *m.StreetLt
	}
	return ""
}

func (m *LocationFilter) GetStreetLte() string {
	if m != nil && m.StreetLte != nil {
		return *m.StreetLte
	}
	return ""
}

func (m *LocationFilter) GetStreetGt() string {
	if m != nil && m.StreetGt != nil {
		return *m.StreetGt
	}
	return ""
}

func (m *LocationFilter) GetStreetGte() string {
	if m != nil && m.StreetGte != nil {
		return *m.StreetGte
	}
	return ""
}

func (m *LocationFilter) GetStreetContains() string {
	if m != nil && m.StreetContains != nil {
		return *m.StreetContains
	}
	return ""
}

func (m *LocationFilter) GetStreetNotContains() string {
	if m != nil && m.StreetNotContains != nil {
		return *m.StreetNotContains
	}
	return ""
}

func (m *LocationFilter) GetStreetStartsWith() string {
	if m != nil && m.StreetStartsWith != nil {
		return *m.StreetStartsWith
	}
	return ""
}

func (m *LocationFilter) GetStreetNotStartsWith() string {
	if m != nil && m.StreetNotStartsWith != nil {
		return *m.StreetNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetStreetEndsWith() string {
	if m != nil && m.StreetEndsWith != nil {
		return *m.StreetEndsWith
	}
	return ""
}

func (m *LocationFilter) GetStreetNotEndsWith() string {
	if m != nil && m.StreetNotEndsWith != nil {
		return *m.StreetNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetStreetIn() []string {
	if m != nil {
		return m.StreetIn
	}
	return nil
}

func (m *LocationFilter) GetStreetNotIn() []string {
	if m != nil {
		return m.StreetNotIn
	}
	return nil
}

func (m *LocationFilter) GetZipCodeIs() string {
	if m != nil && m.ZipCodeIs != nil {
		return *m.ZipCodeIs
	}
	return ""
}

func (m *LocationFilter) GetZipCodeNot() string {
	if m != nil && m.ZipCodeNot != nil {
		return *m.ZipCodeNot
	}
	return ""
}

func (m *LocationFilter) GetZipCodeLt() string {
	if m != nil && m.ZipCodeLt != nil {
		return *m.ZipCodeLt
	}
	return ""
}

func (m *LocationFilter) GetZipCodeLte() string {
	if m != nil && m.ZipCodeLte != nil {
		return *m.ZipCodeLte
	}
	return ""
}

func (m *LocationFilter) GetZipCodeGt() string {
	if m != nil && m.ZipCodeGt != nil {
		return *m.ZipCodeGt
	}
	return ""
}

func (m *LocationFilter) GetZipCodeGte() string {
	if m != nil && m.ZipCodeGte != nil {
		return *m.ZipCodeGte
	}
	return ""
}

func (m *LocationFilter) GetZipCodeContains() string {
	if m != nil && m.ZipCodeContains != nil {
		return *m.ZipCodeContains
	}
	return ""
}

func (m *LocationFilter) GetZipCodeNotContains() string {
	if m != nil && m.ZipCodeNotContains != nil {
		return *m.ZipCodeNotContains
	}
	return ""
}

func (m *LocationFilter) GetZipCodeStartsWith() string {
	if m != nil && m.ZipCodeStartsWith != nil {
		return *m.ZipCodeStartsWith
	}
	return ""
}

func (m *LocationFilter) GetZipCodeNotStartsWith() string {
	if m != nil && m.ZipCodeNotStartsWith != nil {
		return *m.ZipCodeNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetZipCodeEndsWith() string {
	if m != nil && m.ZipCodeEndsWith != nil {
		return *m.ZipCodeEndsWith
	}
	return ""
}

func (m *LocationFilter) GetZipCodeNotEndsWith() string {
	if m != nil && m.ZipCodeNotEndsWith != nil {
		return *m.ZipCodeNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetZipCodeIn() []string {
	if m != nil {
		return m.ZipCodeIn
	}
	return nil
}

func (m *LocationFilter) GetZipCodeNotIn() []string {
	if m != nil {
		return m.ZipCodeNotIn
	}
	return nil
}

func (m *LocationFilter) GetCityIs() string {
	if m != nil && m.CityIs != nil {
		return *m.CityIs
	}
	return ""
}

func (m *LocationFilter) GetCityNot() string {
	if m != nil && m.CityNot != nil {
		return *m.CityNot
	}
	return ""
}

func (m *LocationFilter) GetCityLt() string {
	if m != nil && m.CityLt != nil {
		return *m.CityLt
	}
	return ""
}

func (m *LocationFilter) GetCityLte() string {
	if m != nil && m.CityLte != nil {
		return *m.CityLte
	}
	return ""
}

func (m *LocationFilter) GetCityGt() string {
	if m != nil && m.CityGt != nil {
		return *m.CityGt
	}
	return ""
}

func (m *LocationFilter) GetCityGte() string {
	if m != nil && m.CityGte != nil {
		return *m.CityGte
	}
	return ""
}

func (m *LocationFilter) GetCityContains() string {
	if m != nil && m.CityContains != nil {
		return *m.CityContains
	}
	return ""
}

func (m *LocationFilter) GetCityNotContains() string {
	if m != nil && m.CityNotContains != nil {
		return *m.CityNotContains
	}
	return ""
}

func (m *LocationFilter) GetCityStartsWith() string {
	if m != nil && m.CityStartsWith != nil {
		return *m.CityStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCityNotStartsWith() string {
	if m != nil && m.CityNotStartsWith != nil {
		return *m.CityNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCityEndsWith() string {
	if m != nil && m.CityEndsWith != nil {
		return *m.CityEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCityNotEndsWith() string {
	if m != nil && m.CityNotEndsWith != nil {
		return *m.CityNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCityIn() []string {
	if m != nil {
		return m.CityIn
	}
	return nil
}

func (m *LocationFilter) GetCityNotIn() []string {
	if m != nil {
		return m.CityNotIn
	}
	return nil
}

func (m *LocationFilter) GetCityDistrictIs() string {
	if m != nil && m.CityDistrictIs != nil {
		return *m.CityDistrictIs
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictNot() string {
	if m != nil && m.CityDistrictNot != nil {
		return *m.CityDistrictNot
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictLt() string {
	if m != nil && m.CityDistrictLt != nil {
		return *m.CityDistrictLt
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictLte() string {
	if m != nil && m.CityDistrictLte != nil {
		return *m.CityDistrictLte
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictGt() string {
	if m != nil && m.CityDistrictGt != nil {
		return *m.CityDistrictGt
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictGte() string {
	if m != nil && m.CityDistrictGte != nil {
		return *m.CityDistrictGte
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictContains() string {
	if m != nil && m.CityDistrictContains != nil {
		return *m.CityDistrictContains
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictNotContains() string {
	if m != nil && m.CityDistrictNotContains != nil {
		return *m.CityDistrictNotContains
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictStartsWith() string {
	if m != nil && m.CityDistrictStartsWith != nil {
		return *m.CityDistrictStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictNotStartsWith() string {
	if m != nil && m.CityDistrictNotStartsWith != nil {
		return *m.CityDistrictNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictEndsWith() string {
	if m != nil && m.CityDistrictEndsWith != nil {
		return *m.CityDistrictEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictNotEndsWith() string {
	if m != nil && m.CityDistrictNotEndsWith != nil {
		return *m.CityDistrictNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCityDistrictIn() []string {
	if m != nil {
		return m.CityDistrictIn
	}
	return nil
}

func (m *LocationFilter) GetCityDistrictNotIn() []string {
	if m != nil {
		return m.CityDistrictNotIn
	}
	return nil
}

func (m *LocationFilter) GetCountryIs() string {
	if m != nil && m.CountryIs != nil {
		return *m.CountryIs
	}
	return ""
}

func (m *LocationFilter) GetCountryNot() string {
	if m != nil && m.CountryNot != nil {
		return *m.CountryNot
	}
	return ""
}

func (m *LocationFilter) GetCountryLt() string {
	if m != nil && m.CountryLt != nil {
		return *m.CountryLt
	}
	return ""
}

func (m *LocationFilter) GetCountryLte() string {
	if m != nil && m.CountryLte != nil {
		return *m.CountryLte
	}
	return ""
}

func (m *LocationFilter) GetCountryGt() string {
	if m != nil && m.CountryGt != nil {
		return *m.CountryGt
	}
	return ""
}

func (m *LocationFilter) GetCountryGte() string {
	if m != nil && m.CountryGte != nil {
		return *m.CountryGte
	}
	return ""
}

func (m *LocationFilter) GetCountryContains() string {
	if m != nil && m.CountryContains != nil {
		return *m.CountryContains
	}
	return ""
}

func (m *LocationFilter) GetCountryNotContains() string {
	if m != nil && m.CountryNotContains != nil {
		return *m.CountryNotContains
	}
	return ""
}

func (m *LocationFilter) GetCountryStartsWith() string {
	if m != nil && m.CountryStartsWith != nil {
		return *m.CountryStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryNotStartsWith() string {
	if m != nil && m.CountryNotStartsWith != nil {
		return *m.CountryNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryEndsWith() string {
	if m != nil && m.CountryEndsWith != nil {
		return *m.CountryEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryNotEndsWith() string {
	if m != nil && m.CountryNotEndsWith != nil {
		return *m.CountryNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryIn() []string {
	if m != nil {
		return m.CountryIn
	}
	return nil
}

func (m *LocationFilter) GetCountryNotIn() []string {
	if m != nil {
		return m.CountryNotIn
	}
	return nil
}

func (m *LocationFilter) GetCountryStateIs() string {
	if m != nil && m.CountryStateIs != nil {
		return *m.CountryStateIs
	}
	return ""
}

func (m *LocationFilter) GetCountryStateNot() string {
	if m != nil && m.CountryStateNot != nil {
		return *m.CountryStateNot
	}
	return ""
}

func (m *LocationFilter) GetCountryStateLt() string {
	if m != nil && m.CountryStateLt != nil {
		return *m.CountryStateLt
	}
	return ""
}

func (m *LocationFilter) GetCountryStateLte() string {
	if m != nil && m.CountryStateLte != nil {
		return *m.CountryStateLte
	}
	return ""
}

func (m *LocationFilter) GetCountryStateGt() string {
	if m != nil && m.CountryStateGt != nil {
		return *m.CountryStateGt
	}
	return ""
}

func (m *LocationFilter) GetCountryStateGte() string {
	if m != nil && m.CountryStateGte != nil {
		return *m.CountryStateGte
	}
	return ""
}

func (m *LocationFilter) GetCountryStateContains() string {
	if m != nil && m.CountryStateContains != nil {
		return *m.CountryStateContains
	}
	return ""
}

func (m *LocationFilter) GetCountryStateNotContains() string {
	if m != nil && m.CountryStateNotContains != nil {
		return *m.CountryStateNotContains
	}
	return ""
}

func (m *LocationFilter) GetCountryStateStartsWith() string {
	if m != nil && m.CountryStateStartsWith != nil {
		return *m.CountryStateStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateNotStartsWith() string {
	if m != nil && m.CountryStateNotStartsWith != nil {
		return *m.CountryStateNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateEndsWith() string {
	if m != nil && m.CountryStateEndsWith != nil {
		return *m.CountryStateEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateNotEndsWith() string {
	if m != nil && m.CountryStateNotEndsWith != nil {
		return *m.CountryStateNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateIn() []string {
	if m != nil {
		return m.CountryStateIn
	}
	return nil
}

func (m *LocationFilter) GetCountryStateNotIn() []string {
	if m != nil {
		return m.CountryStateNotIn
	}
	return nil
}

func (m *LocationFilter) GetCountryStateDistrictIs() string {
	if m != nil && m.CountryStateDistrictIs != nil {
		return *m.CountryStateDistrictIs
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictNot() string {
	if m != nil && m.CountryStateDistrictNot != nil {
		return *m.CountryStateDistrictNot
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictLt() string {
	if m != nil && m.CountryStateDistrictLt != nil {
		return *m.CountryStateDistrictLt
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictLte() string {
	if m != nil && m.CountryStateDistrictLte != nil {
		return *m.CountryStateDistrictLte
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictGt() string {
	if m != nil && m.CountryStateDistrictGt != nil {
		return *m.CountryStateDistrictGt
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictGte() string {
	if m != nil && m.CountryStateDistrictGte != nil {
		return *m.CountryStateDistrictGte
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictContains() string {
	if m != nil && m.CountryStateDistrictContains != nil {
		return *m.CountryStateDistrictContains
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictNotContains() string {
	if m != nil && m.CountryStateDistrictNotContains != nil {
		return *m.CountryStateDistrictNotContains
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictStartsWith() string {
	if m != nil && m.CountryStateDistrictStartsWith != nil {
		return *m.CountryStateDistrictStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictNotStartsWith() string {
	if m != nil && m.CountryStateDistrictNotStartsWith != nil {
		return *m.CountryStateDistrictNotStartsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictEndsWith() string {
	if m != nil && m.CountryStateDistrictEndsWith != nil {
		return *m.CountryStateDistrictEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictNotEndsWith() string {
	if m != nil && m.CountryStateDistrictNotEndsWith != nil {
		return *m.CountryStateDistrictNotEndsWith
	}
	return ""
}

func (m *LocationFilter) GetCountryStateDistrictIn() []string {
	if m != nil {
		return m.CountryStateDistrictIn
	}
	return nil
}

func (m *LocationFilter) GetCountryStateDistrictNotIn() []string {
	if m != nil {
		return m.CountryStateDistrictNotIn
	}
	return nil
}

func (m *LocationFilter) GetAnd() []*LocationFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *LocationFilter) GetOr() []*LocationFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *LocationFilter) GetNot() []*LocationFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type LengthValueFilter struct {
	Hash             *string              `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	KindIs           *ValueKind           `protobuf:"varint,2,opt,name=kind_is,json=kindIs,enum=ValueKind" json:"kind_is,omitempty"`
	KindNot          *ValueKind           `protobuf:"varint,3,opt,name=kind_not,json=kindNot,enum=ValueKind" json:"kind_not,omitempty"`
	KindIn           []ValueKind          `protobuf:"varint,4,rep,name=kind_in,json=kindIn,enum=ValueKind" json:"kind_in,omitempty"`
	KindNotIn        []ValueKind          `protobuf:"varint,5,rep,name=kind_not_in,json=kindNotIn,enum=ValueKind" json:"kind_not_in,omitempty"`
	UnitIs           *LengthUnit          `protobuf:"varint,6,opt,name=unit_is,json=unitIs,enum=LengthUnit" json:"unit_is,omitempty"`
	UnitNot          *LengthUnit          `protobuf:"varint,7,opt,name=unit_not,json=unitNot,enum=LengthUnit" json:"unit_not,omitempty"`
	UnitIn           []LengthUnit         `protobuf:"varint,8,rep,name=unit_in,json=unitIn,enum=LengthUnit" json:"unit_in,omitempty"`
	UnitNotIn        []LengthUnit         `protobuf:"varint,9,rep,name=unit_not_in,json=unitNotIn,enum=LengthUnit" json:"unit_not_in,omitempty"`
	IsIs             *bool                `protobuf:"varint,10,opt,name=is_is,json=isIs" json:"is_is,omitempty"`
	IsNot            *bool                `protobuf:"varint,11,opt,name=is_not,json=isNot" json:"is_not,omitempty"`
	BaseValueIs      *float64             `protobuf:"fixed64,12,opt,name=baseValue_is,json=baseValueIs" json:"baseValue_is,omitempty"`
	BaseValueNot     *float64             `protobuf:"fixed64,13,opt,name=baseValue_not,json=baseValueNot" json:"baseValue_not,omitempty"`
	BaseValueLt      *float64             `protobuf:"fixed64,14,opt,name=baseValue_lt,json=baseValueLt" json:"baseValue_lt,omitempty"`
	BaseValueLte     *float64             `protobuf:"fixed64,15,opt,name=baseValue_lte,json=baseValueLte" json:"baseValue_lte,omitempty"`
	BaseValueGt      *float64             `protobuf:"fixed64,16,opt,name=baseValue_gt,json=baseValueGt" json:"baseValue_gt,omitempty"`
	BaseValueGte     *float64             `protobuf:"fixed64,17,opt,name=baseValue_gte,json=baseValueGte" json:"baseValue_gte,omitempty"`
	BaseValueIn      []float64            `protobuf:"fixed64,18,rep,name=baseValue_in,json=baseValueIn" json:"baseValue_in,omitempty"`
	BaseValueNotIn   []float64            `protobuf:"fixed64,19,rep,name=baseValue_not_in,json=baseValueNotIn" json:"baseValue_not_in,omitempty"`
	ValueIs          *float64             `protobuf:"fixed64,20,opt,name=value_is,json=valueIs" json:"value_is,omitempty"`
	ValueNot         *float64             `protobuf:"fixed64,21,opt,name=value_not,json=valueNot" json:"value_not,omitempty"`
	ValueLt          *float64             `protobuf:"fixed64,22,opt,name=value_lt,json=valueLt" json:"value_lt,omitempty"`
	ValueLte         *float64             `protobuf:"fixed64,23,opt,name=value_lte,json=valueLte" json:"value_lte,omitempty"`
	ValueGt          *float64             `protobuf:"fixed64,24,opt,name=value_gt,json=valueGt" json:"value_gt,omitempty"`
	ValueGte         *float64             `protobuf:"fixed64,25,opt,name=value_gte,json=valueGte" json:"value_gte,omitempty"`
	ValueIn          []float64            `protobuf:"fixed64,26,rep,name=value_in,json=valueIn" json:"value_in,omitempty"`
	ValueNotIn       []float64            `protobuf:"fixed64,27,rep,name=value_not_in,json=valueNotIn" json:"value_not_in,omitempty"`
	BaseRange        *FloatRangeFilter    `protobuf:"bytes,28,opt,name=baseRange" json:"baseRange,omitempty"`
	Range            *FloatRangeFilter    `protobuf:"bytes,29,opt,name=range" json:"range,omitempty"`
	And              []*LengthValueFilter `protobuf:"bytes,30,rep,name=and" json:"and,omitempty"`
	Or               []*LengthValueFilter `protobuf:"bytes,31,rep,name=or" json:"or,omitempty"`
	Not              []*LengthValueFilter `protobuf:"bytes,32,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *LengthValueFilter) Reset()                    { *m = LengthValueFilter{} }
func (m *LengthValueFilter) String() string            { return proto.CompactTextString(m) }
func (*LengthValueFilter) ProtoMessage()               {}
func (*LengthValueFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *LengthValueFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *LengthValueFilter) GetKindIs() ValueKind {
	if m != nil && m.KindIs != nil {
		return *m.KindIs
	}
	return ValueKind_VALUE
}

func (m *LengthValueFilter) GetKindNot() ValueKind {
	if m != nil && m.KindNot != nil {
		return *m.KindNot
	}
	return ValueKind_VALUE
}

func (m *LengthValueFilter) GetKindIn() []ValueKind {
	if m != nil {
		return m.KindIn
	}
	return nil
}

func (m *LengthValueFilter) GetKindNotIn() []ValueKind {
	if m != nil {
		return m.KindNotIn
	}
	return nil
}

func (m *LengthValueFilter) GetUnitIs() LengthUnit {
	if m != nil && m.UnitIs != nil {
		return *m.UnitIs
	}
	return LengthUnit_NANOMETER
}

func (m *LengthValueFilter) GetUnitNot() LengthUnit {
	if m != nil && m.UnitNot != nil {
		return *m.UnitNot
	}
	return LengthUnit_NANOMETER
}

func (m *LengthValueFilter) GetUnitIn() []LengthUnit {
	if m != nil {
		return m.UnitIn
	}
	return nil
}

func (m *LengthValueFilter) GetUnitNotIn() []LengthUnit {
	if m != nil {
		return m.UnitNotIn
	}
	return nil
}

func (m *LengthValueFilter) GetIsIs() bool {
	if m != nil && m.IsIs != nil {
		return *m.IsIs
	}
	return false
}

func (m *LengthValueFilter) GetIsNot() bool {
	if m != nil && m.IsNot != nil {
		return *m.IsNot
	}
	return false
}

func (m *LengthValueFilter) GetBaseValueIs() float64 {
	if m != nil && m.BaseValueIs != nil {
		return *m.BaseValueIs
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueNot() float64 {
	if m != nil && m.BaseValueNot != nil {
		return *m.BaseValueNot
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueLt() float64 {
	if m != nil && m.BaseValueLt != nil {
		return *m.BaseValueLt
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueLte() float64 {
	if m != nil && m.BaseValueLte != nil {
		return *m.BaseValueLte
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueGt() float64 {
	if m != nil && m.BaseValueGt != nil {
		return *m.BaseValueGt
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueGte() float64 {
	if m != nil && m.BaseValueGte != nil {
		return *m.BaseValueGte
	}
	return 0
}

func (m *LengthValueFilter) GetBaseValueIn() []float64 {
	if m != nil {
		return m.BaseValueIn
	}
	return nil
}

func (m *LengthValueFilter) GetBaseValueNotIn() []float64 {
	if m != nil {
		return m.BaseValueNotIn
	}
	return nil
}

func (m *LengthValueFilter) GetValueIs() float64 {
	if m != nil && m.ValueIs != nil {
		return *m.ValueIs
	}
	return 0
}

func (m *LengthValueFilter) GetValueNot() float64 {
	if m != nil && m.ValueNot != nil {
		return *m.ValueNot
	}
	return 0
}

func (m *LengthValueFilter) GetValueLt() float64 {
	if m != nil && m.ValueLt != nil {
		return *m.ValueLt
	}
	return 0
}

func (m *LengthValueFilter) GetValueLte() float64 {
	if m != nil && m.ValueLte != nil {
		return *m.ValueLte
	}
	return 0
}

func (m *LengthValueFilter) GetValueGt() float64 {
	if m != nil && m.ValueGt != nil {
		return *m.ValueGt
	}
	return 0
}

func (m *LengthValueFilter) GetValueGte() float64 {
	if m != nil && m.ValueGte != nil {
		return *m.ValueGte
	}
	return 0
}

func (m *LengthValueFilter) GetValueIn() []float64 {
	if m != nil {
		return m.ValueIn
	}
	return nil
}

func (m *LengthValueFilter) GetValueNotIn() []float64 {
	if m != nil {
		return m.ValueNotIn
	}
	return nil
}

func (m *LengthValueFilter) GetBaseRange() *FloatRangeFilter {
	if m != nil {
		return m.BaseRange
	}
	return nil
}

func (m *LengthValueFilter) GetRange() *FloatRangeFilter {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *LengthValueFilter) GetAnd() []*LengthValueFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *LengthValueFilter) GetOr() []*LengthValueFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *LengthValueFilter) GetNot() []*LengthValueFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type FloatRangeFilter struct {
	Hash             *string             `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	FromIs           *float64            `protobuf:"fixed64,2,opt,name=from_is,json=fromIs" json:"from_is,omitempty"`
	FromNot          *float64            `protobuf:"fixed64,3,opt,name=from_not,json=fromNot" json:"from_not,omitempty"`
	FromLt           *float64            `protobuf:"fixed64,4,opt,name=from_lt,json=fromLt" json:"from_lt,omitempty"`
	FromLte          *float64            `protobuf:"fixed64,5,opt,name=from_lte,json=fromLte" json:"from_lte,omitempty"`
	FromGt           *float64            `protobuf:"fixed64,6,opt,name=from_gt,json=fromGt" json:"from_gt,omitempty"`
	FromGte          *float64            `protobuf:"fixed64,7,opt,name=from_gte,json=fromGte" json:"from_gte,omitempty"`
	FromIn           []float64           `protobuf:"fixed64,8,rep,name=from_in,json=fromIn" json:"from_in,omitempty"`
	FromNotIn        []float64           `protobuf:"fixed64,9,rep,name=from_not_in,json=fromNotIn" json:"from_not_in,omitempty"`
	ToIs             *float64            `protobuf:"fixed64,10,opt,name=to_is,json=toIs" json:"to_is,omitempty"`
	ToNot            *float64            `protobuf:"fixed64,11,opt,name=to_not,json=toNot" json:"to_not,omitempty"`
	ToLt             *float64            `protobuf:"fixed64,12,opt,name=to_lt,json=toLt" json:"to_lt,omitempty"`
	ToLte            *float64            `protobuf:"fixed64,13,opt,name=to_lte,json=toLte" json:"to_lte,omitempty"`
	ToGt             *float64            `protobuf:"fixed64,14,opt,name=to_gt,json=toGt" json:"to_gt,omitempty"`
	ToGte            *float64            `protobuf:"fixed64,15,opt,name=to_gte,json=toGte" json:"to_gte,omitempty"`
	ToIn             []float64           `protobuf:"fixed64,16,rep,name=to_in,json=toIn" json:"to_in,omitempty"`
	ToNotIn          []float64           `protobuf:"fixed64,17,rep,name=to_not_in,json=toNotIn" json:"to_not_in,omitempty"`
	And              []*FloatRangeFilter `protobuf:"bytes,18,rep,name=and" json:"and,omitempty"`
	Or               []*FloatRangeFilter `protobuf:"bytes,19,rep,name=or" json:"or,omitempty"`
	Not              []*FloatRangeFilter `protobuf:"bytes,20,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *FloatRangeFilter) Reset()                    { *m = FloatRangeFilter{} }
func (m *FloatRangeFilter) String() string            { return proto.CompactTextString(m) }
func (*FloatRangeFilter) ProtoMessage()               {}
func (*FloatRangeFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FloatRangeFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *FloatRangeFilter) GetFromIs() float64 {
	if m != nil && m.FromIs != nil {
		return *m.FromIs
	}
	return 0
}

func (m *FloatRangeFilter) GetFromNot() float64 {
	if m != nil && m.FromNot != nil {
		return *m.FromNot
	}
	return 0
}

func (m *FloatRangeFilter) GetFromLt() float64 {
	if m != nil && m.FromLt != nil {
		return *m.FromLt
	}
	return 0
}

func (m *FloatRangeFilter) GetFromLte() float64 {
	if m != nil && m.FromLte != nil {
		return *m.FromLte
	}
	return 0
}

func (m *FloatRangeFilter) GetFromGt() float64 {
	if m != nil && m.FromGt != nil {
		return *m.FromGt
	}
	return 0
}

func (m *FloatRangeFilter) GetFromGte() float64 {
	if m != nil && m.FromGte != nil {
		return *m.FromGte
	}
	return 0
}

func (m *FloatRangeFilter) GetFromIn() []float64 {
	if m != nil {
		return m.FromIn
	}
	return nil
}

func (m *FloatRangeFilter) GetFromNotIn() []float64 {
	if m != nil {
		return m.FromNotIn
	}
	return nil
}

func (m *FloatRangeFilter) GetToIs() float64 {
	if m != nil && m.ToIs != nil {
		return *m.ToIs
	}
	return 0
}

func (m *FloatRangeFilter) GetToNot() float64 {
	if m != nil && m.ToNot != nil {
		return *m.ToNot
	}
	return 0
}

func (m *FloatRangeFilter) GetToLt() float64 {
	if m != nil && m.ToLt != nil {
		return *m.ToLt
	}
	return 0
}

func (m *FloatRangeFilter) GetToLte() float64 {
	if m != nil && m.ToLte != nil {
		return *m.ToLte
	}
	return 0
}

func (m *FloatRangeFilter) GetToGt() float64 {
	if m != nil && m.ToGt != nil {
		return *m.ToGt
	}
	return 0
}

func (m *FloatRangeFilter) GetToGte() float64 {
	if m != nil && m.ToGte != nil {
		return *m.ToGte
	}
	return 0
}

func (m *FloatRangeFilter) GetToIn() []float64 {
	if m != nil {
		return m.ToIn
	}
	return nil
}

func (m *FloatRangeFilter) GetToNotIn() []float64 {
	if m != nil {
		return m.ToNotIn
	}
	return nil
}

func (m *FloatRangeFilter) GetAnd() []*FloatRangeFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *FloatRangeFilter) GetOr() []*FloatRangeFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *FloatRangeFilter) GetNot() []*FloatRangeFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type EndpointUnionFilter struct {
	Hash             *string                `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	KindIs           *EndpointKind          `protobuf:"varint,2,opt,name=kind_is,json=kindIs,enum=EndpointKind" json:"kind_is,omitempty"`
	KindNot          *EndpointKind          `protobuf:"varint,3,opt,name=kind_not,json=kindNot,enum=EndpointKind" json:"kind_not,omitempty"`
	KindIn           []EndpointKind         `protobuf:"varint,4,rep,name=kind_in,json=kindIn,enum=EndpointKind" json:"kind_in,omitempty"`
	KindNotIn        []EndpointKind         `protobuf:"varint,5,rep,name=kind_not_in,json=kindNotIn,enum=EndpointKind" json:"kind_not_in,omitempty"`
	And              []*EndpointUnionFilter `protobuf:"bytes,6,rep,name=and" json:"and,omitempty"`
	Or               []*EndpointUnionFilter `protobuf:"bytes,7,rep,name=or" json:"or,omitempty"`
	Not              []*EndpointUnionFilter `protobuf:"bytes,8,rep,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *EndpointUnionFilter) Reset()                    { *m = EndpointUnionFilter{} }
func (m *EndpointUnionFilter) String() string            { return proto.CompactTextString(m) }
func (*EndpointUnionFilter) ProtoMessage()               {}
func (*EndpointUnionFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *EndpointUnionFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *EndpointUnionFilter) GetKindIs() EndpointKind {
	if m != nil && m.KindIs != nil {
		return *m.KindIs
	}
	return EndpointKind_GET_SERVICES
}

func (m *EndpointUnionFilter) GetKindNot() EndpointKind {
	if m != nil && m.KindNot != nil {
		return *m.KindNot
	}
	return EndpointKind_GET_SERVICES
}

func (m *EndpointUnionFilter) GetKindIn() []EndpointKind {
	if m != nil {
		return m.KindIn
	}
	return nil
}

func (m *EndpointUnionFilter) GetKindNotIn() []EndpointKind {
	if m != nil {
		return m.KindNotIn
	}
	return nil
}

func (m *EndpointUnionFilter) GetAnd() []*EndpointUnionFilter {
	if m != nil {
		return m.And
	}
	return nil
}

func (m *EndpointUnionFilter) GetOr() []*EndpointUnionFilter {
	if m != nil {
		return m.Or
	}
	return nil
}

func (m *EndpointUnionFilter) GetNot() []*EndpointUnionFilter {
	if m != nil {
		return m.Not
	}
	return nil
}

type StringFilter struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Is               *string  `protobuf:"bytes,2,opt,name=is" json:"is,omitempty"`
	Not              *string  `protobuf:"bytes,3,opt,name=not" json:"not,omitempty"`
	Lt               *string  `protobuf:"bytes,4,opt,name=lt" json:"lt,omitempty"`
	Lte              *string  `protobuf:"bytes,5,opt,name=lte" json:"lte,omitempty"`
	Gt               *string  `protobuf:"bytes,6,opt,name=gt" json:"gt,omitempty"`
	Gte              *string  `protobuf:"bytes,7,opt,name=gte" json:"gte,omitempty"`
	Contains         *string  `protobuf:"bytes,8,opt,name=contains" json:"contains,omitempty"`
	NotContains      *string  `protobuf:"bytes,9,opt,name=not_contains,json=notContains" json:"not_contains,omitempty"`
	StartsWith       *string  `protobuf:"bytes,10,opt,name=starts_with,json=startsWith" json:"starts_with,omitempty"`
	NotStartsWith    *string  `protobuf:"bytes,11,opt,name=not_starts_with,json=notStartsWith" json:"not_starts_with,omitempty"`
	EndsWith         *string  `protobuf:"bytes,12,opt,name=ends_with,json=endsWith" json:"ends_with,omitempty"`
	NotEndsWith      *string  `protobuf:"bytes,13,opt,name=not_ends_with,json=notEndsWith" json:"not_ends_with,omitempty"`
	In               []string `protobuf:"bytes,14,rep,name=in" json:"in,omitempty"`
	NotIn            []string `protobuf:"bytes,15,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *StringFilter) Reset()                    { *m = StringFilter{} }
func (m *StringFilter) String() string            { return proto.CompactTextString(m) }
func (*StringFilter) ProtoMessage()               {}
func (*StringFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *StringFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *StringFilter) GetIs() string {
	if m != nil && m.Is != nil {
		return *m.Is
	}
	return ""
}

func (m *StringFilter) GetNot() string {
	if m != nil && m.Not != nil {
		return *m.Not
	}
	return ""
}

func (m *StringFilter) GetLt() string {
	if m != nil && m.Lt != nil {
		return *m.Lt
	}
	return ""
}

func (m *StringFilter) GetLte() string {
	if m != nil && m.Lte != nil {
		return *m.Lte
	}
	return ""
}

func (m *StringFilter) GetGt() string {
	if m != nil && m.Gt != nil {
		return *m.Gt
	}
	return ""
}

func (m *StringFilter) GetGte() string {
	if m != nil && m.Gte != nil {
		return *m.Gte
	}
	return ""
}

func (m *StringFilter) GetContains() string {
	if m != nil && m.Contains != nil {
		return *m.Contains
	}
	return ""
}

func (m *StringFilter) GetNotContains() string {
	if m != nil && m.NotContains != nil {
		return *m.NotContains
	}
	return ""
}

func (m *StringFilter) GetStartsWith() string {
	if m != nil && m.StartsWith != nil {
		return *m.StartsWith
	}
	return ""
}

func (m *StringFilter) GetNotStartsWith() string {
	if m != nil && m.NotStartsWith != nil {
		return *m.NotStartsWith
	}
	return ""
}

func (m *StringFilter) GetEndsWith() string {
	if m != nil && m.EndsWith != nil {
		return *m.EndsWith
	}
	return ""
}

func (m *StringFilter) GetNotEndsWith() string {
	if m != nil && m.NotEndsWith != nil {
		return *m.NotEndsWith
	}
	return ""
}

func (m *StringFilter) GetIn() []string {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *StringFilter) GetNotIn() []string {
	if m != nil {
		return m.NotIn
	}
	return nil
}

type BooleanFilter struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Is               *bool   `protobuf:"varint,2,opt,name=is" json:"is,omitempty"`
	Not              *bool   `protobuf:"varint,3,opt,name=not" json:"not,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *BooleanFilter) Reset()                    { *m = BooleanFilter{} }
func (m *BooleanFilter) String() string            { return proto.CompactTextString(m) }
func (*BooleanFilter) ProtoMessage()               {}
func (*BooleanFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *BooleanFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *BooleanFilter) GetIs() bool {
	if m != nil && m.Is != nil {
		return *m.Is
	}
	return false
}

func (m *BooleanFilter) GetNot() bool {
	if m != nil && m.Not != nil {
		return *m.Not
	}
	return false
}

type IntFilter struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Is               *int32  `protobuf:"varint,2,opt,name=is" json:"is,omitempty"`
	Not              *int32  `protobuf:"varint,3,opt,name=not" json:"not,omitempty"`
	Lt               *int32  `protobuf:"varint,4,opt,name=lt" json:"lt,omitempty"`
	Lte              *int32  `protobuf:"varint,5,opt,name=lte" json:"lte,omitempty"`
	Gt               *int32  `protobuf:"varint,6,opt,name=gt" json:"gt,omitempty"`
	Gte              *int32  `protobuf:"varint,7,opt,name=gte" json:"gte,omitempty"`
	In               []int32 `protobuf:"varint,8,rep,name=in" json:"in,omitempty"`
	NotIn            []int32 `protobuf:"varint,9,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *IntFilter) Reset()                    { *m = IntFilter{} }
func (m *IntFilter) String() string            { return proto.CompactTextString(m) }
func (*IntFilter) ProtoMessage()               {}
func (*IntFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *IntFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *IntFilter) GetIs() int32 {
	if m != nil && m.Is != nil {
		return *m.Is
	}
	return 0
}

func (m *IntFilter) GetNot() int32 {
	if m != nil && m.Not != nil {
		return *m.Not
	}
	return 0
}

func (m *IntFilter) GetLt() int32 {
	if m != nil && m.Lt != nil {
		return *m.Lt
	}
	return 0
}

func (m *IntFilter) GetLte() int32 {
	if m != nil && m.Lte != nil {
		return *m.Lte
	}
	return 0
}

func (m *IntFilter) GetGt() int32 {
	if m != nil && m.Gt != nil {
		return *m.Gt
	}
	return 0
}

func (m *IntFilter) GetGte() int32 {
	if m != nil && m.Gte != nil {
		return *m.Gte
	}
	return 0
}

func (m *IntFilter) GetIn() []int32 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *IntFilter) GetNotIn() []int32 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

type FloatFilter struct {
	Hash             *string   `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Is               *float64  `protobuf:"fixed64,2,opt,name=is" json:"is,omitempty"`
	Not              *float64  `protobuf:"fixed64,3,opt,name=not" json:"not,omitempty"`
	Lt               *float64  `protobuf:"fixed64,4,opt,name=lt" json:"lt,omitempty"`
	Lte              *float64  `protobuf:"fixed64,5,opt,name=lte" json:"lte,omitempty"`
	Gt               *float64  `protobuf:"fixed64,6,opt,name=gt" json:"gt,omitempty"`
	Gte              *float64  `protobuf:"fixed64,7,opt,name=gte" json:"gte,omitempty"`
	In               []float64 `protobuf:"fixed64,8,rep,name=in" json:"in,omitempty"`
	NotIn            []float64 `protobuf:"fixed64,9,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *FloatFilter) Reset()                    { *m = FloatFilter{} }
func (m *FloatFilter) String() string            { return proto.CompactTextString(m) }
func (*FloatFilter) ProtoMessage()               {}
func (*FloatFilter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *FloatFilter) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *FloatFilter) GetIs() float64 {
	if m != nil && m.Is != nil {
		return *m.Is
	}
	return 0
}

func (m *FloatFilter) GetNot() float64 {
	if m != nil && m.Not != nil {
		return *m.Not
	}
	return 0
}

func (m *FloatFilter) GetLt() float64 {
	if m != nil && m.Lt != nil {
		return *m.Lt
	}
	return 0
}

func (m *FloatFilter) GetLte() float64 {
	if m != nil && m.Lte != nil {
		return *m.Lte
	}
	return 0
}

func (m *FloatFilter) GetGt() float64 {
	if m != nil && m.Gt != nil {
		return *m.Gt
	}
	return 0
}

func (m *FloatFilter) GetGte() float64 {
	if m != nil && m.Gte != nil {
		return *m.Gte
	}
	return 0
}

func (m *FloatFilter) GetIn() []float64 {
	if m != nil {
		return m.In
	}
	return nil
}

func (m *FloatFilter) GetNotIn() []float64 {
	if m != nil {
		return m.NotIn
	}
	return nil
}

type IdUnion struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Kind             *IdKind  `protobuf:"varint,2,opt,name=kind,enum=IdKind" json:"kind,omitempty"`
	Kinds            []IdKind `protobuf:"varint,3,rep,name=kinds,enum=IdKind" json:"kinds,omitempty"`
	Url              *string  `protobuf:"bytes,4,opt,name=url" json:"url,omitempty"`
	Name             *string  `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	Username         *string  `protobuf:"bytes,6,opt,name=username" json:"username,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *IdUnion) Reset()                    { *m = IdUnion{} }
func (m *IdUnion) String() string            { return proto.CompactTextString(m) }
func (*IdUnion) ProtoMessage()               {}
func (*IdUnion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *IdUnion) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *IdUnion) GetKind() IdKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return IdKind_URL
}

func (m *IdUnion) GetKinds() []IdKind {
	if m != nil {
		return m.Kinds
	}
	return nil
}

func (m *IdUnion) GetUrl() string {
	if m != nil && m.Url != nil {
		return *m.Url
	}
	return ""
}

func (m *IdUnion) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *IdUnion) GetUsername() string {
	if m != nil && m.Username != nil {
		return *m.Username
	}
	return ""
}

type All struct {
	Hash             *string   `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	I                *int32    `protobuf:"varint,2,opt,name=i" json:"i,omitempty"`
	S                *string   `protobuf:"bytes,3,opt,name=s" json:"s,omitempty"`
	B                *bool     `protobuf:"varint,4,opt,name=b" json:"b,omitempty"`
	F                *float64  `protobuf:"fixed64,5,opt,name=f" json:"f,omitempty"`
	Is               []int32   `protobuf:"varint,6,rep,name=is" json:"is,omitempty"`
	Ss               []string  `protobuf:"bytes,7,rep,name=ss" json:"ss,omitempty"`
	Bs               []bool    `protobuf:"varint,8,rep,name=bs" json:"bs,omitempty"`
	Fs               []float64 `protobuf:"fixed64,9,rep,name=fs" json:"fs,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *All) Reset()                    { *m = All{} }
func (m *All) String() string            { return proto.CompactTextString(m) }
func (*All) ProtoMessage()               {}
func (*All) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *All) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *All) GetI() int32 {
	if m != nil && m.I != nil {
		return *m.I
	}
	return 0
}

func (m *All) GetS() string {
	if m != nil && m.S != nil {
		return *m.S
	}
	return ""
}

func (m *All) GetB() bool {
	if m != nil && m.B != nil {
		return *m.B
	}
	return false
}

func (m *All) GetF() float64 {
	if m != nil && m.F != nil {
		return *m.F
	}
	return 0
}

func (m *All) GetIs() []int32 {
	if m != nil {
		return m.Is
	}
	return nil
}

func (m *All) GetSs() []string {
	if m != nil {
		return m.Ss
	}
	return nil
}

func (m *All) GetBs() []bool {
	if m != nil {
		return m.Bs
	}
	return nil
}

func (m *All) GetFs() []float64 {
	if m != nil {
		return m.Fs
	}
	return nil
}

type Service struct {
	Hash             *string          `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Ids              []*IdUnion       `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	Name             *string          `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	Endpoints        []*EndpointUnion `protobuf:"bytes,4,rep,name=endpoints" json:"endpoints,omitempty"`
	Host             *string          `protobuf:"bytes,5,opt,name=host" json:"host,omitempty"`
	Ports            *ServicePorts    `protobuf:"bytes,6,opt,name=ports" json:"ports,omitempty"`
	XXX_unrecognized []byte           `json:"-"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Service) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Service) GetIds() []*IdUnion {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Service) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Service) GetEndpoints() []*EndpointUnion {
	if m != nil {
		return m.Endpoints
	}
	return nil
}

func (m *Service) GetHost() string {
	if m != nil && m.Host != nil {
		return *m.Host
	}
	return ""
}

func (m *Service) GetPorts() *ServicePorts {
	if m != nil {
		return m.Ports
	}
	return nil
}

type ServicePorts struct {
	Hash             *string    `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Ids              []*IdUnion `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	Grpc             *int32     `protobuf:"varint,3,opt,name=grpc" json:"grpc,omitempty"`
	Graphql          *int32     `protobuf:"varint,4,opt,name=graphql" json:"graphql,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *ServicePorts) Reset()                    { *m = ServicePorts{} }
func (m *ServicePorts) String() string            { return proto.CompactTextString(m) }
func (*ServicePorts) ProtoMessage()               {}
func (*ServicePorts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *ServicePorts) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ServicePorts) GetIds() []*IdUnion {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ServicePorts) GetGrpc() int32 {
	if m != nil && m.Grpc != nil {
		return *m.Grpc
	}
	return 0
}

func (m *ServicePorts) GetGraphql() int32 {
	if m != nil && m.Graphql != nil {
		return *m.Graphql
	}
	return 0
}

type Location struct {
	Hash                 *string      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Ids                  []*IdUnion   `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	Radius               *LengthValue `protobuf:"bytes,3,opt,name=radius" json:"radius,omitempty"`
	Street               *string      `protobuf:"bytes,4,opt,name=street" json:"street,omitempty"`
	ZipCode              *string      `protobuf:"bytes,5,opt,name=zipCode" json:"zipCode,omitempty"`
	City                 *string      `protobuf:"bytes,6,opt,name=city" json:"city,omitempty"`
	CityDistrict         *string      `protobuf:"bytes,7,opt,name=cityDistrict" json:"cityDistrict,omitempty"`
	Country              *string      `protobuf:"bytes,8,opt,name=country" json:"country,omitempty"`
	CountryState         *string      `protobuf:"bytes,9,opt,name=countryState" json:"countryState,omitempty"`
	CountryStateDistrict *string      `protobuf:"bytes,10,opt,name=countryStateDistrict" json:"countryStateDistrict,omitempty"`
	XXX_unrecognized     []byte       `json:"-"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Location) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Location) GetIds() []*IdUnion {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *Location) GetRadius() *LengthValue {
	if m != nil {
		return m.Radius
	}
	return nil
}

func (m *Location) GetStreet() string {
	if m != nil && m.Street != nil {
		return *m.Street
	}
	return ""
}

func (m *Location) GetZipCode() string {
	if m != nil && m.ZipCode != nil {
		return *m.ZipCode
	}
	return ""
}

func (m *Location) GetCity() string {
	if m != nil && m.City != nil {
		return *m.City
	}
	return ""
}

func (m *Location) GetCityDistrict() string {
	if m != nil && m.CityDistrict != nil {
		return *m.CityDistrict
	}
	return ""
}

func (m *Location) GetCountry() string {
	if m != nil && m.Country != nil {
		return *m.Country
	}
	return ""
}

func (m *Location) GetCountryState() string {
	if m != nil && m.CountryState != nil {
		return *m.CountryState
	}
	return ""
}

func (m *Location) GetCountryStateDistrict() string {
	if m != nil && m.CountryStateDistrict != nil {
		return *m.CountryStateDistrict
	}
	return ""
}

type LengthValue struct {
	Hash             *string     `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Kind             *ValueKind  `protobuf:"varint,2,opt,name=kind,enum=ValueKind" json:"kind,omitempty"`
	Unit             *LengthUnit `protobuf:"varint,3,opt,name=unit,enum=LengthUnit" json:"unit,omitempty"`
	Is               *bool       `protobuf:"varint,4,opt,name=is" json:"is,omitempty"`
	BaseValue        *float64    `protobuf:"fixed64,5,opt,name=baseValue" json:"baseValue,omitempty"`
	Value            *float64    `protobuf:"fixed64,6,opt,name=value" json:"value,omitempty"`
	BaseRange        *FloatRange `protobuf:"bytes,7,opt,name=baseRange" json:"baseRange,omitempty"`
	Range            *FloatRange `protobuf:"bytes,8,opt,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *LengthValue) Reset()                    { *m = LengthValue{} }
func (m *LengthValue) String() string            { return proto.CompactTextString(m) }
func (*LengthValue) ProtoMessage()               {}
func (*LengthValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *LengthValue) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *LengthValue) GetKind() ValueKind {
	if m != nil && m.Kind != nil {
		return *m.Kind
	}
	return ValueKind_VALUE
}

func (m *LengthValue) GetUnit() LengthUnit {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return LengthUnit_NANOMETER
}

func (m *LengthValue) GetIs() bool {
	if m != nil && m.Is != nil {
		return *m.Is
	}
	return false
}

func (m *LengthValue) GetBaseValue() float64 {
	if m != nil && m.BaseValue != nil {
		return *m.BaseValue
	}
	return 0
}

func (m *LengthValue) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *LengthValue) GetBaseRange() *FloatRange {
	if m != nil {
		return m.BaseRange
	}
	return nil
}

func (m *LengthValue) GetRange() *FloatRange {
	if m != nil {
		return m.Range
	}
	return nil
}

type FloatRange struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	From             *float64 `protobuf:"fixed64,2,opt,name=from" json:"from,omitempty"`
	To               *float64 `protobuf:"fixed64,3,opt,name=to" json:"to,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *FloatRange) Reset()                    { *m = FloatRange{} }
func (m *FloatRange) String() string            { return proto.CompactTextString(m) }
func (*FloatRange) ProtoMessage()               {}
func (*FloatRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FloatRange) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *FloatRange) GetFrom() float64 {
	if m != nil && m.From != nil {
		return *m.From
	}
	return 0
}

func (m *FloatRange) GetTo() float64 {
	if m != nil && m.To != nil {
		return *m.To
	}
	return 0
}

type GetServicesEndpoint struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Where            *string `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GetServicesEndpoint) Reset()                    { *m = GetServicesEndpoint{} }
func (m *GetServicesEndpoint) String() string            { return proto.CompactTextString(m) }
func (*GetServicesEndpoint) ProtoMessage()               {}
func (*GetServicesEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *GetServicesEndpoint) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServicesEndpoint) GetWhere() string {
	if m != nil && m.Where != nil {
		return *m.Where
	}
	return ""
}

type GetServiceByIdEndpoint struct {
	Hash             *string                      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Where            *GetServiceByIdRequestFilter `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *GetServiceByIdEndpoint) Reset()                    { *m = GetServiceByIdEndpoint{} }
func (m *GetServiceByIdEndpoint) String() string            { return proto.CompactTextString(m) }
func (*GetServiceByIdEndpoint) ProtoMessage()               {}
func (*GetServiceByIdEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *GetServiceByIdEndpoint) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServiceByIdEndpoint) GetWhere() *GetServiceByIdRequestFilter {
	if m != nil {
		return m.Where
	}
	return nil
}

type CreateServicesEndpoint struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Where            *string `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateServicesEndpoint) Reset()                    { *m = CreateServicesEndpoint{} }
func (m *CreateServicesEndpoint) String() string            { return proto.CompactTextString(m) }
func (*CreateServicesEndpoint) ProtoMessage()               {}
func (*CreateServicesEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CreateServicesEndpoint) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *CreateServicesEndpoint) GetWhere() string {
	if m != nil && m.Where != nil {
		return *m.Where
	}
	return ""
}

type UpdateServicesEndpoint struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Where            *string `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UpdateServicesEndpoint) Reset()                    { *m = UpdateServicesEndpoint{} }
func (m *UpdateServicesEndpoint) String() string            { return proto.CompactTextString(m) }
func (*UpdateServicesEndpoint) ProtoMessage()               {}
func (*UpdateServicesEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UpdateServicesEndpoint) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *UpdateServicesEndpoint) GetWhere() string {
	if m != nil && m.Where != nil {
		return *m.Where
	}
	return ""
}

type DeleteServicesEndpoint struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Where            *string `protobuf:"bytes,2,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteServicesEndpoint) Reset()                    { *m = DeleteServicesEndpoint{} }
func (m *DeleteServicesEndpoint) String() string            { return proto.CompactTextString(m) }
func (*DeleteServicesEndpoint) ProtoMessage()               {}
func (*DeleteServicesEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteServicesEndpoint) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *DeleteServicesEndpoint) GetWhere() string {
	if m != nil && m.Where != nil {
		return *m.Where
	}
	return ""
}

type Error struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *Error) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type RequestMeta struct {
	Hash             *string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Sth              *string `protobuf:"bytes,2,opt,name=sth" json:"sth,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RequestMeta) Reset()                    { *m = RequestMeta{} }
func (m *RequestMeta) String() string            { return proto.CompactTextString(m) }
func (*RequestMeta) ProtoMessage()               {}
func (*RequestMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *RequestMeta) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *RequestMeta) GetSth() string {
	if m != nil && m.Sth != nil {
		return *m.Sth
	}
	return ""
}

type ResponseMeta struct {
	Hash             *string  `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Errors           []*Error `protobuf:"bytes,2,rep,name=errors" json:"errors,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ResponseMeta) Reset()                    { *m = ResponseMeta{} }
func (m *ResponseMeta) String() string            { return proto.CompactTextString(m) }
func (*ResponseMeta) ProtoMessage()               {}
func (*ResponseMeta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ResponseMeta) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *ResponseMeta) GetErrors() []*Error {
	if m != nil {
		return m.Errors
	}
	return nil
}

type GetServicesRequest struct {
	Hash             *string        `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *RequestMeta   `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Page             *int32         `protobuf:"varint,3,opt,name=page" json:"page,omitempty"`
	LocationQuery    *LocationQuery `protobuf:"bytes,4,opt,name=locationQuery" json:"locationQuery,omitempty"`
	Query            *ServiceQuery  `protobuf:"bytes,5,opt,name=query" json:"query,omitempty"`
	Where            *ServiceFilter `protobuf:"bytes,6,opt,name=where" json:"where,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *GetServicesRequest) Reset()                    { *m = GetServicesRequest{} }
func (m *GetServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServicesRequest) ProtoMessage()               {}
func (*GetServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *GetServicesRequest) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServicesRequest) GetMeta() *RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GetServicesRequest) GetPage() int32 {
	if m != nil && m.Page != nil {
		return *m.Page
	}
	return 0
}

func (m *GetServicesRequest) GetLocationQuery() *LocationQuery {
	if m != nil {
		return m.LocationQuery
	}
	return nil
}

func (m *GetServicesRequest) GetQuery() *ServiceQuery {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GetServicesRequest) GetWhere() *ServiceFilter {
	if m != nil {
		return m.Where
	}
	return nil
}

type GetServicesResponse struct {
	Hash             *string       `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *ResponseMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	TotalCount       *int32        `protobuf:"varint,3,opt,name=totalCount" json:"totalCount,omitempty"`
	Services         []*Service    `protobuf:"bytes,4,rep,name=services" json:"services,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetServicesResponse) Reset()                    { *m = GetServicesResponse{} }
func (m *GetServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServicesResponse) ProtoMessage()               {}
func (*GetServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *GetServicesResponse) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServicesResponse) GetMeta() *ResponseMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GetServicesResponse) GetTotalCount() int32 {
	if m != nil && m.TotalCount != nil {
		return *m.TotalCount
	}
	return 0
}

func (m *GetServicesResponse) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type GetServiceByIdRequest struct {
	Hash             *string      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *RequestMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Id               *IdUnion     `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *GetServiceByIdRequest) Reset()                    { *m = GetServiceByIdRequest{} }
func (m *GetServiceByIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServiceByIdRequest) ProtoMessage()               {}
func (*GetServiceByIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *GetServiceByIdRequest) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServiceByIdRequest) GetMeta() *RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GetServiceByIdRequest) GetId() *IdUnion {
	if m != nil {
		return m.Id
	}
	return nil
}

type GetServiceByIdResponse struct {
	Hash             *string       `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *ResponseMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Service          *Service      `protobuf:"bytes,3,opt,name=service" json:"service,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *GetServiceByIdResponse) Reset()                    { *m = GetServiceByIdResponse{} }
func (m *GetServiceByIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServiceByIdResponse) ProtoMessage()               {}
func (*GetServiceByIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *GetServiceByIdResponse) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *GetServiceByIdResponse) GetMeta() *ResponseMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *GetServiceByIdResponse) GetService() *Service {
	if m != nil {
		return m.Service
	}
	return nil
}

type CreateServicesRequest struct {
	Hash             *string      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *RequestMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Ids              []*IdUnion   `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
	Services         []*Service   `protobuf:"bytes,4,rep,name=services" json:"services,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *CreateServicesRequest) Reset()                    { *m = CreateServicesRequest{} }
func (m *CreateServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateServicesRequest) ProtoMessage()               {}
func (*CreateServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *CreateServicesRequest) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *CreateServicesRequest) GetMeta() *RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *CreateServicesRequest) GetIds() []*IdUnion {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *CreateServicesRequest) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type CreateServicesResponse struct {
	Hash             *string       `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *ResponseMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CreateServicesResponse) Reset()                    { *m = CreateServicesResponse{} }
func (m *CreateServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateServicesResponse) ProtoMessage()               {}
func (*CreateServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *CreateServicesResponse) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *CreateServicesResponse) GetMeta() *ResponseMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type UpdateServicesRequest struct {
	Hash             *string      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *RequestMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Services         []*Service   `protobuf:"bytes,3,rep,name=services" json:"services,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *UpdateServicesRequest) Reset()                    { *m = UpdateServicesRequest{} }
func (m *UpdateServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateServicesRequest) ProtoMessage()               {}
func (*UpdateServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *UpdateServicesRequest) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *UpdateServicesRequest) GetMeta() *RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *UpdateServicesRequest) GetServices() []*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type UpdateServicesResponse struct {
	Hash             *string       `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *ResponseMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *UpdateServicesResponse) Reset()                    { *m = UpdateServicesResponse{} }
func (m *UpdateServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateServicesResponse) ProtoMessage()               {}
func (*UpdateServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *UpdateServicesResponse) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *UpdateServicesResponse) GetMeta() *ResponseMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

type DeleteServicesRequest struct {
	Hash             *string      `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *RequestMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	Ids              []*IdUnion   `protobuf:"bytes,3,rep,name=ids" json:"ids,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DeleteServicesRequest) Reset()                    { *m = DeleteServicesRequest{} }
func (m *DeleteServicesRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteServicesRequest) ProtoMessage()               {}
func (*DeleteServicesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *DeleteServicesRequest) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *DeleteServicesRequest) GetMeta() *RequestMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *DeleteServicesRequest) GetIds() []*IdUnion {
	if m != nil {
		return m.Ids
	}
	return nil
}

type DeleteServicesResponse struct {
	Hash             *string       `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
	Meta             *ResponseMeta `protobuf:"bytes,2,opt,name=meta" json:"meta,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *DeleteServicesResponse) Reset()                    { *m = DeleteServicesResponse{} }
func (m *DeleteServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteServicesResponse) ProtoMessage()               {}
func (*DeleteServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *DeleteServicesResponse) GetHash() string {
	if m != nil && m.Hash != nil {
		return *m.Hash
	}
	return ""
}

func (m *DeleteServicesResponse) GetMeta() *ResponseMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func init() {
	proto.RegisterType((*EndpointUnion)(nil), "EndpointUnion")
	proto.RegisterType((*IdUnionQuery)(nil), "IdUnionQuery")
	proto.RegisterType((*AllQuery)(nil), "AllQuery")
	proto.RegisterType((*ServiceQuery)(nil), "ServiceQuery")
	proto.RegisterType((*ServicePortsQuery)(nil), "ServicePortsQuery")
	proto.RegisterType((*LocationQuery)(nil), "LocationQuery")
	proto.RegisterType((*LengthValueQuery)(nil), "LengthValueQuery")
	proto.RegisterType((*FloatRangeQuery)(nil), "FloatRangeQuery")
	proto.RegisterType((*GetServiceByIdRequestFilter)(nil), "GetServiceByIdRequestFilter")
	proto.RegisterType((*IdUnionFilter)(nil), "IdUnionFilter")
	proto.RegisterType((*AllFilter)(nil), "AllFilter")
	proto.RegisterType((*ServiceFilter)(nil), "ServiceFilter")
	proto.RegisterType((*ServicePortsFilter)(nil), "ServicePortsFilter")
	proto.RegisterType((*LocationFilter)(nil), "LocationFilter")
	proto.RegisterType((*LengthValueFilter)(nil), "LengthValueFilter")
	proto.RegisterType((*FloatRangeFilter)(nil), "FloatRangeFilter")
	proto.RegisterType((*EndpointUnionFilter)(nil), "EndpointUnionFilter")
	proto.RegisterType((*StringFilter)(nil), "StringFilter")
	proto.RegisterType((*BooleanFilter)(nil), "BooleanFilter")
	proto.RegisterType((*IntFilter)(nil), "IntFilter")
	proto.RegisterType((*FloatFilter)(nil), "FloatFilter")
	proto.RegisterType((*IdUnion)(nil), "IdUnion")
	proto.RegisterType((*All)(nil), "All")
	proto.RegisterType((*Service)(nil), "Service")
	proto.RegisterType((*ServicePorts)(nil), "ServicePorts")
	proto.RegisterType((*Location)(nil), "Location")
	proto.RegisterType((*LengthValue)(nil), "LengthValue")
	proto.RegisterType((*FloatRange)(nil), "FloatRange")
	proto.RegisterType((*GetServicesEndpoint)(nil), "GetServicesEndpoint")
	proto.RegisterType((*GetServiceByIdEndpoint)(nil), "GetServiceByIdEndpoint")
	proto.RegisterType((*CreateServicesEndpoint)(nil), "CreateServicesEndpoint")
	proto.RegisterType((*UpdateServicesEndpoint)(nil), "UpdateServicesEndpoint")
	proto.RegisterType((*DeleteServicesEndpoint)(nil), "DeleteServicesEndpoint")
	proto.RegisterType((*Error)(nil), "Error")
	proto.RegisterType((*RequestMeta)(nil), "RequestMeta")
	proto.RegisterType((*ResponseMeta)(nil), "ResponseMeta")
	proto.RegisterType((*GetServicesRequest)(nil), "GetServicesRequest")
	proto.RegisterType((*GetServicesResponse)(nil), "GetServicesResponse")
	proto.RegisterType((*GetServiceByIdRequest)(nil), "GetServiceByIdRequest")
	proto.RegisterType((*GetServiceByIdResponse)(nil), "GetServiceByIdResponse")
	proto.RegisterType((*CreateServicesRequest)(nil), "CreateServicesRequest")
	proto.RegisterType((*CreateServicesResponse)(nil), "CreateServicesResponse")
	proto.RegisterType((*UpdateServicesRequest)(nil), "UpdateServicesRequest")
	proto.RegisterType((*UpdateServicesResponse)(nil), "UpdateServicesResponse")
	proto.RegisterType((*DeleteServicesRequest)(nil), "DeleteServicesRequest")
	proto.RegisterType((*DeleteServicesResponse)(nil), "DeleteServicesResponse")
	proto.RegisterEnum("EndpointKind", EndpointKind_name, EndpointKind_value)
	proto.RegisterEnum("IdKind", IdKind_name, IdKind_value)
	proto.RegisterEnum("LengthUnit", LengthUnit_name, LengthUnit_value)
	proto.RegisterEnum("ValueKind", ValueKind_name, ValueKind_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CreateServices service

type CreateServicesClient interface {
	Create(ctx context.Context, in *CreateServicesRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error)
}

type createServicesClient struct {
	cc *grpc.ClientConn
}

func NewCreateServicesClient(cc *grpc.ClientConn) CreateServicesClient {
	return &createServicesClient{cc}
}

func (c *createServicesClient) Create(ctx context.Context, in *CreateServicesRequest, opts ...grpc.CallOption) (*CreateServicesResponse, error) {
	out := new(CreateServicesResponse)
	err := grpc.Invoke(ctx, "/CreateServices/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CreateServices service

type CreateServicesServer interface {
	Create(context.Context, *CreateServicesRequest) (*CreateServicesResponse, error)
}

func RegisterCreateServicesServer(s *grpc.Server, srv CreateServicesServer) {
	s.RegisterService(&_CreateServices_serviceDesc, srv)
}

func _CreateServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CreateServices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateServicesServer).Create(ctx, req.(*CreateServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CreateServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CreateServices",
	HandlerType: (*CreateServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CreateServices_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Client API for GetServices service

type GetServicesClient interface {
	Get(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
}

type getServicesClient struct {
	cc *grpc.ClientConn
}

func NewGetServicesClient(cc *grpc.ClientConn) GetServicesClient {
	return &getServicesClient{cc}
}

func (c *getServicesClient) Get(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := grpc.Invoke(ctx, "/GetServices/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetServices service

type GetServicesServer interface {
	Get(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
}

func RegisterGetServicesServer(s *grpc.Server, srv GetServicesServer) {
	s.RegisterService(&_GetServices_serviceDesc, srv)
}

func _GetServices_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServicesServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetServices/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServicesServer).Get(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GetServices",
	HandlerType: (*GetServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetServices_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Client API for GetServiceById service

type GetServiceByIdClient interface {
	Get(ctx context.Context, in *GetServiceByIdRequest, opts ...grpc.CallOption) (*GetServiceByIdResponse, error)
}

type getServiceByIdClient struct {
	cc *grpc.ClientConn
}

func NewGetServiceByIdClient(cc *grpc.ClientConn) GetServiceByIdClient {
	return &getServiceByIdClient{cc}
}

func (c *getServiceByIdClient) Get(ctx context.Context, in *GetServiceByIdRequest, opts ...grpc.CallOption) (*GetServiceByIdResponse, error) {
	out := new(GetServiceByIdResponse)
	err := grpc.Invoke(ctx, "/GetServiceById/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GetServiceById service

type GetServiceByIdServer interface {
	Get(context.Context, *GetServiceByIdRequest) (*GetServiceByIdResponse, error)
}

func RegisterGetServiceByIdServer(s *grpc.Server, srv GetServiceByIdServer) {
	s.RegisterService(&_GetServiceById_serviceDesc, srv)
}

func _GetServiceById_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetServiceByIdServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetServiceById/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetServiceByIdServer).Get(ctx, req.(*GetServiceByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetServiceById_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GetServiceById",
	HandlerType: (*GetServiceByIdServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GetServiceById_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Client API for UpdateServices service

type UpdateServicesClient interface {
	Update(ctx context.Context, in *UpdateServicesRequest, opts ...grpc.CallOption) (*UpdateServicesResponse, error)
}

type updateServicesClient struct {
	cc *grpc.ClientConn
}

func NewUpdateServicesClient(cc *grpc.ClientConn) UpdateServicesClient {
	return &updateServicesClient{cc}
}

func (c *updateServicesClient) Update(ctx context.Context, in *UpdateServicesRequest, opts ...grpc.CallOption) (*UpdateServicesResponse, error) {
	out := new(UpdateServicesResponse)
	err := grpc.Invoke(ctx, "/UpdateServices/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpdateServices service

type UpdateServicesServer interface {
	Update(context.Context, *UpdateServicesRequest) (*UpdateServicesResponse, error)
}

func RegisterUpdateServicesServer(s *grpc.Server, srv UpdateServicesServer) {
	s.RegisterService(&_UpdateServices_serviceDesc, srv)
}

func _UpdateServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UpdateServices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServicesServer).Update(ctx, req.(*UpdateServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UpdateServices",
	HandlerType: (*UpdateServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _UpdateServices_Update_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Client API for DeleteServices service

type DeleteServicesClient interface {
	Delete(ctx context.Context, in *DeleteServicesRequest, opts ...grpc.CallOption) (*DeleteServicesResponse, error)
}

type deleteServicesClient struct {
	cc *grpc.ClientConn
}

func NewDeleteServicesClient(cc *grpc.ClientConn) DeleteServicesClient {
	return &deleteServicesClient{cc}
}

func (c *deleteServicesClient) Delete(ctx context.Context, in *DeleteServicesRequest, opts ...grpc.CallOption) (*DeleteServicesResponse, error) {
	out := new(DeleteServicesResponse)
	err := grpc.Invoke(ctx, "/DeleteServices/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeleteServices service

type DeleteServicesServer interface {
	Delete(context.Context, *DeleteServicesRequest) (*DeleteServicesResponse, error)
}

func RegisterDeleteServicesServer(s *grpc.Server, srv DeleteServicesServer) {
	s.RegisterService(&_DeleteServices_serviceDesc, srv)
}

func _DeleteServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DeleteServices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteServicesServer).Delete(ctx, req.(*DeleteServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeleteServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DeleteServices",
	HandlerType: (*DeleteServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Delete",
			Handler:    _DeleteServices_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema.proto",
}

// Client API for WatchServices service

type WatchServicesClient interface {
	Watch(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (WatchServices_WatchClient, error)
}

type watchServicesClient struct {
	cc *grpc.ClientConn
}

func NewWatchServicesClient(cc *grpc.ClientConn) WatchServicesClient {
	return &watchServicesClient{cc}
}

func (c *watchServicesClient) Watch(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (WatchServices_WatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_WatchServices_serviceDesc.Streams[0], c.cc, "/WatchServices/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchServicesWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchServices_WatchClient interface {
	Recv() (*GetServicesResponse, error)
	grpc.ClientStream
}

type watchServicesWatchClient struct {
	grpc.ClientStream
}

func (x *watchServicesWatchClient) Recv() (*GetServicesResponse, error) {
	m := new(GetServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for WatchServices service

type WatchServicesServer interface {
	Watch(*GetServicesRequest, WatchServices_WatchServer) error
}

func RegisterWatchServicesServer(s *grpc.Server, srv WatchServicesServer) {
	s.RegisterService(&_WatchServices_serviceDesc, srv)
}

func _WatchServices_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WatchServicesServer).Watch(m, &watchServicesWatchServer{stream})
}

type WatchServices_WatchServer interface {
	Send(*GetServicesResponse) error
	grpc.ServerStream
}

type watchServicesWatchServer struct {
	grpc.ServerStream
}

func (x *watchServicesWatchServer) Send(m *GetServicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _WatchServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "WatchServices",
	HandlerType: (*WatchServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _WatchServices_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}

// Client API for StreamServices service

type StreamServicesClient interface {
	Stream(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (StreamServices_StreamClient, error)
}

type streamServicesClient struct {
	cc *grpc.ClientConn
}

func NewStreamServicesClient(cc *grpc.ClientConn) StreamServicesClient {
	return &streamServicesClient{cc}
}

func (c *streamServicesClient) Stream(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (StreamServices_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_StreamServices_serviceDesc.Streams[0], c.cc, "/StreamServices/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServicesStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StreamServices_StreamClient interface {
	Recv() (*GetServicesResponse, error)
	grpc.ClientStream
}

type streamServicesStreamClient struct {
	grpc.ClientStream
}

func (x *streamServicesStreamClient) Recv() (*GetServicesResponse, error) {
	m := new(GetServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamServices service

type StreamServicesServer interface {
	Stream(*GetServicesRequest, StreamServices_StreamServer) error
}

func RegisterStreamServicesServer(s *grpc.Server, srv StreamServicesServer) {
	s.RegisterService(&_StreamServices_serviceDesc, srv)
}

func _StreamServices_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetServicesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServicesServer).Stream(m, &streamServicesStreamServer{stream})
}

type StreamServices_StreamServer interface {
	Send(*GetServicesResponse) error
	grpc.ServerStream
}

type streamServicesStreamServer struct {
	grpc.ServerStream
}

func (x *streamServicesStreamServer) Send(m *GetServicesResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _StreamServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "StreamServices",
	HandlerType: (*StreamServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _StreamServices_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "schema.proto",
}

func init() { proto.RegisterFile("schema.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 5301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5c, 0x4b, 0x73, 0x1b, 0x49,
	0x72, 0x9e, 0xc6, 0x1b, 0x89, 0x07, 0xc1, 0xe6, 0xab, 0x45, 0xbd, 0x28, 0x88, 0xa2, 0x9e, 0x83,
	0xd1, 0x72, 0x66, 0xf6, 0xe9, 0xdd, 0x31, 0x45, 0x61, 0x20, 0xec, 0x40, 0xd2, 0x6c, 0x4b, 0x9a,
	0xf1, 0xac, 0x1f, 0x5a, 0x90, 0x6c, 0x82, 0x6d, 0x43, 0x0d, 0x0d, 0xba, 0xa8, 0x0d, 0xf9, 0x64,
	0xfb, 0x66, 0x5f, 0x1c, 0xf6, 0xc1, 0x17, 0x87, 0xc3, 0x77, 0x87, 0xc3, 0x27, 0x1f, 0xf7, 0xe6,
	0x8b, 0xff, 0xc5, 0x9e, 0xec, 0xf0, 0x0f, 0xf0, 0xc1, 0x47, 0x47, 0x66, 0x65, 0x55, 0x57, 0x75,
	0x37, 0x28, 0x69, 0x15, 0x1b, 0xb1, 0x27, 0xa2, 0xab, 0xbe, 0xcc, 0xca, 0xaa, 0xcc, 0xca, 0xca,
	0xce, 0xce, 0x22, 0x34, 0xe3, 0xc3, 0x93, 0xe0, 0xc5, 0xb8, 0xf7, 0x72, 0x3e, 0x13, 0xb3, 0xee,
	0x5f, 0x15, 0xa1, 0xd5, 0x8f, 0x8e, 0x5e, 0xce, 0xc2, 0x48, 0x3c, 0x8b, 0xc2, 0x59, 0xe4, 0xba,
	0x50, 0x3a, 0x19, 0xc7, 0x27, 0x9e, 0xb3, 0xe5, 0xdc, 0xa8, 0xfb, 0xf4, 0xdb, 0xbd, 0x02, 0xa5,
	0x3f, 0x0b, 0xa3, 0x23, 0xaf, 0xb0, 0xe5, 0xdc, 0x68, 0xef, 0xb6, 0x7a, 0x8a, 0xe2, 0x8b, 0x30,
	0x3a, 0xf2, 0xa9, 0xcb, 0xfd, 0x2e, 0x34, 0x26, 0x81, 0x78, 0x12, 0xcc, 0x5f, 0x85, 0x87, 0x41,
	0xec, 0x15, 0xb7, 0x9c, 0x1b, 0x8d, 0xdd, 0xd5, 0xde, 0x20, 0x69, 0x53, 0x44, 0xbe, 0x09, 0x74,
	0x3f, 0x83, 0x76, 0xf2, 0x78, 0xef, 0xf5, 0xf0, 0xc8, 0x2b, 0x11, 0xe9, 0x86, 0x41, 0x8a, 0xcd,
	0x9a, 0x3a, 0x05, 0x47, 0x06, 0x87, 0xf3, 0x60, 0x2c, 0x02, 0x3d, 0x76, 0x99, 0x19, 0xec, 0x5b,
	0xcd, 0x09, 0x03, 0x1b, 0x8e, 0x0c, 0x4e, 0x5f, 0x1e, 0x99, 0x0c, 0x2a, 0xcc, 0xe0, 0x99, 0xd5,
	0x9c, 0x30, 0xb0, 0xe1, 0xc8, 0xe0, 0x28, 0x98, 0x06, 0x06, 0x83, 0x2a, 0x33, 0xb8, 0x6f, 0x35,
	0x27, 0x0c, 0x6c, 0x78, 0xf7, 0x2f, 0x1d, 0x68, 0x0e, 0x8f, 0x68, 0xf9, 0x7f, 0x76, 0x1a, 0xcc,
	0x5f, 0xe7, 0xea, 0xe0, 0xbc, 0xa5, 0x83, 0x6a, 0x6f, 0x78, 0x64, 0xac, 0x7e, 0x07, 0x8a, 0xa7,
	0xf3, 0x29, 0xad, 0x7a, 0xdd, 0xc7, 0x9f, 0xc8, 0x22, 0x1a, 0xbf, 0x08, 0x68, 0x35, 0xeb, 0x3e,
	0xfd, 0x76, 0x37, 0xa1, 0x76, 0x1a, 0x07, 0x73, 0x6a, 0x2f, 0x53, 0xbb, 0x7e, 0xee, 0xfe, 0x85,
	0x03, 0xb5, 0xbd, 0xe9, 0x74, 0xf1, 0xf8, 0x2b, 0x50, 0x0e, 0x9f, 0x4f, 0x45, 0x40, 0x02, 0x94,
	0xfd, 0x52, 0x38, 0x12, 0x81, 0x6c, 0x9c, 0x88, 0x80, 0x46, 0xc6, 0xc6, 0x81, 0x08, 0xdc, 0x26,
	0x38, 0x31, 0x8f, 0xeb, 0xc4, 0x08, 0x39, 0x26, 0x3a, 0x1c, 0xd1, 0xf1, 0x4b, 0xc7, 0x4c, 0x77,
	0x4c, 0x74, 0x15, 0x6e, 0x1c, 0x88, 0xa0, 0x2b, 0xa0, 0xc9, 0x4b, 0xb2, 0x58, 0x0a, 0x35, 0xad,
	0x82, 0x31, 0x2d, 0xc4, 0xcd, 0x62, 0xc1, 0xb3, 0xa7, 0xdf, 0xee, 0x0d, 0x28, 0xbf, 0x9c, 0xcd,
	0x45, 0xcc, 0xd6, 0xe4, 0xf6, 0x98, 0xf3, 0x97, 0xd8, 0x48, 0xec, 0x7d, 0x09, 0xe8, 0xfe, 0xb3,
	0x03, 0xcb, 0x99, 0xce, 0xdc, 0xb1, 0xcf, 0x41, 0x6d, 0x32, 0x7f, 0x79, 0x68, 0x2c, 0x42, 0x15,
	0x9f, 0x71, 0x3e, 0xaa, 0x2b, 0x59, 0x0a, 0xea, 0xc2, 0xd5, 0xb8, 0x0c, 0x8d, 0xc9, 0x7c, 0xfc,
	0xf2, 0xe4, 0xdb, 0x29, 0x11, 0x96, 0xa8, 0x17, 0xb8, 0x69, 0x64, 0x03, 0x26, 0xbc, 0x4c, 0x09,
	0x00, 0xd7, 0xe5, 0x5f, 0x0a, 0xd0, 0x1a, 0xcd, 0x0e, 0xc7, 0xe2, 0x4c, 0xfb, 0xb8, 0x09, 0x95,
	0xf9, 0xf8, 0x28, 0x3c, 0x8d, 0x49, 0xb6, 0xc6, 0xee, 0x72, 0x6f, 0x14, 0x44, 0x13, 0x71, 0xf2,
	0xd5, 0x78, 0x7a, 0x2a, 0x17, 0xd4, 0x67, 0x80, 0xbb, 0x0e, 0x95, 0x58, 0xcc, 0x83, 0x40, 0x2d,
	0x19, 0x3f, 0xb9, 0x1e, 0x54, 0xff, 0x3c, 0x7c, 0xb9, 0x3f, 0x3b, 0x52, 0x66, 0xa3, 0x1e, 0x71,
	0xc0, 0xc3, 0x50, 0xbc, 0x66, 0xab, 0xa1, 0xdf, 0x6e, 0x17, 0x9a, 0xf8, 0xf7, 0x7e, 0x18, 0x8b,
	0x79, 0x78, 0x28, 0x48, 0x95, 0x75, 0xdf, 0x6a, 0x43, 0x8e, 0x87, 0xb3, 0xd3, 0x48, 0xcc, 0x5f,
	0xd3, 0x9e, 0xa8, 0xfb, 0xea, 0x91, 0xa8, 0xe5, 0xcf, 0x27, 0x62, 0x2c, 0x02, 0xaf, 0xc6, 0xd4,
	0x46, 0x9b, 0xbb, 0x0b, 0xab, 0xe6, 0xb3, 0x1e, 0xa9, 0x4e, 0xd8, 0xdc, 0xbe, 0xee, 0x7f, 0x14,
	0xa0, 0x93, 0x9e, 0x78, 0xee, 0x7a, 0x5d, 0xb2, 0xf6, 0x13, 0xf4, 0x08, 0x6e, 0x6c, 0xa9, 0xcb,
	0x50, 0x3a, 0x8d, 0x42, 0xb9, 0x44, 0xed, 0xdd, 0x06, 0xaf, 0xe6, 0xb3, 0x28, 0x14, 0x3e, 0x75,
	0xb8, 0x57, 0xa1, 0x75, 0x30, 0x8e, 0x03, 0xa2, 0xd3, 0xaa, 0x75, 0xfc, 0xa6, 0x6e, 0x44, 0xe5,
	0x5a, 0xa0, 0x89, 0xde, 0x05, 0x09, 0x08, 0x4d, 0xe4, 0x3c, 0xd4, 0x5f, 0x69, 0x2e, 0x72, 0x47,
	0xd4, 0x5e, 0x29, 0x0e, 0xba, 0x13, 0xa9, 0xab, 0x46, 0x27, 0x52, 0xf6, 0xa0, 0x8e, 0x9c, 0xfc,
	0x71, 0x34, 0x91, 0x4b, 0xd8, 0xd8, 0xed, 0xf4, 0x3e, 0x9f, 0xce, 0xc6, 0x82, 0x9a, 0xa4, 0xda,
	0x13, 0x88, 0xbb, 0x03, 0xe5, 0x39, 0x61, 0xeb, 0x0b, 0xb0, 0xb2, 0xbb, 0xfb, 0xd7, 0x0e, 0x2c,
	0xa5, 0xba, 0x16, 0x6d, 0x89, 0xe3, 0xf9, 0xec, 0x85, 0xde, 0x12, 0x8e, 0x5f, 0xc5, 0x67, 0xde,
	0x12, 0xd4, 0xa5, 0xb6, 0x04, 0x77, 0xa1, 0xd4, 0x6b, 0x50, 0x11, 0x33, 0x63, 0xc9, 0xca, 0x62,
	0x36, 0xd2, 0xcd, 0xc9, 0x22, 0x95, 0xc5, 0x0c, 0xcd, 0xff, 0xd7, 0x0e, 0x9c, 0xb7, 0xcf, 0x02,
	0x3f, 0xf8, 0xf6, 0x34, 0x88, 0xc5, 0xe7, 0xe1, 0x54, 0x04, 0xf3, 0x05, 0xca, 0x2d, 0x84, 0x47,
	0xbc, 0x11, 0xda, 0x3d, 0xf6, 0xad, 0x12, 0xef, 0x17, 0xc2, 0x23, 0xb7, 0x07, 0xc5, 0x71, 0x74,
	0xe4, 0x15, 0xb7, 0x8a, 0x37, 0x1a, 0xbb, 0x17, 0x7a, 0x67, 0xb0, 0xf7, 0x11, 0xe8, 0xde, 0x81,
	0xc2, 0x6c, 0xee, 0x95, 0xde, 0x02, 0x5e, 0x98, 0xcd, 0x91, 0x7b, 0x34, 0x13, 0x5e, 0xf9, 0x6d,
	0xb8, 0x47, 0x33, 0xd1, 0xfd, 0x9f, 0x16, 0xb4, 0x2c, 0x19, 0x73, 0xe7, 0xb4, 0x05, 0x55, 0x34,
	0xcc, 0xe7, 0x61, 0x9c, 0x3e, 0x03, 0x2a, 0xd8, 0x3e, 0x8c, 0xdd, 0x2e, 0xd4, 0x08, 0x81, 0x83,
	0x17, 0x6d, 0x08, 0x91, 0x3e, 0x9a, 0x89, 0x84, 0x4b, 0x44, 0xd3, 0xc9, 0x70, 0x89, 0xdc, 0xeb,
	0xd0, 0x50, 0x5c, 0x10, 0x55, 0xb6, 0x51, 0x75, 0x66, 0x34, 0x8c, 0x50, 0x5f, 0xa7, 0xf3, 0x29,
	0xca, 0x23, 0xb7, 0x7e, 0xf9, 0x74, 0x3e, 0x1d, 0xc6, 0xee, 0x06, 0x54, 0xb1, 0x19, 0x85, 0x90,
	0x7b, 0x1e, 0x51, 0x38, 0x34, 0xe3, 0xa7, 0x82, 0x37, 0x3b, 0xe2, 0x47, 0x42, 0xe1, 0xd1, 0x1c,
	0xea, 0x1a, 0xcf, 0xf6, 0x80, 0x1d, 0x13, 0xe1, 0x81, 0xc6, 0x0f, 0x34, 0x1e, 0xed, 0xa4, 0xa1,
	0xf1, 0x68, 0x56, 0x57, 0xa0, 0x89, 0x1d, 0x87, 0xb3, 0x48, 0x8c, 0xc3, 0x28, 0xf6, 0x9a, 0xd4,
	0xdb, 0x38, 0x9d, 0x4f, 0xf7, 0xb9, 0xc9, 0xbd, 0x01, 0x1d, 0x96, 0x2d, 0x81, 0xb5, 0x08, 0xd6,
	0x96, 0x42, 0x6a, 0xe4, 0x0e, 0x2c, 0x21, 0x32, 0x16, 0xe3, 0xb9, 0x88, 0x9f, 0xff, 0x32, 0x14,
	0x27, 0x5e, 0x9b, 0x80, 0xad, 0xd3, 0xf9, 0xf4, 0x09, 0xb5, 0x7e, 0x1d, 0x8a, 0x13, 0xf7, 0x43,
	0x58, 0x51, 0x1c, 0x4d, 0xec, 0x12, 0x61, 0x3b, 0x92, 0xa9, 0x01, 0xef, 0x02, 0xd2, 0x3f, 0x0f,
	0xa2, 0x23, 0x06, 0x76, 0xb4, 0x90, 0xfd, 0xe8, 0x48, 0x62, 0x6e, 0xc2, 0xb2, 0x62, 0x99, 0xe0,
	0x96, 0x4d, 0x29, 0x35, 0x54, 0xa9, 0x20, 0xf2, 0xdc, 0xad, 0xa2, 0x52, 0x41, 0xe4, 0x5e, 0x00,
	0x50, 0x1c, 0xc2, 0xc8, 0x5b, 0xa1, 0xae, 0x9a, 0x24, 0x1d, 0x46, 0xb8, 0x80, 0x78, 0x6e, 0xa2,
	0xe2, 0x56, 0xe5, 0x02, 0xe2, 0xe3, 0x30, 0xc6, 0x2d, 0x4b, 0x1d, 0xa8, 0xba, 0x35, 0xe9, 0xae,
	0xf1, 0x19, 0x75, 0xa7, 0x68, 0xa6, 0xc2, 0x5b, 0x4f, 0x68, 0x46, 0x42, 0xd3, 0xa0, 0xfa, 0x36,
	0x12, 0x1a, 0xd4, 0x9f, 0xa2, 0x99, 0x08, 0xcf, 0x4b, 0x68, 0x06, 0x09, 0x0d, 0xaa, 0xf0, 0x5c,
	0x42, 0x33, 0x90, 0xfe, 0x92, 0xba, 0xb4, 0x76, 0x36, 0xe5, 0xb9, 0x80, 0x8d, 0x5a, 0x37, 0xb7,
	0x60, 0x59, 0xc9, 0x99, 0x00, 0xcf, 0x13, 0x70, 0x89, 0x05, 0x36, 0x35, 0x4e, 0x58, 0x53, 0x39,
	0x17, 0xe4, 0x5a, 0x62, 0xbb, 0xa1, 0x9a, 0x8f, 0x60, 0x55, 0x73, 0x35, 0xd1, 0x17, 0x09, 0xbd,
	0xcc, 0x8c, 0x0d, 0x82, 0x6d, 0x20, 0x16, 0x86, 0x92, 0x2e, 0x25, 0xc2, 0x6a, 0x15, 0xdd, 0x06,
	0x57, 0xb3, 0x4d, 0x90, 0x97, 0x2d, 0x69, 0x35, 0x58, 0xab, 0x26, 0xf2, 0xb6, 0x48, 0x6b, 0x52,
	0x35, 0x91, 0x7b, 0x09, 0x1a, 0x9a, 0x4b, 0x18, 0x79, 0x57, 0xa8, 0xb3, 0xce, 0xe4, 0xc3, 0x08,
	0x83, 0x08, 0x15, 0xca, 0xa1, 0x5e, 0xbb, 0xc4, 0x1e, 0x54, 0xd3, 0x30, 0xa6, 0xcd, 0xa1, 0x00,
	0xa8, 0xdf, 0xab, 0x6c, 0x77, 0xdc, 0x86, 0x3a, 0x36, 0x79, 0x4c, 0x85, 0xb7, 0x6d, 0xf3, 0x18,
	0x09, 0x8b, 0x07, 0xea, 0xfb, 0x9a, 0xcd, 0x83, 0x83, 0x19, 0x0d, 0x99, 0x08, 0x6f, 0xc7, 0xe6,
	0x31, 0xb0, 0x79, 0xa0, 0xfe, 0xaf, 0xdb, 0x3c, 0xd0, 0x06, 0x6e, 0xc3, 0xb2, 0x86, 0x68, 0xf5,
	0xde, 0xe0, 0x0d, 0xc5, 0x1d, 0x5a, 0xbf, 0xbb, 0xb0, 0x66, 0xce, 0x2b, 0x21, 0xb8, 0x49, 0x04,
	0x2b, 0xc6, 0x04, 0x35, 0xcd, 0x5d, 0x58, 0xd5, 0x34, 0xa6, 0xa6, 0x6f, 0x11, 0x89, 0xab, 0xfa,
	0x0c, 0x55, 0x7f, 0x0f, 0x3c, 0x6b, 0x14, 0x93, 0xea, 0x36, 0x51, 0xad, 0x19, 0x03, 0x19, 0x84,
	0x77, 0x40, 0xb3, 0x33, 0xb4, 0x7f, 0xc7, 0x9e, 0x8c, 0x56, 0xff, 0xc7, 0xb0, 0x6e, 0x0d, 0x93,
	0x50, 0x7c, 0x98, 0x99, 0x8d, 0x26, 0xb2, 0x54, 0x1f, 0x79, 0x3d, 0x32, 0x8d, 0x44, 0xf5, 0x11,
	0xb9, 0x32, 0x93, 0x6b, 0x18, 0x79, 0x1f, 0x11, 0xa8, 0x65, 0xb0, 0x1b, 0x46, 0xee, 0x96, 0x3c,
	0x14, 0xef, 0xd2, 0xb1, 0x95, 0x3e, 0x35, 0xe9, 0x18, 0xbc, 0x44, 0xc7, 0xe0, 0x77, 0x72, 0x01,
	0x78, 0xf0, 0x6d, 0xc9, 0x83, 0x6f, 0x37, 0x9f, 0x03, 0x1e, 0x75, 0xff, 0x09, 0x50, 0xdf, 0x9b,
	0x4e, 0xcf, 0x38, 0xe6, 0x96, 0xa1, 0x14, 0xaa, 0x33, 0xae, 0xec, 0x17, 0xc3, 0x61, 0x2c, 0xdf,
	0x32, 0xd4, 0xa1, 0x86, 0x6f, 0x19, 0x68, 0xad, 0x84, 0x9b, 0x0a, 0x0e, 0xa8, 0x8b, 0xe1, 0x48,
	0x24, 0xaf, 0x28, 0x65, 0xe3, 0x15, 0x85, 0x70, 0x13, 0x19, 0x9e, 0x22, 0x6e, 0x20, 0x92, 0xb7,
	0x96, 0xaa, 0xf1, 0xd6, 0x22, 0xc7, 0x8d, 0xbc, 0xda, 0x56, 0x51, 0x8e, 0x1b, 0xb9, 0x1e, 0xd4,
	0x42, 0xb5, 0x62, 0x75, 0x6a, 0xae, 0x84, 0x72, 0xa9, 0x96, 0xa1, 0x14, 0xa3, 0x90, 0xf2, 0x60,
	0x2a, 0xc6, 0x52, 0xc8, 0x98, 0x84, 0x94, 0x87, 0x52, 0x29, 0x66, 0x21, 0x63, 0x14, 0xb2, 0xc9,
	0x38, 0x29, 0x64, 0x4c, 0x42, 0xb6, 0x18, 0xc7, 0x42, 0xc6, 0x28, 0x64, 0x9b, 0x71, 0x03, 0xc6,
	0xa1, 0x90, 0x4b, 0x8c, 0x43, 0x21, 0x2f, 0x02, 0xc4, 0x89, 0x89, 0xcb, 0xb3, 0xa3, 0x1e, 0x6b,
	0xc3, 0xde, 0x86, 0x76, 0x6c, 0xef, 0x02, 0x79, 0x6c, 0x34, 0x63, 0xd3, 0xfc, 0xbb, 0xd0, 0x8a,
	0x2d, 0x0b, 0x76, 0xe5, 0x1e, 0x8c, 0x0d, 0xbb, 0xbd, 0x09, 0xcb, 0x71, 0xc6, 0xd2, 0x57, 0xa4,
	0xdf, 0x8c, 0x6d, 0x13, 0xbf, 0x04, 0x8d, 0xd8, 0xb0, 0xd4, 0x55, 0x16, 0x4a, 0xdb, 0xe7, 0x35,
	0x58, 0x8a, 0x53, 0xd6, 0xbc, 0x96, 0x48, 0xa5, 0x61, 0x72, 0x49, 0x23, 0x6f, 0x9d, 0x4c, 0xb3,
	0x18, 0xcb, 0xf5, 0x8f, 0xd5, 0xfa, 0x6f, 0x48, 0x77, 0x18, 0xeb, 0xf5, 0x3f, 0xc0, 0xf5, 0xc7,
	0x73, 0xa5, 0xe6, 0x17, 0x0f, 0xe4, 0xfa, 0x1f, 0xd0, 0xfa, 0x9f, 0xa3, 0xb6, 0xd2, 0x01, 0xaf,
	0xff, 0x31, 0xe2, 0x36, 0x29, 0xa0, 0x2c, 0x1e, 0x0f, 0xf9, 0x7d, 0x14, 0x71, 0xe7, 0xf9, 0xd5,
	0x53, 0xe3, 0xa6, 0x82, 0x4e, 0x06, 0xc4, 0x49, 0x3d, 0xc9, 0xf7, 0xd6, 0x8b, 0xc6, 0x7b, 0x2b,
	0xe1, 0x26, 0x82, 0x1c, 0x3d, 0xe2, 0x06, 0x22, 0x79, 0x95, 0xbd, 0x9c, 0xbc, 0xca, 0xf2, 0xb8,
	0xd2, 0x89, 0xd3, 0xb8, 0x34, 0x99, 0x63, 0xd3, 0x7d, 0x3b, 0x7e, 0xe5, 0x58, 0x4e, 0xe6, 0x1a,
	0xd4, 0xc2, 0xf8, 0x79, 0xf0, 0x2a, 0x98, 0xbf, 0x26, 0xc7, 0xdd, 0xd8, 0x85, 0xde, 0x30, 0x52,
	0x11, 0x62, 0x35, 0x8c, 0xfb, 0xd8, 0xe5, 0x5e, 0x85, 0x6a, 0x18, 0x3f, 0x8f, 0x67, 0x2f, 0x02,
	0x72, 0xde, 0x36, 0xaa, 0x12, 0xc6, 0x4f, 0x66, 0x2f, 0x02, 0x06, 0x45, 0xb3, 0x28, 0x20, 0xff,
	0x9d, 0x01, 0x3d, 0x9a, 0x45, 0x81, 0x7b, 0x03, 0x6a, 0xb1, 0x1a, 0xf0, 0x1a, 0xa1, 0x5a, 0xbd,
	0x27, 0x62, 0x1e, 0x46, 0x13, 0x35, 0x66, 0xcc, 0x63, 0xee, 0x40, 0x35, 0xe6, 0x31, 0x77, 0xf2,
	0x80, 0x95, 0x58, 0x0e, 0x2b, 0x71, 0x34, 0xec, 0xf5, 0x05, 0x38, 0x1a, 0xf9, 0x26, 0xd4, 0x0e,
	0xd4, 0xc8, 0x37, 0x38, 0x3a, 0xbf, 0x37, 0x9b, 0x4d, 0x83, 0xb1, 0xf2, 0x12, 0xd5, 0x03, 0x1e,
	0xfa, 0x3a, 0x54, 0x0f, 0x78, 0xe8, 0x9b, 0xb9, 0xc8, 0xca, 0x81, 0x1c, 0x5b, 0x02, 0x69, 0xec,
	0x5b, 0x8b, 0x80, 0x34, 0xf8, 0x75, 0xa8, 0x1d, 0xab, 0xc1, 0x6f, 0x13, 0xb2, 0x29, 0xdf, 0x7f,
	0xd4, 0xd0, 0xc7, 0x3c, 0xf4, 0x35, 0xa8, 0x1e, 0xf3, 0xd0, 0x77, 0x72, 0x70, 0x95, 0x63, 0x39,
	0xb0, 0x84, 0xd1, 0xc0, 0x1f, 0xe6, 0xc3, 0x68, 0xd8, 0x0b, 0xd2, 0xad, 0xf6, 0xc8, 0x29, 0x42,
	0x4f, 0x7b, 0x3f, 0xe9, 0x52, 0x37, 0xc9, 0xa5, 0x7e, 0x94, 0xe9, 0x44, 0x77, 0x7a, 0x41, 0xba,
	0xd3, 0xbb, 0x59, 0x4a, 0x74, 0xa5, 0xff, 0xd0, 0x80, 0x16, 0xbf, 0x57, 0x9c, 0xe1, 0x4e, 0x6f,
	0x43, 0x3d, 0x3c, 0x52, 0xb3, 0xce, 0x7f, 0x21, 0xaa, 0x85, 0x47, 0x3c, 0xf1, 0x9b, 0x80, 0xbf,
	0xe5, 0xcc, 0x8b, 0xb9, 0xd8, 0x6a, 0x78, 0x24, 0x27, 0xcf, 0x50, 0x9a, 0x7d, 0x69, 0x21, 0x94,
	0x16, 0xc0, 0x88, 0x37, 0xcb, 0x0b, 0xe3, 0xcd, 0xca, 0xc2, 0x78, 0xb3, 0xba, 0x30, 0xde, 0xac,
	0x2d, 0x8c, 0x37, 0xeb, 0x0b, 0xe3, 0x4d, 0x78, 0x43, 0xbc, 0xd9, 0x78, 0xdb, 0x78, 0xb3, 0xf9,
	0xf6, 0xf1, 0x66, 0xeb, 0x9d, 0xe2, 0xcd, 0xf6, 0xdb, 0xc7, 0x9b, 0x4b, 0x6f, 0x1d, 0x6f, 0x76,
	0xde, 0x18, 0x6f, 0x2e, 0x9f, 0x15, 0x6f, 0xba, 0xe9, 0x78, 0xf3, 0xc7, 0xb0, 0x14, 0x70, 0x3a,
	0x53, 0x19, 0xd7, 0x0a, 0xa7, 0x7c, 0xad, 0x74, 0x32, 0xdb, 0x42, 0x5b, 0x83, 0xa5, 0xa1, 0xfd,
	0x08, 0x92, 0x16, 0x69, 0x6e, 0xab, 0x67, 0x50, 0xb7, 0x34, 0x96, 0x4c, 0xcf, 0x22, 0x26, 0x03,
	0x5c, 0x7b, 0x2b, 0x62, 0x65, 0x8c, 0x27, 0xb3, 0x58, 0xa0, 0x31, 0xf2, 0x8b, 0x0c, 0x3e, 0x4a,
	0x63, 0xa4, 0x0e, 0x34, 0x46, 0x7e, 0x91, 0xc1, 0x67, 0x36, 0x46, 0xea, 0x9a, 0xea, 0x17, 0x19,
	0x7c, 0x94, 0xc6, 0xc8, 0x1d, 0xfa, 0x45, 0x46, 0xf6, 0x24, 0xe3, 0x4c, 0x04, 0xbf, 0xc2, 0x10,
	0xcd, 0x20, 0xa1, 0x41, 0x63, 0x3c, 0x9f, 0xd0, 0xb0, 0x31, 0x52, 0x97, 0xb6, 0x31, 0xf9, 0xa2,
	0xd2, 0xc4, 0x46, 0xd3, 0x18, 0x95, 0x9c, 0x09, 0x50, 0xbe, 0xa3, 0x2c, 0xb1, 0xc0, 0xa6, 0x31,
	0x12, 0xd6, 0x34, 0x2f, 0xf9, 0x8e, 0xd2, 0xc6, 0x76, 0xdb, 0x18, 0x35, 0x57, 0x13, 0x2d, 0xdf,
	0x53, 0x96, 0x99, 0xb1, 0x6d, 0x8c, 0x44, 0x90, 0x98, 0xd8, 0x56, 0x22, 0xac, 0x69, 0x8c, 0x9a,
	0x6d, 0x82, 0xbc, 0x62, 0x49, 0x6b, 0x1a, 0xa3, 0x54, 0x4d, 0xe4, 0x75, 0xa5, 0x31, 0x92, 0x6a,
	0xc8, 0x18, 0x35, 0x97, 0x30, 0xf2, 0xae, 0x4a, 0x63, 0x64, 0xf2, 0x61, 0xe4, 0xde, 0x54, 0xc9,
	0x5e, 0x79, 0xe4, 0xad, 0x58, 0xc9, 0x5e, 0x36, 0x03, 0x89, 0x50, 0x31, 0xee, 0x35, 0x8e, 0x50,
	0x2d, 0xff, 0x69, 0xc6, 0xb8, 0x3b, 0xb9, 0x00, 0x23, 0xc6, 0xbd, 0x9e, 0xcf, 0x01, 0x1d, 0xf3,
	0xff, 0x95, 0xc1, 0xcd, 0x4a, 0xf0, 0x3b, 0xec, 0x9d, 0x29, 0x75, 0xcd, 0xde, 0xb9, 0xec, 0x57,
	0xf0, 0x51, 0x6e, 0x08, 0xea, 0x50, 0xde, 0x99, 0x73, 0xda, 0xbc, 0x21, 0x38, 0x13, 0xce, 0x21,
	0x74, 0x45, 0x26, 0xc2, 0xad, 0x14, 0x79, 0xcd, 0x4e, 0x91, 0x2b, 0x1a, 0xf6, 0xce, 0x4c, 0x33,
	0x10, 0x56, 0xee, 0x1c, 0xec, 0xdc, 0xb9, 0x96, 0x2d, 0xf2, 0x1a, 0x32, 0xfe, 0x26, 0xd9, 0xc8,
	0x22, 0x94, 0x6c, 0xd8, 0xd9, 0xa4, 0xce, 0x3a, 0x8b, 0x37, 0x8c, 0x30, 0x4e, 0x56, 0x39, 0xf5,
	0x50, 0x66, 0x78, 0xa8, 0x9b, 0x5a, 0x86, 0xb1, 0x99, 0x72, 0xc7, 0xd9, 0xb5, 0xad, 0x94, 0x3b,
	0x4e, 0xd0, 0xa0, 0x9f, 0x0a, 0x72, 0xb3, 0x09, 0xfd, 0x48, 0xa4, 0x73, 0xfa, 0x9d, 0x4c, 0x4e,
	0xdf, 0xa0, 0x9f, 0x08, 0x0a, 0xc2, 0x13, 0xfa, 0x81, 0x48, 0xa7, 0xfc, 0xdd, 0x74, 0xca, 0xdf,
	0x92, 0x5f, 0x26, 0x70, 0x0c, 0xf9, 0x23, 0xdc, 0x7c, 0x86, 0xfc, 0x08, 0x59, 0x25, 0x48, 0x33,
	0x99, 0x02, 0xc5, 0x95, 0x64, 0xeb, 0x6b, 0x64, 0xa9, 0xb9, 0x9b, 0x82, 0x0c, 0xfe, 0x2a, 0x19,
	0xfc, 0xfa, 0x62, 0x14, 0x5a, 0xfd, 0x35, 0x69, 0xf5, 0x1b, 0x67, 0xf0, 0x42, 0xd3, 0xff, 0xef,
	0x6d, 0x68, 0xab, 0x4f, 0x15, 0xbf, 0xdb, 0x66, 0x7f, 0x4b, 0x7f, 0x2e, 0x29, 0xf3, 0x17, 0x22,
	0xe3, 0xab, 0x81, 0x8a, 0xe0, 0xf8, 0x7b, 0xc9, 0x79, 0xa8, 0xcb, 0x2f, 0x24, 0x49, 0xae, 0xb3,
	0x26, 0x1b, 0x86, 0x31, 0xbd, 0x92, 0xc9, 0xce, 0x24, 0xe3, 0xc9, 0x70, 0xb4, 0xa4, 0x84, 0x56,
	0xe7, 0x3d, 0x99, 0x76, 0x24, 0x0c, 0xda, 0x24, 0xfb, 0x59, 0x57, 0xbd, 0x81, 0x41, 0xab, 0x73,
	0xa0, 0x4c, 0x3b, 0x30, 0x69, 0x93, 0x4c, 0x68, 0x5d, 0xf5, 0x62, 0xb0, 0xbb, 0xc4, 0xdd, 0xa9,
	0x88, 0xa5, 0x2d, 0x9b, 0xf5, 0x19, 0xd1, 0x83, 0x95, 0x44, 0xfe, 0x74, 0x56, 0x74, 0x59, 0x4f,
	0x44, 0xe3, 0xef, 0x80, 0xcb, 0xf8, 0x6c, 0xd0, 0xd2, 0x91, 0x3d, 0xc6, 0x31, 0xf1, 0x31, 0xac,
	0x1b, 0xdc, 0xb3, 0x19, 0xd2, 0x15, 0x3d, 0x80, 0x41, 0x74, 0x03, 0x98, 0x51, 0x26, 0x80, 0x61,
	0xe1, 0xf5, 0x91, 0xf1, 0x11, 0xac, 0x1a, 0xec, 0xd3, 0xd9, 0xd2, 0x44, 0x7a, 0x4d, 0x60, 0xa8,
	0x52, 0x45, 0x35, 0x4a, 0x95, 0x11, 0xbd, 0x18, 0x27, 0xdc, 0x74, 0xe6, 0xb4, 0xa1, 0xd9, 0x48,
	0xcf, 0xc2, 0x1f, 0xc5, 0x92, 0xfc, 0x69, 0x9d, 0x5b, 0xa4, 0x67, 0x51, 0xdd, 0x49, 0x16, 0x55,
	0x51, 0xb0, 0x67, 0x51, 0x00, 0x9d, 0x4b, 0x55, 0xf4, 0xd2, 0xb3, 0x24, 0xdd, 0x2a, 0xa3, 0x0a,
	0xba, 0x3f, 0x30, 0xe9, 0x75, 0x5e, 0x55, 0xd1, 0x0f, 0x2c, 0xfa, 0x24, 0xbb, 0x0a, 0xba, 0x1f,
	0xb7, 0x48, 0x47, 0x01, 0x52, 0x39, 0xd6, 0x25, 0x6e, 0x37, 0xd3, 0x64, 0xc6, 0x5c, 0xd2, 0x99,
	0x56, 0x37, 0x99, 0x94, 0x69, 0x4b, 0x8a, 0x22, 0x9b, 0x6f, 0x5d, 0xe6, 0x2e, 0x43, 0xd1, 0x9f,
	0xc2, 0x86, 0x39, 0x42, 0x36, 0xeb, 0xba, 0x9a, 0x0c, 0x62, 0x90, 0xdd, 0x02, 0xc5, 0x2b, 0x93,
	0x7b, 0x55, 0x93, 0xd0, 0x0a, 0xff, 0x0e, 0xac, 0x99, 0x43, 0xa4, 0x33, 0xb0, 0xc6, 0x2c, 0x34,
	0x89, 0xa9, 0x62, 0x95, 0x87, 0xd5, 0x2a, 0x26, 0xe7, 0x6b, 0x72, 0xd4, 0xd9, 0xd8, 0x66, 0xc2,
	0x4a, 0x26, 0xd9, 0x0f, 0x43, 0xf1, 0x3a, 0x49, 0xc6, 0x56, 0xf0, 0x51, 0x1e, 0xab, 0xd4, 0x91,
	0x24, 0x61, 0x09, 0xc8, 0xc7, 0x2a, 0x75, 0xe9, 0xe4, 0x2b, 0xd1, 0xc8, 0x63, 0x95, 0x3b, 0x54,
	0xd2, 0xb5, 0x2a, 0x7b, 0x02, 0x4d, 0xa3, 0x93, 0xad, 0x44, 0x33, 0x48, 0x68, 0x92, 0x24, 0x6b,
	0x55, 0xf6, 0x50, 0x9c, 0x49, 0x5d, 0xa9, 0xe4, 0x2a, 0x7d, 0xba, 0x35, 0xe3, 0x4c, 0x25, 0x67,
	0x3a, 0xa9, 0xba, 0xc4, 0x02, 0x9b, 0x71, 0x26, 0x61, 0xb3, 0xc9, 0xd4, 0x36, 0xb6, 0xdb, 0x71,
	0xa6, 0xe6, 0x9a, 0x4d, 0xa2, 0x2e, 0x33, 0x63, 0x3b, 0xce, 0x24, 0x82, 0x74, 0xf2, 0x94, 0x84,
	0x35, 0xe3, 0x4c, 0xcd, 0x36, 0x9d, 0x34, 0x55, 0xd2, 0x9a, 0x71, 0xa6, 0x54, 0x8d, 0x4a, 0x96,
	0x4a, 0xd5, 0x50, 0x54, 0xa1, 0xb9, 0xe8, 0x24, 0x69, 0x9d, 0xc9, 0xe9, 0xcb, 0xd8, 0x92, 0xf9,
	0x75, 0x1b, 0x75, 0x7b, 0x37, 0x99, 0xa5, 0x6a, 0x1e, 0xc6, 0xb8, 0xc9, 0x2c, 0x20, 0xea, 0xfa,
	0x3b, 0x89, 0x30, 0xaa, 0x1d, 0x75, 0x9e, 0xe6, 0x39, 0x15, 0xde, 0x6e, 0x96, 0xe7, 0x48, 0x64,
	0x78, 0xa2, 0x2d, 0x7c, 0x9c, 0xe5, 0x39, 0x92, 0xbe, 0xdf, 0x82, 0x4e, 0x84, 0xf7, 0x49, 0x96,
	0xe7, 0x20, 0xcb, 0x13, 0x6d, 0xe5, 0xd3, 0x2c, 0x4f, 0xb4, 0x99, 0x8f, 0x61, 0xcd, 0x82, 0x6a,
	0x93, 0xf8, 0x2e, 0x7f, 0x8c, 0x37, 0x3a, 0xb5, 0x5d, 0xfc, 0x10, 0xce, 0xa5, 0xd7, 0x21, 0x21,
	0xfc, 0x1e, 0x11, 0x6e, 0xa4, 0x16, 0x44, 0xd3, 0x7e, 0x1f, 0x3c, 0x8b, 0xd6, 0xb4, 0x96, 0xef,
	0x13, 0xe9, 0xba, 0xd9, 0x6f, 0x98, 0xcc, 0x67, 0x70, 0x21, 0x33, 0xaa, 0x49, 0xfd, 0x03, 0xa2,
	0x3e, 0x97, 0x1a, 0xd8, 0x60, 0xf0, 0x09, 0x58, 0xac, 0x0d, 0x8b, 0xfa, 0x61, 0x76, 0xb2, 0xda,
	0xac, 0x7e, 0x04, 0x9b, 0x99, 0x61, 0x13, 0xca, 0x1f, 0xe5, 0xce, 0x56, 0x13, 0x67, 0x4c, 0x2b,
	0xf2, 0x7e, 0x8f, 0xcc, 0xcf, 0x36, 0xad, 0x08, 0x5d, 0x6c, 0x66, 0x94, 0x30, 0xf2, 0x7e, 0x4c,
	0xe0, 0xe5, 0x14, 0x7b, 0x79, 0x5e, 0x71, 0x9d, 0x04, 0x9a, 0xeb, 0x4f, 0xe4, 0x79, 0xc1, 0x2d,
	0xf2, 0xbc, 0x52, 0xdd, 0x68, 0xa4, 0x9f, 0xc9, 0xf3, 0x82, 0x9b, 0xf8, 0xbc, 0x52, 0x80, 0xa9,
	0xf0, 0x7e, 0xdf, 0xa2, 0x97, 0xe7, 0x55, 0xd2, 0x1d, 0x78, 0x7b, 0x16, 0x3d, 0x9f, 0x57, 0x0a,
	0x30, 0x11, 0xde, 0x3d, 0x8b, 0x7e, 0x60, 0xd1, 0xa3, 0xf1, 0xed, 0x5b, 0xf4, 0x7c, 0x5e, 0x29,
	0x80, 0xb6, 0x9c, 0xfb, 0x6c, 0xa2, 0xb2, 0xdd, 0x3c, 0xaf, 0x8c, 0xb9, 0x24, 0xf0, 0xbe, 0xf4,
	0xf4, 0xc9, 0xa4, 0xcc, 0xf3, 0x4a, 0x51, 0x98, 0x06, 0xf2, 0x39, 0x3b, 0x23, 0x5d, 0x5f, 0x62,
	0x9c, 0x57, 0xe6, 0x08, 0x26, 0xcd, 0xc0, 0xaa, 0x49, 0xc9, 0x9c, 0x57, 0x8a, 0x2c, 0x31, 0x88,
	0x07, 0xd6, 0x24, 0xcc, 0xf3, 0xca, 0x1c, 0x22, 0xc1, 0x0f, 0xd3, 0xb3, 0x30, 0xcf, 0x2b, 0xad,
	0xe2, 0xc8, 0xfb, 0x29, 0x7b, 0x2d, 0x56, 0x31, 0x9d, 0x57, 0x26, 0xc7, 0x30, 0xf2, 0xbe, 0x90,
	0xe7, 0x55, 0xc2, 0x8a, 0x7d, 0x9b, 0x51, 0x4f, 0x83, 0xc6, 0x32, 0x62, 0x9f, 0x61, 0x34, 0xb3,
	0x6f, 0x33, 0x81, 0x68, 0x36, 0x0f, 0xad, 0xb9, 0x50, 0xbb, 0xf2, 0x6d, 0x26, 0x74, 0x2a, 0xbc,
	0x47, 0x59, 0x9e, 0xec, 0xdb, 0x6c, 0x60, 0xe0, 0x3d, 0xce, 0xf2, 0x54, 0xbe, 0xcd, 0x84, 0x4e,
	0x84, 0xf7, 0x65, 0x96, 0xe7, 0x20, 0xcb, 0x13, 0xcd, 0xeb, 0x67, 0x59, 0x9e, 0xca, 0xb7, 0x99,
	0x50, 0x6d, 0x39, 0x7e, 0xb6, 0xd0, 0xc8, 0xf2, 0x6d, 0xa9, 0x75, 0x48, 0x08, 0x9f, 0xf0, 0x6e,
	0xb7, 0x17, 0xc4, 0xf2, 0x6d, 0x26, 0xad, 0x69, 0x48, 0x4f, 0xd9, 0xb7, 0x19, 0xfd, 0x29, 0xdf,
	0x96, 0x1e, 0xd5, 0xa4, 0x7e, 0xc6, 0xbe, 0xcd, 0x1e, 0x38, 0xe5, 0xdb, 0x4c, 0x06, 0x89, 0x81,
	0x7d, 0x95, 0x9d, 0xac, 0xe5, 0xdb, 0xd2, 0xc3, 0x26, 0x94, 0x5f, 0xe7, 0xce, 0xd6, 0xf2, 0x6d,
	0x96, 0x69, 0x45, 0xde, 0x1f, 0xb0, 0x6f, 0x33, 0x4d, 0x2b, 0x32, 0xb6, 0x63, 0x32, 0x4a, 0x18,
	0x79, 0xdf, 0xb0, 0x6f, 0xb3, 0xd9, 0x0f, 0x23, 0xf7, 0x7b, 0xb0, 0x91, 0x57, 0x03, 0x86, 0xb6,
	0xfb, 0xf3, 0xec, 0x2a, 0x1a, 0xe7, 0xf3, 0x0f, 0xec, 0xf5, 0xb7, 0xce, 0xe9, 0x3f, 0xcc, 0x4e,
	0xc6, 0x3c, 0xaf, 0x17, 0x8d, 0x39, 0x15, 0xde, 0x1f, 0x2d, 0x1e, 0x73, 0x24, 0x16, 0x8e, 0x89,
	0xb6, 0xfe, 0xc7, 0x8b, 0xc7, 0x44, 0x9b, 0x5f, 0x34, 0xe6, 0x44, 0x78, 0x7f, 0xb2, 0x78, 0xcc,
	0xc1, 0xe2, 0x31, 0x71, 0x2f, 0x3c, 0x5f, 0x3c, 0x26, 0xee, 0x89, 0x7d, 0xb8, 0x98, 0x4b, 0xaa,
	0x4d, 0xfc, 0x17, 0x44, 0x7f, 0x21, 0x0f, 0xa4, 0xed, 0xfc, 0xa7, 0x70, 0x65, 0xd1, 0x3a, 0x27,
	0x8c, 0xc6, 0xc4, 0xe8, 0xf2, 0x82, 0x05, 0xd7, 0xbc, 0x1e, 0xc0, 0x56, 0x2e, 0x2f, 0xd3, 0xfa,
	0x0f, 0x88, 0xd5, 0xa5, 0x3c, 0x9c, 0xb1, 0x05, 0x1e, 0xc3, 0xf6, 0x42, 0xa9, 0x4c, 0x6e, 0x87,
	0xc4, 0xed, 0xca, 0x02, 0xc1, 0x0c, 0x86, 0xf7, 0x21, 0x77, 0x48, 0x63, 0x87, 0x1c, 0x2d, 0x5e,
	0x2c, 0xbd, 0x4d, 0xbe, 0x80, 0xee, 0x42, 0xb1, 0x12, 0x4e, 0xc1, 0x99, 0xab, 0xa5, 0x99, 0x2d,
	0xdc, 0x1a, 0x91, 0x77, 0x4c, 0xdb, 0x29, 0x7f, 0x6b, 0x44, 0xee, 0x4f, 0xe0, 0xfc, 0x42, 0x29,
	0xc2, 0xc8, 0x9b, 0x10, 0xf1, 0xb9, 0x05, 0xc3, 0x0f, 0x23, 0xf7, 0x8a, 0x4c, 0x3a, 0x9d, 0x50,
	0xa2, 0x68, 0xa9, 0x67, 0x27, 0x83, 0x64, 0xc2, 0xe9, 0x32, 0x25, 0x9c, 0xc2, 0x7c, 0x44, 0x61,
	0x36, 0x47, 0x1e, 0xb8, 0x13, 0xff, 0x74, 0x01, 0x8f, 0x68, 0x26, 0xba, 0xff, 0x55, 0x83, 0xe5,
	0x4c, 0xc2, 0x26, 0x37, 0xd7, 0x74, 0x35, 0x5d, 0x36, 0x67, 0x96, 0x7a, 0xaa, 0xca, 0xb9, 0x6b,
	0x99, 0xca, 0x39, 0x13, 0xa5, 0x8b, 0xe7, 0xae, 0xa6, 0x8b, 0xe7, 0xb2, 0xbc, 0x22, 0xf7, 0x56,
	0x5e, 0xfd, 0x9c, 0x09, 0x34, 0x4a, 0xe8, 0xb6, 0xa1, 0x7a, 0x1a, 0x85, 0x3a, 0xaf, 0x94, 0xaa,
	0x33, 0xad, 0x60, 0xdf, 0x30, 0x76, 0x77, 0xa0, 0x46, 0x28, 0x95, 0x60, 0x4a, 0xc1, 0x88, 0x05,
	0x8a, 0xa7, 0xb9, 0xc9, 0x2a, 0x86, 0x5c, 0x6e, 0x91, 0x7b, 0x1b, 0x1a, 0x8a, 0x9b, 0x2a, 0x6c,
	0x48, 0x21, 0xeb, 0xcc, 0x70, 0x18, 0x51, 0xa9, 0x84, 0xae, 0x74, 0xa8, 0xf9, 0xa5, 0x30, 0x1e,
	0xc6, 0xee, 0x1a, 0x54, 0xc2, 0xa4, 0xd6, 0xa1, 0xe6, 0x97, 0x43, 0x2a, 0x76, 0xb8, 0x02, 0x49,
	0x59, 0x2b, 0x92, 0x34, 0xe9, 0x83, 0x78, 0x43, 0xb7, 0x0d, 0x63, 0xbb, 0x1c, 0x16, 0x19, 0xb4,
	0x52, 0xe5, 0xb0, 0x19, 0x3e, 0x53, 0x99, 0x9e, 0x35, 0xf9, 0x8c, 0x72, 0x6a, 0x6f, 0x97, 0x72,
	0x6a, 0x6f, 0x2d, 0x3e, 0x13, 0x41, 0x29, 0x24, 0x93, 0xcf, 0x40, 0x64, 0xcb, 0x73, 0x97, 0x73,
	0xca, 0x73, 0xed, 0x79, 0xc9, 0xb4, 0x91, 0x35, 0xaf, 0x08, 0x5f, 0x80, 0xad, 0x79, 0xa9, 0xe4,
	0x91, 0xe3, 0xb7, 0xcd, 0xa9, 0x0d, 0x23, 0x7c, 0x2d, 0x7f, 0xa5, 0x16, 0x68, 0x55, 0x96, 0xc5,
	0xbe, 0xe2, 0xc5, 0xd1, 0x95, 0xbe, 0x2a, 0x73, 0xa4, 0x2a, 0x7d, 0x71, 0x51, 0x34, 0x1d, 0x67,
	0x8d, 0x14, 0xdd, 0x48, 0xd8, 0xe5, 0xc3, 0x1b, 0xa9, 0xf2, 0x61, 0x4d, 0xc7, 0xd9, 0x22, 0x45,
	0x37, 0x10, 0x76, 0x65, 0xf1, 0xb9, 0x54, 0x65, 0x71, 0x22, 0x67, 0xe4, 0x6d, 0xd2, 0x4c, 0x58,
	0xce, 0xc8, 0xdd, 0x82, 0xe6, 0x2b, 0x73, 0xa2, 0xe7, 0xa9, 0x1b, 0x5e, 0x25, 0x93, 0xfc, 0xc8,
	0x2c, 0x4b, 0xbe, 0xc0, 0xe5, 0xe8, 0x49, 0x3d, 0x31, 0x6f, 0x64, 0xa3, 0x2e, 0xf9, 0xba, 0xaa,
	0x4b, 0xbe, 0xb8, 0x08, 0x2c, 0xfb, 0xdd, 0x6d, 0xe9, 0x5e, 0x2e, 0x91, 0x6b, 0xc8, 0xcb, 0xd9,
	0x92, 0x87, 0xe9, 0x92, 0x87, 0xb9, 0xbc, 0x10, 0x84, 0x4e, 0x66, 0x5b, 0x3a, 0x99, 0xad, 0xc5,
	0x9c, 0xd0, 0xcf, 0xfc, 0x53, 0x09, 0x3a, 0x69, 0x59, 0x72, 0xdd, 0xcc, 0x06, 0x50, 0x79, 0xb3,
	0x72, 0x33, 0x8e, 0x5f, 0xc1, 0x47, 0x99, 0xef, 0xa1, 0x0e, 0xe5, 0x5a, 0xb8, 0x0e, 0x9a, 0xf3,
	0x3d, 0x5c, 0x3d, 0xcd, 0x85, 0xd0, 0x15, 0x59, 0x3c, 0x6d, 0x95, 0x55, 0x97, 0xed, 0xb2, 0x6a,
	0x45, 0xc3, 0x15, 0x4d, 0x4c, 0x33, 0x10, 0x56, 0xbd, 0x75, 0xd5, 0xae, 0xb7, 0xd6, 0xb2, 0x49,
	0xbf, 0xa0, 0x64, 0xa3, 0x84, 0x87, 0x92, 0x4d, 0xb9, 0x02, 0xc7, 0xaf, 0xb3, 0x78, 0x72, 0xf7,
	0x8b, 0x99, 0xda, 0xfd, 0x8e, 0x5f, 0x12, 0x33, 0xb9, 0xfb, 0xc5, 0x4c, 0xef, 0x7e, 0x2a, 0xd3,
	0xc6, 0xc9, 0x48, 0x2c, 0xd7, 0x3a, 0x11, 0x76, 0x24, 0x8c, 0x4a, 0xef, 0x96, 0x59, 0xe9, 0x2d,
	0xb1, 0x13, 0xb5, 0xb5, 0x4b, 0x62, 0x36, 0x10, 0x46, 0xf9, 0xf7, 0x92, 0x51, 0xfe, 0xad, 0x64,
	0x88, 0xbc, 0x0e, 0x49, 0x87, 0x32, 0x44, 0xee, 0x26, 0xd4, 0xa5, 0x0c, 0xea, 0xcb, 0xb5, 0xe3,
	0x57, 0x49, 0x8c, 0x61, 0xe4, 0x5e, 0x95, 0x26, 0xe2, 0x92, 0x62, 0x73, 0x2c, 0x89, 0x2c, 0xe4,
	0x0a, 0x59, 0xc8, 0xca, 0x22, 0x0c, 0x1a, 0xc8, 0x55, 0x69, 0x20, 0xab, 0x0b, 0xf9, 0x50, 0x3d,
	0x5b, 0x01, 0x56, 0x72, 0xbe, 0x3a, 0xe7, 0x9a, 0xc8, 0x4e, 0xfa, 0x24, 0x4a, 0x5d, 0xa4, 0x52,
	0x87, 0xd1, 0x8d, 0xcc, 0x61, 0x94, 0x02, 0xea, 0xf3, 0x68, 0x27, 0x7d, 0x1e, 0xe5, 0x72, 0x8c,
	0xdc, 0x0f, 0xf3, 0x8e, 0xa4, 0x14, 0xd6, 0x38, 0x95, 0x76, 0xe4, 0x0a, 0x56, 0x68, 0xe6, 0xf9,
	0x5f, 0xd5, 0x69, 0x11, 0xb7, 0x69, 0x11, 0xab, 0x67, 0xc0, 0x70, 0x1d, 0x77, 0xe4, 0x3a, 0xd6,
	0xce, 0xe2, 0x46, 0x9f, 0x4d, 0x0b, 0xd0, 0x34, 0x8b, 0x86, 0x72, 0xd7, 0xb0, 0x0d, 0x05, 0x5e,
	0xbe, 0xba, 0x5f, 0x08, 0x63, 0xb7, 0x23, 0x99, 0xf3, 0xc5, 0xa7, 0x68, 0x26, 0x10, 0xc1, 0xfb,
	0xa9, 0xee, 0x17, 0xa6, 0x02, 0x11, 0x6a, 0x1b, 0xd5, 0x7d, 0xfc, 0x89, 0x88, 0x89, 0x2a, 0x38,
	0x29, 0x4c, 0x08, 0xa1, 0x36, 0x4d, 0xdd, 0xc7, 0x9f, 0xee, 0x26, 0xd4, 0x74, 0x78, 0xca, 0xdf,
	0x6c, 0xd4, 0x33, 0x9e, 0x06, 0x56, 0xf8, 0x2a, 0xbf, 0xda, 0x34, 0x22, 0x23, 0x54, 0xbd, 0x0c,
	0x0d, 0x33, 0x8e, 0x94, 0x5f, 0x6e, 0x20, 0x4e, 0x02, 0xc6, 0x1d, 0x58, 0x4a, 0x07, 0x9b, 0xf2,
	0x03, 0x4e, 0x2b, 0xb2, 0x02, 0xcb, 0xf3, 0x50, 0x4f, 0x22, 0x3f, 0xf9, 0xf9, 0xa6, 0x16, 0xa8,
	0x10, 0xaf, 0x0b, 0x2d, 0x3b, 0x34, 0x6c, 0x69, 0x49, 0x74, 0x18, 0x88, 0xcb, 0x15, 0x79, 0x6d,
	0x0a, 0xda, 0x0a, 0x21, 0x95, 0xec, 0xb3, 0x0d, 0x2c, 0xc9, 0x7a, 0xf1, 0x08, 0x15, 0xde, 0xed,
	0x43, 0xcb, 0x2a, 0x99, 0x7a, 0xc3, 0xd2, 0xd7, 0xd2, 0x4b, 0x5f, 0x93, 0x1a, 0xfc, 0x57, 0x07,
	0xea, 0xba, 0xda, 0xec, 0x0d, 0x3c, 0xca, 0x69, 0x1e, 0xe5, 0xb4, 0xfa, 0xca, 0x69, 0xf5, 0x95,
	0xd3, 0xea, 0x2b, 0xa7, 0xd5, 0x57, 0x96, 0xea, 0x93, 0xb3, 0x96, 0x85, 0x9c, 0xf6, 0xac, 0x65,
	0x15, 0x27, 0xcf, 0xfa, 0xdf, 0x1c, 0x68, 0x18, 0x05, 0x5b, 0x6f, 0x10, 0xd8, 0x49, 0x0b, 0xec,
	0xa4, 0x05, 0x76, 0xd2, 0x02, 0x3b, 0x69, 0x81, 0x9d, 0xb4, 0xc0, 0x4e, 0x5a, 0x60, 0x27, 0x47,
	0x60, 0x47, 0x09, 0xfc, 0x8f, 0x0e, 0x54, 0xf9, 0x73, 0xe6, 0xbb, 0x5f, 0x11, 0xbc, 0x08, 0x65,
	0xfc, 0x1b, 0xd3, 0xa5, 0x17, 0xa3, 0x57, 0xb6, 0xaa, 0x1b, 0x84, 0xa5, 0xec, 0x0d, 0xc2, 0xf2,
	0x82, 0x1b, 0x84, 0x95, 0xd4, 0x0d, 0xc2, 0xbf, 0x73, 0xa0, 0xb8, 0x37, 0x9d, 0xe6, 0x4a, 0xd6,
	0x04, 0x27, 0x64, 0xb5, 0x3b, 0xa1, 0xbc, 0x20, 0x58, 0x54, 0x17, 0x04, 0x9b, 0xe0, 0x1c, 0xd0,
	0xb8, 0x35, 0xdf, 0x39, 0xc0, 0xa7, 0x63, 0x5e, 0x3c, 0xe7, 0x98, 0x97, 0xbf, 0xc2, 0x9a, 0x8c,
	0xf1, 0x39, 0x8e, 0xc9, 0xe3, 0xd4, 0xfd, 0x42, 0x4c, 0xcf, 0x07, 0x31, 0x2d, 0x5c, 0xcd, 0x2f,
	0x1c, 0xd0, 0xf3, 0x71, 0xcc, 0x8b, 0x56, 0x38, 0x8e, 0xbb, 0xff, 0xee, 0x40, 0x95, 0xbf, 0x55,
	0xe7, 0xca, 0xb5, 0x09, 0xc5, 0xf0, 0x08, 0xf5, 0x8b, 0xbe, 0xa9, 0xa6, 0xbe, 0x15, 0xfb, 0xd8,
	0xa8, 0xe7, 0x5f, 0x34, 0xe6, 0x7f, 0x87, 0x36, 0xa4, 0x2c, 0x27, 0xe2, 0xeb, 0x40, 0x6d, 0xdb,
	0xa3, 0xf9, 0x09, 0x40, 0x5f, 0x4c, 0x2c, 0x1b, 0x17, 0x13, 0xaf, 0xaa, 0x5a, 0x95, 0x8a, 0xaa,
	0x93, 0x34, 0x3e, 0xa5, 0xab, 0x3b, 0x89, 0x53, 0x7d, 0x13, 0x92, 0x9a, 0x7f, 0x13, 0xd1, 0x27,
	0xf3, 0x97, 0x87, 0xaa, 0x5e, 0x1a, 0x7f, 0xbb, 0x1e, 0x54, 0xb9, 0x3a, 0x80, 0x77, 0x97, 0x7a,
	0xec, 0xfe, 0xaa, 0x00, 0x35, 0xf5, 0x8e, 0xf5, 0xce, 0x43, 0x6d, 0xeb, 0xef, 0xe8, 0x45, 0xae,
	0x81, 0x34, 0x22, 0xa9, 0x9c, 0x1b, 0x87, 0xa5, 0x45, 0x37, 0x0e, 0xcb, 0xf9, 0x37, 0x0e, 0x2b,
	0x67, 0xdc, 0x38, 0xac, 0x9e, 0x7d, 0xe3, 0xb0, 0x76, 0xf6, 0x8d, 0xc3, 0xfa, 0x3b, 0xdc, 0x38,
	0x84, 0x33, 0x6e, 0x1c, 0xfe, 0xaf, 0x03, 0x0d, 0x63, 0xce, 0xbf, 0x9d, 0xcb, 0x86, 0x72, 0x23,
	0x94, 0xb4, 0xf3, 0xbd, 0x20, 0x23, 0x6c, 0xe2, 0xc3, 0xdb, 0x25, 0x69, 0x70, 0x57, 0xa1, 0x4c,
	0xd1, 0x38, 0x3b, 0x1d, 0xf9, 0xe0, 0xde, 0x34, 0xa3, 0x72, 0x79, 0x45, 0xb9, 0x61, 0x84, 0x35,
	0x66, 0x3c, 0x7e, 0x45, 0xc5, 0xe3, 0xb5, 0x2c, 0x8c, 0xaf, 0x08, 0xde, 0x07, 0x48, 0x1a, 0x17,
	0xdd, 0xd5, 0xc5, 0x50, 0x92, 0xbd, 0x27, 0xfd, 0xc6, 0x79, 0x88, 0x19, 0xbb, 0xcf, 0x82, 0x98,
	0x75, 0x3f, 0x83, 0x95, 0x9c, 0x2b, 0xe2, 0xb9, 0xec, 0x56, 0xa1, 0xfc, 0xcb, 0x93, 0x60, 0xae,
	0xee, 0xfe, 0xca, 0x87, 0xee, 0x2f, 0x60, 0x3d, 0xff, 0xa2, 0x78, 0x2e, 0x8f, 0x5d, 0x93, 0xc7,
	0x9b, 0xee, 0xe6, 0xf1, 0x08, 0xf7, 0x60, 0x3d, 0xff, 0x26, 0xf9, 0x3b, 0x48, 0x79, 0x0f, 0xd6,
	0xf3, 0x2f, 0x93, 0xbf, 0x1b, 0x8f, 0xfc, 0xfb, 0xe4, 0xef, 0xc0, 0xe3, 0x53, 0x28, 0xf7, 0xe7,
	0xf3, 0x59, 0xfe, 0x59, 0xe7, 0x41, 0xf5, 0x45, 0x10, 0xc7, 0xe3, 0x89, 0x22, 0x52, 0x8f, 0xdd,
	0x8f, 0xa1, 0xc1, 0x4b, 0xf3, 0x30, 0x10, 0xe3, 0x5c, 0xe2, 0x0e, 0x14, 0x63, 0x71, 0xc2, 0x84,
	0xf8, 0xb3, 0x7b, 0x0f, 0x9a, 0x7e, 0x10, 0xbf, 0x9c, 0x45, 0x71, 0xb0, 0x90, 0xea, 0x12, 0x54,
	0x02, 0x94, 0x47, 0x39, 0x97, 0x4a, 0x8f, 0xc4, 0xf3, 0xb9, 0xb5, 0xfb, 0x6b, 0x07, 0x5c, 0xc3,
	0x3e, 0x58, 0x88, 0x05, 0xd7, 0x23, 0x4b, 0x2f, 0x02, 0x31, 0x66, 0xcd, 0x36, 0x7b, 0x86, 0xc0,
	0x3e, 0xf5, 0x20, 0xd5, 0x4b, 0x9c, 0x1c, 0x7b, 0x45, 0xfc, 0xed, 0x7e, 0x02, 0xad, 0xa9, 0x79,
	0xb5, 0x5a, 0x97, 0x0d, 0x59, 0x17, 0xae, 0x7d, 0x1b, 0x84, 0x4e, 0xfc, 0x5b, 0x42, 0x97, 0x6d,
	0x27, 0xce, 0x77, 0x68, 0xa9, 0xcf, 0xdd, 0x56, 0x1a, 0xa8, 0x30, 0x4b, 0xbb, 0x54, 0x90, 0x35,
	0xf2, 0xf7, 0x8e, 0xb5, 0x03, 0xd4, 0x8a, 0x2d, 0xfa, 0x37, 0x0c, 0xc6, 0x14, 0x5b, 0x3d, 0x73,
	0x79, 0x79, 0x8e, 0x97, 0x00, 0xc4, 0x4c, 0x8c, 0xa7, 0xfb, 0xe8, 0xa9, 0x78, 0xa6, 0x46, 0x8b,
	0xbb, 0x0d, 0xb5, 0x58, 0xfd, 0x97, 0x82, 0x12, 0xfb, 0x73, 0x1e, 0xdb, 0xd7, 0x3d, 0xdd, 0x09,
	0xac, 0xe5, 0x6e, 0x8c, 0xdf, 0x70, 0xe1, 0x3d, 0xba, 0x8d, 0x2b, 0xcf, 0x87, 0xe4, 0xf8, 0x28,
	0x84, 0x47, 0xdd, 0x38, 0xbd, 0x7b, 0xdf, 0x77, 0xfe, 0x5d, 0xa8, 0xf2, 0x2c, 0xf4, 0x78, 0x6a,
	0x7a, 0xaa, 0xa3, 0xfb, 0xb7, 0x0e, 0xac, 0xd9, 0x3b, 0xfa, 0xfd, 0xa6, 0xc7, 0xc7, 0x63, 0x31,
	0xff, 0x78, 0x7c, 0x9b, 0xf5, 0x7e, 0x9c, 0x76, 0x31, 0xef, 0xb9, 0x0c, 0xdd, 0x18, 0xd6, 0x6c,
	0x7f, 0xf3, 0x7e, 0x33, 0x34, 0x67, 0x51, 0x3c, 0x6b, 0x16, 0xe9, 0x41, 0xdf, 0x6f, 0x16, 0x21,
	0xac, 0xd9, 0x1e, 0xef, 0xb7, 0xa6, 0x27, 0x94, 0x3d, 0x3d, 0xd4, 0x7b, 0xc9, 0x7e, 0xeb, 0x6f,
	0x1c, 0x68, 0x9a, 0xef, 0xd7, 0x6e, 0x07, 0x9a, 0x83, 0xfe, 0xd3, 0xe7, 0x4f, 0xfa, 0xfe, 0x57,
	0xc3, 0xfd, 0xfe, 0x93, 0xce, 0x07, 0xee, 0x1a, 0x2c, 0x1b, 0x2d, 0xcf, 0xef, 0x7d, 0xf3, 0x7c,
	0x78, 0xbf, 0xe3, 0xb8, 0x2b, 0xb0, 0xb4, 0xef, 0xf7, 0xf7, 0x9e, 0xf6, 0x13, 0x6c, 0x01, 0x1b,
	0x9f, 0x7d, 0x79, 0xdf, 0x6a, 0x2c, 0x62, 0xe3, 0xfd, 0xfe, 0xa8, 0x6f, 0x36, 0x96, 0x5c, 0x17,
	0xda, 0x5f, 0xef, 0x3d, 0xdd, 0x7f, 0x90, 0xb4, 0x95, 0x6f, 0xdd, 0x84, 0x8a, 0x8c, 0xf6, 0xdd,
	0x2a, 0x14, 0x9f, 0xf9, 0xa3, 0xce, 0x07, 0x6e, 0x0d, 0x4a, 0x8f, 0xf6, 0x1e, 0xf6, 0x3b, 0x8e,
	0xdb, 0x84, 0xda, 0xb3, 0x27, 0x7d, 0x9f, 0x9e, 0x0a, 0xb7, 0x7e, 0xe5, 0x00, 0x24, 0xd1, 0x87,
	0xdb, 0x82, 0xfa, 0xa3, 0xbd, 0x47, 0x8f, 0x1f, 0xf6, 0x9f, 0xf6, 0xfd, 0xce, 0x07, 0x6e, 0x1b,
	0xe0, 0xe1, 0x70, 0xdf, 0xe7, 0x67, 0x47, 0x3e, 0x8f, 0x46, 0x43, 0xf9, 0x5c, 0xc0, 0xe7, 0xfd,
	0xfe, 0xa3, 0xa7, 0xfc, 0x5c, 0x44, 0xf2, 0xfb, 0xfd, 0x7d, 0x7e, 0x2c, 0xb9, 0x75, 0x28, 0xcb,
	0x9f, 0x65, 0xec, 0xf9, 0x62, 0x38, 0x62, 0x46, 0x15, 0x14, 0xe7, 0xe9, 0x83, 0xc7, 0xcf, 0x3a,
	0x55, 0xfc, 0x35, 0x1a, 0x3e, 0xea, 0x77, 0x6a, 0xf8, 0x6b, 0xf8, 0x68, 0xff, 0x41, 0xa7, 0x8e,
	0xbf, 0x3e, 0x7f, 0xfc, 0xf8, 0x69, 0x07, 0xf0, 0xd7, 0x37, 0x7b, 0xfe, 0xfd, 0x4e, 0x03, 0x7f,
	0x3d, 0x1c, 0x8e, 0xfa, 0x9d, 0xa6, 0x0b, 0x50, 0x19, 0xf5, 0xf7, 0x06, 0xcf, 0xfa, 0x9d, 0xd6,
	0xad, 0x2b, 0x50, 0xd7, 0xb1, 0x15, 0x0e, 0xf7, 0xd5, 0xde, 0xe8, 0x59, 0xbf, 0xf3, 0x01, 0xfe,
	0xf4, 0xf7, 0x1e, 0x0d, 0xfa, 0x1d, 0x67, 0xf7, 0x0b, 0x68, 0xdb, 0x9b, 0xcd, 0xfd, 0x01, 0x54,
	0x64, 0x8b, 0xbb, 0xde, 0xcb, 0x75, 0x0c, 0x9b, 0x1b, 0xbd, 0xfc, 0xfd, 0xb9, 0xfb, 0x19, 0x34,
	0x0c, 0xef, 0xed, 0xde, 0x85, 0xe2, 0x20, 0x10, 0xee, 0x4a, 0x2f, 0x7b, 0x68, 0x6d, 0xae, 0xf6,
	0x72, 0xfc, 0xfc, 0xee, 0x03, 0x68, 0xdb, 0x1e, 0xd0, 0xfd, 0xae, 0xe4, 0xb1, 0x9e, 0x1f, 0x9b,
	0x6c, 0x6e, 0xf4, 0xf2, 0x3d, 0x26, 0xce, 0xcb, 0xde, 0x7e, 0x38, 0x2f, 0xd9, 0xe2, 0xae, 0xf7,
	0x72, 0xdd, 0xc1, 0xe6, 0x46, 0x2f, 0x7f, 0xc7, 0x22, 0x33, 0x7b, 0x3f, 0x20, 0x33, 0xd9, 0xe2,
	0xae, 0xf7, 0x72, 0x77, 0xe5, 0xe6, 0x46, 0x2f, 0x7f, 0x0b, 0xed, 0xf6, 0xa1, 0xf5, 0xf5, 0x58,
	0x1c, 0x9e, 0x68, 0x5e, 0x9f, 0x40, 0x99, 0x1a, 0xde, 0x61, 0xa1, 0xee, 0x3a, 0xbb, 0x03, 0x68,
	0x3f, 0x11, 0xf3, 0x60, 0xfc, 0x42, 0xf3, 0xf9, 0x14, 0x2a, 0xb2, 0xe5, 0x9d, 0x18, 0xdd, 0xab,
	0xfd, 0xbc, 0x42, 0xff, 0xfd, 0x68, 0xf7, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xd1, 0x89,
	0xc1, 0x0d, 0x49, 0x00, 0x00,
}
