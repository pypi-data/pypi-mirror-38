{"contract_types":{"registry":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"_package","type":"bytes32"},{"indexed":false,"name":"_version","type":"bytes32"},{"indexed":false,"name":"_uri","type":"bytes32"}],"name":"Release","type":"event"},{"constant":false,"inputs":[],"name":"__init__","outputs":[],"payable":false,"type":"constructor"},{"constant":false,"gas":35627,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"type":"function"},{"constant":false,"gas":1960,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"version","type":"bytes32"}],"name":"getReleaseId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1509,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"version","type":"bytes32"}],"name":"generateReleaseId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1265,"inputs":[{"name":"packageId","type":"bytes32"}],"name":"getPackageName","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1865,"inputs":[{"name":"packageName","type":"bytes32"}],"name":"getPackageData","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":4669,"inputs":[{"name":"offset","type":"uint256"},{"name":"length","type":"uint256"}],"name":"getAllPackageIds","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":17966,"inputs":[{"name":"packageName","type":"bytes32"},{"name":"offset","type":"uint256"},{"name":"length","type":"uint256"}],"name":"getAllReleaseIds","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":2693,"inputs":[{"name":"releaseId","type":"bytes32"}],"name":"getReleaseData","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":561507,"inputs":[{"name":"name","type":"bytes32"},{"name":"version","type":"bytes32"},{"name":"uri","type":"bytes32"}],"name":"release","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":813,"inputs":[],"name":"owner","outputs":[{"name":"out","type":"address"}],"payable":false,"type":"function"},{"constant":true,"gas":1054,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1078,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__createdAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1114,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__updatedAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1144,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__name","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1174,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__releaseCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1204,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1228,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__createdAt","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1264,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__packageId","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1294,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__version","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1324,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__uri","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1143,"inputs":[],"name":"packageCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1173,"inputs":[],"name":"releaseCount","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"}],"deployment_bytecode":{"bytecode":""},"natspec":{}},"registry_v1":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"name":"_package","type":"bytes32"},{"indexed":false,"name":"_version","type":"bytes32"},{"indexed":false,"name":"_uri","type":"bytes32"}],"name":"Release","type":"event"},{"constant":false,"inputs":[],"name":"__init__","outputs":[],"payable":false,"type":"constructor"},{"constant":false,"gas":35627,"inputs":[{"name":"new_owner","type":"address"}],"name":"transfer_owner","outputs":[],"payable":false,"type":"function"},{"constant":false,"gas":1479,"inputs":[{"name":"name","type":"bytes32"},{"name":"version","type":"bytes32"}],"name":"generate_release_id","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1706,"inputs":[{"name":"package_id","type":"bytes32"}],"name":"get_package_data_by_id","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":1823,"inputs":[{"name":"name","type":"bytes32"}],"name":"get_package_data","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":false,"gas":2627,"inputs":[{"name":"release_id","type":"bytes32"}],"name":"get_release_data_by_id","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":5162,"inputs":[{"name":"name","type":"bytes32"},{"name":"release_version","type":"bytes32"}],"name":"get_release_data","outputs":[{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"},{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1190,"inputs":[{"name":"index","type":"int128"}],"name":"get_package_id","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":1220,"inputs":[{"name":"index","type":"int128"}],"name":"get_release_id","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":4959,"inputs":[{"name":"name","type":"bytes32"},{"name":"count","type":"int128"}],"name":"get_release_id_by_package_and_count","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":false,"gas":561657,"inputs":[{"name":"name","type":"bytes32"},{"name":"version","type":"bytes32"},{"name":"uri","type":"bytes32"}],"name":"release","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":843,"inputs":[],"name":"owner","outputs":[{"name":"out","type":"address"}],"payable":false,"type":"function"},{"constant":true,"gas":1084,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1108,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__created_at","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1144,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__updated_at","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1174,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__name","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1204,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"packages__release_count","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1234,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__exists","outputs":[{"name":"out","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"gas":1258,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__created_at","outputs":[{"name":"out","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"gas":1294,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__package_id","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1324,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__version","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1354,"inputs":[{"name":"arg0","type":"bytes32"}],"name":"releases__uri","outputs":[{"name":"out","type":"bytes32"}],"payable":false,"type":"function"},{"constant":true,"gas":1173,"inputs":[],"name":"package_count","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"},{"constant":true,"gas":1203,"inputs":[],"name":"release_count","outputs":[{"name":"out","type":"int128"}],"payable":false,"type":"function"}],"deployment_bytecode":{"bytecode":""},"natspec":{}}},"deployments":{"blockchain://6438a457b84c56e677e8f5171addc762b40fff24c0842db3afd598f104637b7f/block/1bd686e6f4b833c357da68fa65dbddac9976bb4ffeaaa61355e2eac6ae87b4cc":{"registry":{"address":"0xf2e246bb76df876cef8b38ae84130f4f55de395b","block":"0x1bd686e6f4b833c357da68fa65dbddac9976bb4ffeaaa61355e2eac6ae87b4cc","contract_type":"registry","transaction":"0xfb79c8df76894535e59d63b3acd1a4cac447e711641d38015eb9e8245b6a6862"}}},"manifest_version":"2","package_name":"registry","sources":{"registry.v.py":"# todo\n# delete pkgs\n\n# Events\nRelease: event({_package: indexed(bytes32), _version: bytes32, _uri: bytes32})\n\nowner: public(address)\n\n# Package Data: (package_id => value)\npackages: public(\n    {\n        exists: bool,\n        createdAt: timestamp,\n        updatedAt: timestamp,\n        name: bytes32,\n        releaseCount: int128,\n    }[bytes32]\n)\n\n#  Release Data: (release_id => value)\nreleases: public(\n    {\n        exists: bool,\n        createdAt: timestamp,\n        packageId: bytes32,\n        version: bytes32,\n        uri: bytes32,\n    }[bytes32]\n)\n\n\n# package_id#release_count => release_id\npackageReleaseIndex: bytes32[bytes32]\n# Total number of packages in registry\npackageCount: public(int128)\n# Total number of releases in registry\nreleaseCount: public(int128)\n# Total package number (int128) => package_id (bytes32)\npackageIds: bytes32[int128]\n# Total release number (int128) => release_id (bytes32)\nreleaseIds: bytes32[int128]\n\nEMPTY_BYTES: bytes32\n\n\n@public\ndef __init__():\n    self.owner = msg.sender\n\n\n@public\ndef transferOwner(newOwner: address):\n    \"\"\"\n    Change ownership of contract.\n    \"\"\"\n    assert self.owner == msg.sender\n    self.owner = newOwner\n\n\n@public\ndef getReleaseId(packageName: bytes32, version: bytes32) -> bytes32:\n    \"\"\"\n    Return the `release_id` associated with a given package name and release version.\n    \"\"\"\n    releaseConcat: bytes[64] = concat(packageName, version)\n    releaseId: bytes32 = sha3(releaseConcat)\n    assert self.releases[releaseId].exists\n    return releaseId\n\n\n@public\ndef generateReleaseId(packageName: bytes32, version: bytes32) -> bytes32:\n    releaseConcat: bytes[64] = concat(packageName, version)\n    releaseId: bytes32 = sha3(releaseConcat)\n    return releaseId\n\n\n@public\ndef getPackageName(packageId: bytes32) -> bytes32:\n    assert self.packages[packageId].exists\n    return self.packages[packageId].name\n\n@public\ndef getPackageData(packageName: bytes32) -> (bytes32, bytes32, int128):\n    packageId: bytes32 = sha3(packageName)\n    assert self.packages[packageId].exists\n    return (self.packages[packageId].name, packageId, self.packages[packageId].releaseCount)\n\n@public\ndef getAllPackageIds(\n    offset: uint256, length: uint256\n) -> (bytes32, bytes32, bytes32, bytes32, bytes32):\n    offset_int: int128 = convert(offset, \"int128\")\n    length_int: int128 = convert(length, \"int128\")\n    assert length_int == 5\n    assert offset_int <= self.packageCount\n    ids: bytes32[5]\n    for idx in range(offset_int, offset_int + 4):\n        if idx <= self.packageCount:\n            packageId: bytes32 = self.packageIds[idx]\n            ids[(idx - offset_int)] = packageId\n        else:\n            ids[(idx - offset_int)] = self.EMPTY_BYTES\n    return (ids[0], ids[1], ids[2], ids[3], ids[4])\n\n\n@private\ndef generatePackageReleaseId(packageId: bytes32, count: int128) -> bytes32:\n    \"\"\"\n    Create the package_release_id associated with a given package_id and a release count.\n    \"\"\"\n    countBytes: bytes32 = convert(count, \"bytes32\")\n    packageReleaseTag: bytes[64] = concat(packageId, countBytes)\n    packageReleaseId: bytes32 = sha3(packageReleaseTag)\n    return packageReleaseId\n\n\n@public\ndef getAllReleaseIds(\n    packageName: bytes32, offset: uint256, length: uint256\n) -> (bytes32, bytes32, bytes32, bytes32, bytes32):\n    offset_int: int128 = convert(offset, \"int128\")\n    length_int: int128 = convert(length, \"int128\")\n    assert length_int == 5\n    packageId: bytes32 = sha3(packageName)\n    assert self.packages[packageId].exists\n    assert offset_int <= self.packages[packageId].releaseCount\n    ids: bytes32[5]\n    for idx in range(offset_int, offset_int + 4):\n        if idx <= self.packages[packageId].releaseCount:\n            packageReleaseId: bytes32 = self.generatePackageReleaseId(\n                packageId, (idx + 1)\n            )\n            releaseId: bytes32 = self.packageReleaseIndex[packageReleaseId]\n            ids[(idx - offset_int)] = releaseId\n        else:\n            ids[(idx - offset_int)] = self.EMPTY_BYTES\n    return (ids[0], ids[1], ids[2], ids[3], ids[4])\n\n\n@public\ndef getReleaseData(releaseId: bytes32) -> (bytes32, bytes32, bytes32):\n    assert self.releases[releaseId].exists\n    packageId: bytes32 = self.releases[releaseId].packageId\n    return (\n        self.packages[packageId].name,\n        self.releases[releaseId].version,\n        self.releases[releaseId].uri,\n    )\n\n\n@private\ndef cutRelease(\n    releaseId: bytes32,\n    packageId: bytes32,\n    version: bytes32,\n    uri: bytes32,\n    name: bytes32,\n):\n    self.releases[releaseId] = {\n        exists: True,\n        createdAt: block.timestamp,\n        packageId: packageId,\n        version: version,\n        uri: uri,\n    }\n    self.packages[packageId].releaseCount += 1\n    self.releaseIds[self.releaseCount] = releaseId\n    self.releaseCount += 1\n    packageReleaseId: bytes32 = self.generatePackageReleaseId(\n        packageId, self.packages[packageId].releaseCount\n    )\n    self.packageReleaseIndex[packageReleaseId] = releaseId\n    log.Release(name, version, uri)\n\n\n@public\ndef release(name: bytes32, version: bytes32, uri: bytes32) -> bytes32:\n    \"\"\"\n    Return a relase_id after publishing a release.\n    \"\"\"\n    assert uri != self.EMPTY_BYTES\n    assert name != self.EMPTY_BYTES\n    assert version != self.EMPTY_BYTES\n    assert self.owner == msg.sender\n\n    packageId: bytes32 = sha3(name)\n    releaseId: bytes32 = self.generateReleaseId(name, version)\n\n    if self.packages[packageId].exists == True:\n        self.packages[packageId] = {\n            exists: True,\n            createdAt: self.packages[packageId].createdAt,\n            updatedAt: block.timestamp,\n            name: name,\n            releaseCount: self.packages[packageId].releaseCount,\n        }\n        assert self.releases[releaseId].exists == False\n        self.cutRelease(releaseId, packageId, version, uri, name)\n        return releaseId\n    else:\n        self.packages[packageId] = {\n            exists: True,\n            createdAt: block.timestamp,\n            updatedAt: block.timestamp,\n            name: name,\n            releaseCount: 0,\n        }\n        self.packageIds[self.packageCount] = packageId\n        self.packageCount += 1\n        self.cutRelease(releaseId, packageId, version, uri, name)\n        return releaseId\n","/Users/nickgheorghita/ethereum/py-ethpm/ethpm/assets/vyper_registry/registry_v1.v.py":"# Events\nRelease: event({_package: indexed(bytes32), _version: bytes32, _uri: bytes32})\n\nowner: public(address)\n\n# Package Data: (package_id => value)\npackages: public(\n    {\n        exists: bool,\n        created_at: timestamp,\n        updated_at: timestamp,\n        name: bytes32,\n        release_count: int128,\n    }[bytes32]\n)\n\n#  Release Data: (release_id => value)\nreleases: public(\n    {\n        exists: bool,\n        created_at: timestamp,\n        package_id: bytes32,\n        version: bytes32,\n        uri: bytes32,\n    }[bytes32]\n)\n\n\n# package_id#release_count => release_id\npackage_release_index: bytes32[bytes32]\n# Total number of packages in registry\npackage_count: public(int128)\n# Total number of releases in registry\nrelease_count: public(int128)\n# Total package number (int128) => package_id (bytes32)\npackage_ids: bytes32[int128]\n# Total release number (int128) => release_id (bytes32)\nrelease_ids: bytes32[int128]\n\nEMPTY_BYTES: bytes32\n\n\n@public\ndef __init__():\n    self.owner = msg.sender\n\n\n@public\ndef transfer_owner(new_owner: address):\n    \"\"\"\n    Change ownership of contract.\n    \"\"\"\n    assert self.owner == msg.sender\n    self.owner = new_owner\n\n\n@public\ndef generate_release_id(name: bytes32, version: bytes32) -> bytes32:\n    \"\"\"\n    Return the `release_id` associated with a given package name and release version.\n    \"\"\"\n    release_concat: bytes[64] = concat(name, version)\n    release_id: bytes32 = sha3(release_concat)\n    return release_id\n\n\n@public\ndef get_package_data_by_id(package_id: bytes32) -> (bytes32, int128):\n    \"\"\"\n    Return a package name and release count associated with a given `package_id`.\n    # todo refactor w/ get_package_data\n    \"\"\"\n    assert self.packages[package_id].exists == True\n    return (self.packages[package_id].name, self.packages[package_id].release_count)\n\n\n@public\ndef get_package_data(name: bytes32) -> (bytes32, int128):\n    \"\"\"\n    Return a package name and release count associated with a given package name.\n    \"\"\"\n    package_id: bytes32 =  sha3(name)\n    assert self.packages[package_id].exists == True\n    return (self.packages[package_id].name, self.packages[package_id].release_count)\n\n\n@public\ndef get_release_data_by_id(release_id: bytes32) ->  (bytes32, bytes32, bytes32, bytes32):\n    assert self.releases[release_id].exists == True\n    package_name: bytes32 = self.packages[self.releases[release_id].package_id].name\n    version: bytes32 = self.releases[release_id].version\n    uri: bytes32 = self.releases[release_id].uri\n    return (package_name, version, uri, release_id)\n\n\n@public\ndef get_release_data(name: bytes32, release_version: bytes32) -> (bytes32, bytes32, bytes32, bytes32):\n    \"\"\"\n    Return package name, release version, and manifest uri associated with a given `release_id`.\n    todo refactor with get-release_data_by_id\n    \"\"\"\n    release_id: bytes32 = self.generate_release_id(name, release_version)\n    assert self.releases[release_id].exists == True\n    package_name: bytes32 = self.packages[self.releases[release_id].package_id].name\n    version: bytes32 = self.releases[release_id].version\n    uri: bytes32 = self.releases[release_id].uri\n    return (package_name, version, uri, release_id)\n\n\n@public\ndef get_package_id(index: int128) -> bytes32:\n    \"\"\"\n    Return the `package_id` associated with the package identified by the given index.\n    \"\"\"\n    assert index <= self.package_count\n    return self.package_ids[index]\n\n\n@public\ndef get_release_id(index: int128) -> bytes32:\n    \"\"\"\n    Return the `release_id` associated with the release identified by the given index.\n    \"\"\"\n    assert index <= self.release_count\n    return self.release_ids[index]\n\n\n@private\ndef generate_package_release_id(package_id: bytes32, count: int128) -> bytes32:\n    \"\"\"\n    Create the package_release_id associated with a given package_id and a release count.\n    \"\"\"\n    count_bytes: bytes32 = convert(count, \"bytes32\")\n    package_release_tag: bytes[64] = concat(package_id, count_bytes)\n    package_release_id: bytes32 = sha3(package_release_tag)\n    return package_release_id\n\n\n@public\ndef get_release_id_by_package_and_count(name: bytes32, count: int128) -> bytes32:\n    \"\"\"\n    Return the `release_id` associated with a given package name and release count.\n    \"\"\"\n    package_id: bytes32 = sha3(name)\n    assert self.packages[package_id].exists\n    assert count <= self.packages[package_id].release_count\n    package_release_id: bytes32 = self.generate_package_release_id(package_id, count)\n    return self.package_release_index[package_release_id]\n\n\n@private\ndef cut_release(\n    release_id: bytes32,\n    package_id: bytes32,\n    version: bytes32,\n    uri: bytes32,\n    name: bytes32,\n):\n    self.releases[release_id] = {\n        exists: True,\n        created_at: block.timestamp,\n        package_id: package_id,\n        version: version,\n        uri: uri,\n    }\n    self.packages[package_id].release_count += 1\n    self.release_ids[self.release_count] = release_id\n    self.release_count += 1\n    package_release_id: bytes32 = self.generate_package_release_id(package_id, self.packages[package_id].release_count)\n    self.package_release_index[package_release_id] = release_id\n    log.Release(name, version, uri)\n\n\n@public\ndef release(name: bytes32, version: bytes32, uri: bytes32) -> bytes32:\n    \"\"\"\n    Return a relase_id after publishing a release.\n    \"\"\"\n    assert uri != self.EMPTY_BYTES\n    assert name != self.EMPTY_BYTES\n    assert version != self.EMPTY_BYTES\n    assert self.owner == msg.sender\n\n    package_id: bytes32 = sha3(name)\n    release_id: bytes32 = self.generate_release_id(name, version)\n\n    if self.packages[package_id].exists == True:\n        self.packages[package_id] = {\n            exists: True,\n            created_at: self.packages[package_id].created_at,\n            updated_at: block.timestamp,\n            name: name,\n            release_count: self.packages[package_id].release_count,\n        }\n        assert self.releases[release_id].exists == False\n        self.cut_release(release_id, package_id, version, uri, name)\n        return release_id\n    else:\n        self.packages[package_id] = {\n            exists: True,\n            created_at: block.timestamp,\n            updated_at: block.timestamp,\n            name: name,\n            release_count: 0,\n        }\n        self.package_ids[self.package_count] = package_id\n        self.package_count += 1\n        self.cut_release(release_id, package_id, version, uri, name)\n        return release_id\n"},"version":"1.0.0"}
