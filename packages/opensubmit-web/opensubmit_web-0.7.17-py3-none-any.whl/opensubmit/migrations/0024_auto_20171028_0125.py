# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2017-10-28 01:25
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('opensubmit', '0023_remove_course_max_authors'),
    ]

    operations = [
        migrations.AlterField(
            model_name='assignment',
            name='attachment_test_compile',
            field=models.BooleanField(default=False, help_text="If activated, the student upload is uncompressed and 'make' is executed on one of the test machines.", verbose_name='Compile test ?'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='attachment_test_support',
            field=models.FileField(blank=True, help_text='An archive (!) of files that should always be in the directory, beside the student files, during compilation / validation / full test.', null=True, upload_to='testscripts', verbose_name='Support files'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='description',
            field=models.FileField(blank=True, help_text='Uploaded document with the assignment description.', null=True, upload_to='assignment_desc', verbose_name='As file'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='download',
            field=models.URLField(blank=True, help_text='External link to the assignment description.', null=True, verbose_name='As link'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='gradingScheme',
            field=models.ForeignKey(blank=True, help_text='Grading scheme for this assignment. Leave empty to have an ungraded assignment.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='assignments', to='opensubmit.GradingScheme', verbose_name='grading scheme'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='hard_deadline',
            field=models.DateTimeField(blank=True, help_text='Deadline after which submissions are no longer possible. Can be empty.', null=True),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='has_attachment',
            field=models.BooleanField(default=False, help_text='Activate this if the students must upload a (document / ZIP /TGZ) file as solution. Otherwise, they can only provide notes.', verbose_name='Student file upload ?'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='max_authors',
            field=models.PositiveSmallIntegerField(default=1, help_text='Maximum number of authors (= group size) for this assignment.'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='publish_at',
            field=models.DateTimeField(default=django.utils.timezone.now, help_text='Shown for students after this point in time. Users with backend rights always see it.'),
        ),
        migrations.AlterField(
            model_name='assignment',
            name='test_machines',
            field=models.ManyToManyField(blank=True, help_text='The test machines that will take care of submissions for this assignment.', related_name='assignments', to='opensubmit.TestMachine'),
        ),
        migrations.AlterField(
            model_name='course',
            name='lti_key',
            field=models.CharField(blank=True, help_text='Key to be used by an LTI consumer when accessing this course.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='course',
            name='lti_secret',
            field=models.CharField(blank=True, help_text='Secret to be used by an LTI consumer when accessing this course.', max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='course',
            name='tutors',
            field=models.ManyToManyField(blank=True, help_text='These users can edit / grade submissions for the course.', related_name='courses_tutoring', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='grading',
            name='title',
            field=models.CharField(help_text="The title of the grade, such as 'A', 'B', 'Pass', or 'Fail'.", max_length=20),
        ),
        migrations.AlterField(
            model_name='gradingscheme',
            name='title',
            field=models.CharField(help_text="Choose a directly understandable name, such as 'ECTS' or 'Pass / Fail'.", max_length=200),
        ),
        migrations.AlterField(
            model_name='submission',
            name='grading_notes',
            field=models.TextField(blank=True, help_text='Specific notes about the grading for this submission.', max_length=10000, null=True),
        ),
        migrations.AlterField(
            model_name='submission',
            name='state',
            field=models.CharField(choices=[('R', 'Received'), ('W', 'Withdrawn'), ('S', 'Submitted'), ('PC', 'Compilation test pending'), ('FC', 'Compilation test failed'), ('PV', 'Validity test pending'), ('FV', 'Validity test failed'), ('PF', 'Full test pending'), ('FF', 'All but full test passed, grading pending'), ('ST', 'All tests passed, grading pending'), ('GP', 'Grading not finished'), ('G', 'Grading finished'), ('C', 'Closed, student notified'), ('CT', 'Closed, full test pending')], default='R', max_length=2),
        ),
        migrations.AlterField(
            model_name='submissiontestresult',
            name='kind',
            field=models.CharField(choices=[('c', 'Compilation test'), ('v', 'Validation test'), ('f', 'Full test')], max_length=2),
        ),
        migrations.AlterField(
            model_name='testmachine',
            name='address',
            field=models.CharField(help_text='Internal IP address of the test machine, at the time of registration.', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='testmachine',
            name='host',
            field=models.CharField(help_text='UUID of the test machine, independent from IP address.', max_length=50, null=True),
        ),
    ]
