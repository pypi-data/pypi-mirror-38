# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_solver')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_solver')
    _solver = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_solver', [dirname(__file__)])
        except ImportError:
            import _solver
            return _solver
        try:
            _mod = imp.load_module('_solver', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _solver = swig_import_helper()
    del swig_import_helper
else:
    import _solver
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SHARED_PTR_DISOWN = _solver.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _solver.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self) -> "PyObject *":
        """value(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_value(self)


    def incr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _solver.SwigPyIterator_incr(self, n)


    def decr(self, n: 'size_t'=1) -> "swig::SwigPyIterator *":
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _solver.SwigPyIterator_decr(self, n)


    def distance(self, x: 'SwigPyIterator') -> "ptrdiff_t":
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _solver.SwigPyIterator_distance(self, x)


    def equal(self, x: 'SwigPyIterator') -> "bool":
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator_equal(self, x)


    def copy(self) -> "swig::SwigPyIterator *":
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _solver.SwigPyIterator_copy(self)


    def next(self) -> "PyObject *":
        """next(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_next(self)


    def __next__(self) -> "PyObject *":
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator___next__(self)


    def previous(self) -> "PyObject *":
        """previous(SwigPyIterator self) -> PyObject *"""
        return _solver.SwigPyIterator_previous(self)


    def advance(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator_advance(self, n)


    def __eq__(self, x: 'SwigPyIterator') -> "bool":
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator___eq__(self, x)


    def __ne__(self, x: 'SwigPyIterator') -> "bool":
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _solver.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator &":
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___isub__(self, n)


    def __add__(self, n: 'ptrdiff_t') -> "swig::SwigPyIterator *":
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _solver.SwigPyIterator___add__(self, n)


    def __sub__(self, *args) -> "ptrdiff_t":
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _solver.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _solver.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Model(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _solver.new_Model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _solver.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _solver.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _solver.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _solver.Model_is_sparse(self)

    __swig_destroy__ = _solver.delete_Model
    __del__ = lambda self: None
Model_swigregister = _solver.Model_swigregister
Model_swigregister(Model)

class ModelDouble(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _solver.new_ModelDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _solver.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _solver.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _solver.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _solver.ModelDouble_is_sparse(self)

    __swig_destroy__ = _solver.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _solver.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    """Proxy of C++ TModel<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _solver.new_ModelFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _solver.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _solver.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _solver.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _solver.ModelFloat_is_sparse(self)

    __swig_destroy__ = _solver.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _solver.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _solver.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _solver.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _solver.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _solver.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _solver.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _solver.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _solver.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _solver.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _solver.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _solver.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _solver.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _solver.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _solver.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _solver.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class Prox(object):
    """Proxy of C++ TProx<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,double)> self, double strength, bool positive) -> Prox
        __init__(TProx<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> Prox
        """
        this = _solver.new_Prox(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        """call(Prox self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _solver.Prox_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        """value(Prox self, ArrayDouble const & coeffs) -> double"""
        return _solver.Prox_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(Prox self) -> double"""
        return _solver.Prox_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(Prox self, double strength)"""
        return _solver.Prox_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(Prox self) -> ulong"""
        return _solver.Prox_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(Prox self) -> ulong"""
        return _solver.Prox_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(Prox self, ulong start, ulong end)"""
        return _solver.Prox_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(Prox self) -> bool"""
        return _solver.Prox_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(Prox self, bool positive)"""
        return _solver.Prox_set_positive(self, positive)

    __swig_destroy__ = _solver.delete_Prox
    __del__ = lambda self: None
Prox_swigregister = _solver.Prox_swigregister
Prox_swigregister(Prox)

class ProxDouble(object):
    """Proxy of C++ TProx<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,double)> self, double strength, bool positive) -> ProxDouble
        __init__(TProx<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxDouble
        """
        this = _solver.new_ProxDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'ArrayDouble const &', step: 'double', out: 'ArrayDouble &') -> "void":
        """call(ProxDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)"""
        return _solver.ProxDouble_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayDouble const &') -> "double":
        """value(ProxDouble self, ArrayDouble const & coeffs) -> double"""
        return _solver.ProxDouble_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(ProxDouble self) -> double"""
        return _solver.ProxDouble_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(ProxDouble self, double strength)"""
        return _solver.ProxDouble_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxDouble self) -> ulong"""
        return _solver.ProxDouble_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxDouble self) -> ulong"""
        return _solver.ProxDouble_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxDouble self, ulong start, ulong end)"""
        return _solver.ProxDouble_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxDouble self) -> bool"""
        return _solver.ProxDouble_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxDouble self, bool positive)"""
        return _solver.ProxDouble_set_positive(self, positive)

    __swig_destroy__ = _solver.delete_ProxDouble
    __del__ = lambda self: None
ProxDouble_swigregister = _solver.ProxDouble_swigregister
ProxDouble_swigregister(ProxDouble)

class ProxFloat(object):
    """Proxy of C++ TProx<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(float,float)> self, float strength, bool positive) -> ProxFloat
        __init__(TProx<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxFloat
        """
        this = _solver.new_ProxFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'ArrayFloat const &', step: 'float', out: 'ArrayFloat &') -> "void":
        """call(ProxFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)"""
        return _solver.ProxFloat_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayFloat const &') -> "float":
        """value(ProxFloat self, ArrayFloat const & coeffs) -> float"""
        return _solver.ProxFloat_value(self, coeffs)


    def get_strength(self) -> "float":
        """get_strength(ProxFloat self) -> float"""
        return _solver.ProxFloat_get_strength(self)


    def set_strength(self, strength: 'float') -> "void":
        """set_strength(ProxFloat self, float strength)"""
        return _solver.ProxFloat_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxFloat self) -> ulong"""
        return _solver.ProxFloat_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxFloat self) -> ulong"""
        return _solver.ProxFloat_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxFloat self, ulong start, ulong end)"""
        return _solver.ProxFloat_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxFloat self) -> bool"""
        return _solver.ProxFloat_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxFloat self, bool positive)"""
        return _solver.ProxFloat_set_positive(self, positive)

    __swig_destroy__ = _solver.delete_ProxFloat
    __del__ = lambda self: None
ProxFloat_swigregister = _solver.ProxFloat_swigregister
ProxFloat_swigregister(ProxFloat)

class ProxAtomicDouble(object):
    """Proxy of C++ TProx<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(double,std::atomic<(double)>)> self, double strength, bool positive) -> ProxAtomicDouble
        __init__(TProx<(double,std::atomic<(double)>)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxAtomicDouble
        """
        this = _solver.new_ProxAtomicDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'Array< std::atomic< double > > const &', step: 'double', out: 'Array< std::atomic< double > > &') -> "void":
        """call(ProxAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)"""
        return _solver.ProxAtomicDouble_call(self, coeffs, step, out)


    def value(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """value(ProxAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _solver.ProxAtomicDouble_value(self, coeffs)


    def get_strength(self) -> "double":
        """get_strength(ProxAtomicDouble self) -> double"""
        return _solver.ProxAtomicDouble_get_strength(self)


    def set_strength(self, strength: 'double') -> "void":
        """set_strength(ProxAtomicDouble self, double strength)"""
        return _solver.ProxAtomicDouble_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(ProxAtomicDouble self) -> ulong"""
        return _solver.ProxAtomicDouble_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(ProxAtomicDouble self) -> ulong"""
        return _solver.ProxAtomicDouble_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(ProxAtomicDouble self, ulong start, ulong end)"""
        return _solver.ProxAtomicDouble_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(ProxAtomicDouble self) -> bool"""
        return _solver.ProxAtomicDouble_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxAtomicDouble self, bool positive)"""
        return _solver.ProxAtomicDouble_set_positive(self, positive)

    __swig_destroy__ = _solver.delete_ProxAtomicDouble
    __del__ = lambda self: None
ProxAtomicDouble_swigregister = _solver.ProxAtomicDouble_swigregister
ProxAtomicDouble_swigregister(ProxAtomicDouble)

class TProxAtomicFloat(object):
    """Proxy of C++ TProx<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProx<(float,std::atomic<(float)>)> self, float strength, bool positive) -> TProxAtomicFloat
        __init__(TProx<(float,std::atomic<(float)>)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxAtomicFloat
        """
        this = _solver.new_TProxAtomicFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, coeffs: 'Array< std::atomic< float > > const &', step: 'float', out: 'Array< std::atomic< float > > &') -> "void":
        """call(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)"""
        return _solver.TProxAtomicFloat_call(self, coeffs, step, out)


    def value(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """value(TProxAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _solver.TProxAtomicFloat_value(self, coeffs)


    def get_strength(self) -> "float":
        """get_strength(TProxAtomicFloat self) -> float"""
        return _solver.TProxAtomicFloat_get_strength(self)


    def set_strength(self, strength: 'float') -> "void":
        """set_strength(TProxAtomicFloat self, float strength)"""
        return _solver.TProxAtomicFloat_set_strength(self, strength)


    def get_start(self) -> "ulong":
        """get_start(TProxAtomicFloat self) -> ulong"""
        return _solver.TProxAtomicFloat_get_start(self)


    def get_end(self) -> "ulong":
        """get_end(TProxAtomicFloat self) -> ulong"""
        return _solver.TProxAtomicFloat_get_end(self)


    def set_start_end(self, start: 'ulong', end: 'ulong') -> "void":
        """set_start_end(TProxAtomicFloat self, ulong start, ulong end)"""
        return _solver.TProxAtomicFloat_set_start_end(self, start, end)


    def get_positive(self) -> "bool":
        """get_positive(TProxAtomicFloat self) -> bool"""
        return _solver.TProxAtomicFloat_get_positive(self)


    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(TProxAtomicFloat self, bool positive)"""
        return _solver.TProxAtomicFloat_set_positive(self, positive)

    __swig_destroy__ = _solver.delete_TProxAtomicFloat
    __del__ = lambda self: None
TProxAtomicFloat_swigregister = _solver.TProxAtomicFloat_swigregister
TProxAtomicFloat_swigregister(TProxAtomicFloat)

class TProxSeparableDouble(Prox):
    """Proxy of C++ TProxSeparable<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(double,double)> self, double strength, bool positive) -> TProxSeparableDouble
        __init__(TProxSeparable<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableDouble
        """
        this = _solver.new_TProxSeparableDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, double step, ArrayDouble & out)
        call(TProxSeparableDouble self, ArrayDouble const & coeffs, ArrayDouble const & step, ArrayDouble & out)
        """
        return _solver.TProxSeparableDouble_call(self, *args)

    __swig_destroy__ = _solver.delete_TProxSeparableDouble
    __del__ = lambda self: None
TProxSeparableDouble_swigregister = _solver.TProxSeparableDouble_swigregister
TProxSeparableDouble_swigregister(TProxSeparableDouble)

class TProxSeparableFloat(ProxFloat):
    """Proxy of C++ TProxSeparable<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        TProxSeparable(float strength, bool positive) -> TProxSeparableFloat
        __init__(TProxSeparable<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableFloat
        """
        this = _solver.new_TProxSeparableFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, float step, ArrayFloat & out)
        call(TProxSeparableFloat self, ArrayFloat const & coeffs, ArrayFloat const & step, ArrayFloat & out)
        """
        return _solver.TProxSeparableFloat_call(self, *args)

    __swig_destroy__ = _solver.delete_TProxSeparableFloat
    __del__ = lambda self: None
TProxSeparableFloat_swigregister = _solver.TProxSeparableFloat_swigregister
TProxSeparableFloat_swigregister(TProxSeparableFloat)

class TProxSeparableAtomicDouble(ProxAtomicDouble):
    """Proxy of C++ TProxSeparable<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(double,std::atomic<(double)>)> self, double strength, bool positive) -> TProxSeparableAtomicDouble
        __init__(TProxSeparable<(double,std::atomic<(double)>)> self, double strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicDouble
        """
        this = _solver.new_TProxSeparableAtomicDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, double step, Array< std::atomic< double > > & out)
        call(TProxSeparableAtomicDouble self, Array< std::atomic< double > > const & coeffs, Array< double > const & step, Array< std::atomic< double > > & out)
        """
        return _solver.TProxSeparableAtomicDouble_call(self, *args)

    __swig_destroy__ = _solver.delete_TProxSeparableAtomicDouble
    __del__ = lambda self: None
TProxSeparableAtomicDouble_swigregister = _solver.TProxSeparableAtomicDouble_swigregister
TProxSeparableAtomicDouble_swigregister(TProxSeparableAtomicDouble)

class TProxSeparableAtomicFloat(TProxAtomicFloat):
    """Proxy of C++ TProxSeparable<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSeparable<(float,std::atomic<(float)>)> self, float strength, bool positive) -> TProxSeparableAtomicFloat
        __init__(TProxSeparable<(float,std::atomic<(float)>)> self, float strength, unsigned long start, unsigned long end, bool positive) -> TProxSeparableAtomicFloat
        """
        this = _solver.new_TProxSeparableAtomicFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def call(self, *args) -> "void":
        """
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, float step, Array< std::atomic< float > > & out)
        call(TProxSeparableAtomicFloat self, Array< std::atomic< float > > const & coeffs, Array< float > const & step, Array< std::atomic< float > > & out)
        """
        return _solver.TProxSeparableAtomicFloat_call(self, *args)

    __swig_destroy__ = _solver.delete_TProxSeparableAtomicFloat
    __del__ = lambda self: None
TProxSeparableAtomicFloat_swigregister = _solver.TProxSeparableAtomicFloat_swigregister
TProxSeparableAtomicFloat_swigregister(TProxSeparableAtomicFloat)

class ProxZeroDouble(Prox):
    """Proxy of C++ TProxZero<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxZero<(double,double)> self) -> ProxZeroDouble
        __init__(TProxZero<(double,double)> self, double strength) -> ProxZeroDouble
        __init__(TProxZero<(double,double)> self, double strength, unsigned long start, unsigned long end) -> ProxZeroDouble
        """
        this = _solver.new_ProxZeroDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxZeroDouble') -> "bool":
        """compare(ProxZeroDouble self, ProxZeroDouble that) -> bool"""
        return _solver.ProxZeroDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxZeroDouble
    __del__ = lambda self: None
ProxZeroDouble_swigregister = _solver.ProxZeroDouble_swigregister
ProxZeroDouble_swigregister(ProxZeroDouble)


def ProxZeroDoubleDeserialize(ptr: 'ProxZeroDouble', hex: 'std::string const &') -> "void":
    """ProxZeroDoubleDeserialize(ProxZeroDouble ptr, std::string const & hex)"""
    return _solver.ProxZeroDoubleDeserialize(ptr, hex)

def ProxZeroDoubleSerialize(ptr: 'ProxZeroDouble') -> "std::string":
    """ProxZeroDoubleSerialize(ProxZeroDouble ptr) -> std::string"""
    return _solver.ProxZeroDoubleSerialize(ptr)
class ProxZeroFloat(ProxFloat):
    """Proxy of C++ TProxZero<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxZero<(float,float)> self) -> ProxZeroFloat
        __init__(TProxZero<(float,float)> self, float strength) -> ProxZeroFloat
        __init__(TProxZero<(float,float)> self, float strength, unsigned long start, unsigned long end) -> ProxZeroFloat
        """
        this = _solver.new_ProxZeroFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxZeroFloat') -> "bool":
        """compare(ProxZeroFloat self, ProxZeroFloat that) -> bool"""
        return _solver.ProxZeroFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxZeroFloat
    __del__ = lambda self: None
ProxZeroFloat_swigregister = _solver.ProxZeroFloat_swigregister
ProxZeroFloat_swigregister(ProxZeroFloat)


def ProxZeroFloatDeserialize(ptr: 'ProxZeroFloat', hex: 'std::string const &') -> "void":
    """ProxZeroFloatDeserialize(ProxZeroFloat ptr, std::string const & hex)"""
    return _solver.ProxZeroFloatDeserialize(ptr, hex)

def ProxZeroFloatSerialize(ptr: 'ProxZeroFloat') -> "std::string":
    """ProxZeroFloatSerialize(ProxZeroFloat ptr) -> std::string"""
    return _solver.ProxZeroFloatSerialize(ptr)
class ProxPositiveDouble(Prox):
    """Proxy of C++ TProxPositive<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxPositive<(double,double)> self, double strength) -> ProxPositiveDouble
        __init__(TProxPositive<(double,double)> self, double strength, unsigned long start, unsigned long end) -> ProxPositiveDouble
        """
        this = _solver.new_ProxPositiveDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxPositiveDouble') -> "bool":
        """compare(ProxPositiveDouble self, ProxPositiveDouble that) -> bool"""
        return _solver.ProxPositiveDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxPositiveDouble
    __del__ = lambda self: None
ProxPositiveDouble_swigregister = _solver.ProxPositiveDouble_swigregister
ProxPositiveDouble_swigregister(ProxPositiveDouble)

class ProxPositiveFloat(ProxFloat):
    """Proxy of C++ TProxPositive<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxPositive<(float,float)> self, float strength) -> ProxPositiveFloat
        __init__(TProxPositive<(float,float)> self, float strength, unsigned long start, unsigned long end) -> ProxPositiveFloat
        """
        this = _solver.new_ProxPositiveFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxPositiveFloat') -> "bool":
        """compare(ProxPositiveFloat self, ProxPositiveFloat that) -> bool"""
        return _solver.ProxPositiveFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxPositiveFloat
    __del__ = lambda self: None
ProxPositiveFloat_swigregister = _solver.ProxPositiveFloat_swigregister
ProxPositiveFloat_swigregister(ProxPositiveFloat)

class ProxL2SqDouble(TProxSeparableDouble):
    """Proxy of C++ TProxL2Sq<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2Sq<(double,double)> self) -> ProxL2SqDouble
        __init__(TProxL2Sq<(double,double)> self, double strength, bool positive) -> ProxL2SqDouble
        __init__(TProxL2Sq<(double,double)> self, double strength, ulong start, ulong end, bool positive) -> ProxL2SqDouble
        """
        this = _solver.new_ProxL2SqDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL2SqDouble') -> "bool":
        """compare(ProxL2SqDouble self, ProxL2SqDouble that) -> bool"""
        return _solver.ProxL2SqDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL2SqDouble
    __del__ = lambda self: None
ProxL2SqDouble_swigregister = _solver.ProxL2SqDouble_swigregister
ProxL2SqDouble_swigregister(ProxL2SqDouble)


def ProxL2SqDoubleDeserialize(ptr: 'ProxL2SqDouble', hex: 'std::string const &') -> "void":
    """ProxL2SqDoubleDeserialize(ProxL2SqDouble ptr, std::string const & hex)"""
    return _solver.ProxL2SqDoubleDeserialize(ptr, hex)

def ProxL2SqDoubleSerialize(ptr: 'ProxL2SqDouble') -> "std::string":
    """ProxL2SqDoubleSerialize(ProxL2SqDouble ptr) -> std::string"""
    return _solver.ProxL2SqDoubleSerialize(ptr)
class ProxL2SqFloat(TProxSeparableFloat):
    """Proxy of C++ TProxL2Sq<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2Sq<(float,float)> self) -> ProxL2SqFloat
        __init__(TProxL2Sq<(float,float)> self, float strength, bool positive) -> ProxL2SqFloat
        __init__(TProxL2Sq<(float,float)> self, float strength, ulong start, ulong end, bool positive) -> ProxL2SqFloat
        """
        this = _solver.new_ProxL2SqFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL2SqFloat') -> "bool":
        """compare(ProxL2SqFloat self, ProxL2SqFloat that) -> bool"""
        return _solver.ProxL2SqFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL2SqFloat
    __del__ = lambda self: None
ProxL2SqFloat_swigregister = _solver.ProxL2SqFloat_swigregister
ProxL2SqFloat_swigregister(ProxL2SqFloat)


def ProxL2SqFloatDeserialize(ptr: 'ProxL2SqFloat', hex: 'std::string const &') -> "void":
    """ProxL2SqFloatDeserialize(ProxL2SqFloat ptr, std::string const & hex)"""
    return _solver.ProxL2SqFloatDeserialize(ptr, hex)

def ProxL2SqFloatSerialize(ptr: 'ProxL2SqFloat') -> "std::string":
    """ProxL2SqFloatSerialize(ProxL2SqFloat ptr) -> std::string"""
    return _solver.ProxL2SqFloatSerialize(ptr)
class ProxL2Double(Prox):
    """Proxy of C++ TProxL2<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2<(double,double)> self, double strength, bool positive) -> ProxL2Double
        __init__(TProxL2<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Double
        """
        this = _solver.new_ProxL2Double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL2Double') -> "bool":
        """compare(ProxL2Double self, ProxL2Double that) -> bool"""
        return _solver.ProxL2Double_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL2Double
    __del__ = lambda self: None
ProxL2Double_swigregister = _solver.ProxL2Double_swigregister
ProxL2Double_swigregister(ProxL2Double)

class ProxL2Float(ProxFloat):
    """Proxy of C++ TProxL2<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL2<(float,float)> self, float strength, bool positive) -> ProxL2Float
        __init__(TProxL2<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxL2Float
        """
        this = _solver.new_ProxL2Float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL2Float') -> "bool":
        """compare(ProxL2Float self, ProxL2Float that) -> bool"""
        return _solver.ProxL2Float_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL2Float
    __del__ = lambda self: None
ProxL2Float_swigregister = _solver.ProxL2Float_swigregister
ProxL2Float_swigregister(ProxL2Float)

class ProxL1Double(TProxSeparableDouble):
    """Proxy of C++ ProxL1Double class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1Double self) -> ProxL1Double
        __init__(ProxL1Double self, double strength, bool positive) -> ProxL1Double
        __init__(ProxL1Double self, double strength, ulong start, ulong end, bool positive) -> ProxL1Double
        """
        this = _solver.new_ProxL1Double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL1Double') -> "bool":
        """compare(ProxL1Double self, ProxL1Double that) -> bool"""
        return _solver.ProxL1Double_compare(self, that)


    def __getstate__(self): return ProxL1DoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1DoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1Double
    __del__ = lambda self: None
ProxL1Double_swigregister = _solver.ProxL1Double_swigregister
ProxL1Double_swigregister(ProxL1Double)


def ProxL1DoubleDeserialize(ptr: 'ProxL1Double', hex: 'std::string const &') -> "void":
    """ProxL1DoubleDeserialize(ProxL1Double ptr, std::string const & hex)"""
    return _solver.ProxL1DoubleDeserialize(ptr, hex)

def ProxL1DoubleSerialize(ptr: 'ProxL1Double') -> "std::string":
    """ProxL1DoubleSerialize(ProxL1Double ptr) -> std::string"""
    return _solver.ProxL1DoubleSerialize(ptr)
class ProxL1Float(TProxSeparableFloat):
    """Proxy of C++ ProxL1Float class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ProxL1Float self) -> ProxL1Float
        __init__(ProxL1Float self, float strength, bool positive) -> ProxL1Float
        __init__(ProxL1Float self, float strength, ulong start, ulong end, bool positive) -> ProxL1Float
        """
        this = _solver.new_ProxL1Float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxL1Float') -> "bool":
        """compare(ProxL1Float self, ProxL1Float that) -> bool"""
        return _solver.ProxL1Float_compare(self, that)


    def __getstate__(self): return ProxL1FloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ProxL1FloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_ProxL1Float
    __del__ = lambda self: None
ProxL1Float_swigregister = _solver.ProxL1Float_swigregister
ProxL1Float_swigregister(ProxL1Float)


def ProxL1FloatDeserialize(ptr: 'ProxL1Float', hex: 'std::string const &') -> "void":
    """ProxL1FloatDeserialize(ProxL1Float ptr, std::string const & hex)"""
    return _solver.ProxL1FloatDeserialize(ptr, hex)

def ProxL1FloatSerialize(ptr: 'ProxL1Float') -> "std::string":
    """ProxL1FloatSerialize(ProxL1Float ptr) -> std::string"""
    return _solver.ProxL1FloatSerialize(ptr)
class ProxL1wDouble(TProxSeparableDouble):
    """Proxy of C++ TProxL1w<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL1w<(double,double)> self, double strength, SArrayDoublePtr weights, bool positive) -> ProxL1wDouble
        __init__(TProxL1w<(double,double)> self, double strength, SArrayDoublePtr weights, ulong start, ulong end, bool positive) -> ProxL1wDouble
        """
        this = _solver.new_ProxL1wDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_weights(self, weights: 'SArrayDoublePtr') -> "void":
        """set_weights(ProxL1wDouble self, SArrayDoublePtr weights)"""
        return _solver.ProxL1wDouble_set_weights(self, weights)


    def compare(self, that: 'ProxL1wDouble') -> "bool":
        """compare(ProxL1wDouble self, ProxL1wDouble that) -> bool"""
        return _solver.ProxL1wDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL1wDouble
    __del__ = lambda self: None
ProxL1wDouble_swigregister = _solver.ProxL1wDouble_swigregister
ProxL1wDouble_swigregister(ProxL1wDouble)

class ProxL1wFloat(TProxSeparableFloat):
    """Proxy of C++ TProxL1w<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxL1w<(float,float)> self, float strength, SArrayFloatPtr weights, bool positive) -> ProxL1wFloat
        __init__(TProxL1w<(float,float)> self, float strength, SArrayFloatPtr weights, ulong start, ulong end, bool positive) -> ProxL1wFloat
        """
        this = _solver.new_ProxL1wFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_weights(self, weights: 'SArrayFloatPtr') -> "void":
        """set_weights(ProxL1wFloat self, SArrayFloatPtr weights)"""
        return _solver.ProxL1wFloat_set_weights(self, weights)


    def compare(self, that: 'ProxL1wFloat') -> "bool":
        """compare(ProxL1wFloat self, ProxL1wFloat that) -> bool"""
        return _solver.ProxL1wFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxL1wFloat
    __del__ = lambda self: None
ProxL1wFloat_swigregister = _solver.ProxL1wFloat_swigregister
ProxL1wFloat_swigregister(ProxL1wFloat)

class ProxTVDouble(Prox):
    """Proxy of C++ TProxTV<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxTV<(double,double)> self, double strength, bool positive) -> ProxTVDouble
        __init__(TProxTV<(double,double)> self, double strength, unsigned long start, unsigned long end, bool positive) -> ProxTVDouble
        """
        this = _solver.new_ProxTVDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxTVDouble') -> "bool":
        """compare(ProxTVDouble self, ProxTVDouble that) -> bool"""
        return _solver.ProxTVDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxTVDouble
    __del__ = lambda self: None
ProxTVDouble_swigregister = _solver.ProxTVDouble_swigregister
ProxTVDouble_swigregister(ProxTVDouble)


def ProxTVDoubleDeserialize(ptr: 'ProxTVDouble', hex: 'std::string const &') -> "void":
    """ProxTVDoubleDeserialize(ProxTVDouble ptr, std::string const & hex)"""
    return _solver.ProxTVDoubleDeserialize(ptr, hex)

def ProxTVDoubleSerialize(ptr: 'ProxTVDouble') -> "std::string":
    """ProxTVDoubleSerialize(ProxTVDouble ptr) -> std::string"""
    return _solver.ProxTVDoubleSerialize(ptr)
class ProxTVFloat(ProxFloat):
    """Proxy of C++ TProxTV<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxTV<(float,float)> self, float strength, bool positive) -> ProxTVFloat
        __init__(TProxTV<(float,float)> self, float strength, unsigned long start, unsigned long end, bool positive) -> ProxTVFloat
        """
        this = _solver.new_ProxTVFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxTVFloat') -> "bool":
        """compare(ProxTVFloat self, ProxTVFloat that) -> bool"""
        return _solver.ProxTVFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxTVFloat
    __del__ = lambda self: None
ProxTVFloat_swigregister = _solver.ProxTVFloat_swigregister
ProxTVFloat_swigregister(ProxTVFloat)


def ProxTVFloatDeserialize(ptr: 'ProxTVFloat', hex: 'std::string const &') -> "void":
    """ProxTVFloatDeserialize(ProxTVFloat ptr, std::string const & hex)"""
    return _solver.ProxTVFloatDeserialize(ptr, hex)

def ProxTVFloatSerialize(ptr: 'ProxTVFloat') -> "std::string":
    """ProxTVFloatSerialize(ProxTVFloat ptr) -> std::string"""
    return _solver.ProxTVFloatSerialize(ptr)
class ProxElasticNetDouble(TProxSeparableDouble):
    """Proxy of C++ TProxElasticNet<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(double,double)> self) -> ProxElasticNetDouble
        __init__(TProxElasticNet<(double,double)> self, double strength, double ratio, bool positive) -> ProxElasticNetDouble
        __init__(TProxElasticNet<(double,double)> self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetDouble
        """
        this = _solver.new_ProxElasticNetDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_ratio(self) -> "double":
        """get_ratio(ProxElasticNetDouble self) -> double"""
        return _solver.ProxElasticNetDouble_get_ratio(self)


    def set_ratio(self, ratio: 'double') -> "void":
        """set_ratio(ProxElasticNetDouble self, double ratio)"""
        return _solver.ProxElasticNetDouble_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetDouble') -> "bool":
        """compare(ProxElasticNetDouble self, ProxElasticNetDouble that) -> bool"""
        return _solver.ProxElasticNetDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxElasticNetDouble
    __del__ = lambda self: None
ProxElasticNetDouble_swigregister = _solver.ProxElasticNetDouble_swigregister
ProxElasticNetDouble_swigregister(ProxElasticNetDouble)


def ProxElasticNetDoubleDeserialize(ptr: 'ProxElasticNetDouble', hex: 'std::string const &') -> "void":
    """ProxElasticNetDoubleDeserialize(ProxElasticNetDouble ptr, std::string const & hex)"""
    return _solver.ProxElasticNetDoubleDeserialize(ptr, hex)

def ProxElasticNetDoubleSerialize(ptr: 'ProxElasticNetDouble') -> "std::string":
    """ProxElasticNetDoubleSerialize(ProxElasticNetDouble ptr) -> std::string"""
    return _solver.ProxElasticNetDoubleSerialize(ptr)
class ProxElasticNetFloat(TProxSeparableFloat):
    """Proxy of C++ TProxElasticNet<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(float,float)> self) -> ProxElasticNetFloat
        __init__(TProxElasticNet<(float,float)> self, float strength, float ratio, bool positive) -> ProxElasticNetFloat
        __init__(TProxElasticNet<(float,float)> self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetFloat
        """
        this = _solver.new_ProxElasticNetFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_ratio(self) -> "float":
        """get_ratio(ProxElasticNetFloat self) -> float"""
        return _solver.ProxElasticNetFloat_get_ratio(self)


    def set_ratio(self, ratio: 'float') -> "void":
        """set_ratio(ProxElasticNetFloat self, float ratio)"""
        return _solver.ProxElasticNetFloat_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetFloat') -> "bool":
        """compare(ProxElasticNetFloat self, ProxElasticNetFloat that) -> bool"""
        return _solver.ProxElasticNetFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxElasticNetFloat
    __del__ = lambda self: None
ProxElasticNetFloat_swigregister = _solver.ProxElasticNetFloat_swigregister
ProxElasticNetFloat_swigregister(ProxElasticNetFloat)


def ProxElasticNetFloatDeserialize(ptr: 'ProxElasticNetFloat', hex: 'std::string const &') -> "void":
    """ProxElasticNetFloatDeserialize(ProxElasticNetFloat ptr, std::string const & hex)"""
    return _solver.ProxElasticNetFloatDeserialize(ptr, hex)

def ProxElasticNetFloatSerialize(ptr: 'ProxElasticNetFloat') -> "std::string":
    """ProxElasticNetFloatSerialize(ProxElasticNetFloat ptr) -> std::string"""
    return _solver.ProxElasticNetFloatSerialize(ptr)
class ProxElasticNetAtomicDouble(TProxSeparableAtomicDouble):
    """Proxy of C++ TProxElasticNet<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self) -> ProxElasticNetAtomicDouble
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self, double strength, double ratio, bool positive) -> ProxElasticNetAtomicDouble
        __init__(TProxElasticNet<(double,std::atomic<(double)>)> self, double strength, double ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicDouble
        """
        this = _solver.new_ProxElasticNetAtomicDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_ratio(self) -> "double":
        """get_ratio(ProxElasticNetAtomicDouble self) -> double"""
        return _solver.ProxElasticNetAtomicDouble_get_ratio(self)


    def set_ratio(self, ratio: 'double') -> "void":
        """set_ratio(ProxElasticNetAtomicDouble self, double ratio)"""
        return _solver.ProxElasticNetAtomicDouble_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetAtomicDouble') -> "bool":
        """compare(ProxElasticNetAtomicDouble self, ProxElasticNetAtomicDouble that) -> bool"""
        return _solver.ProxElasticNetAtomicDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxElasticNetAtomicDouble
    __del__ = lambda self: None
ProxElasticNetAtomicDouble_swigregister = _solver.ProxElasticNetAtomicDouble_swigregister
ProxElasticNetAtomicDouble_swigregister(ProxElasticNetAtomicDouble)

class ProxElasticNetAtomicFloat(TProxSeparableAtomicFloat):
    """Proxy of C++ TProxElasticNet<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self) -> ProxElasticNetAtomicFloat
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self, float strength, float ratio, bool positive) -> ProxElasticNetAtomicFloat
        __init__(TProxElasticNet<(float,std::atomic<(float)>)> self, float strength, float ratio, ulong start, ulong end, bool positive) -> ProxElasticNetAtomicFloat
        """
        this = _solver.new_ProxElasticNetAtomicFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_ratio(self) -> "float":
        """get_ratio(ProxElasticNetAtomicFloat self) -> float"""
        return _solver.ProxElasticNetAtomicFloat_get_ratio(self)


    def set_ratio(self, ratio: 'float') -> "void":
        """set_ratio(ProxElasticNetAtomicFloat self, float ratio)"""
        return _solver.ProxElasticNetAtomicFloat_set_ratio(self, ratio)


    def compare(self, that: 'ProxElasticNetAtomicFloat') -> "bool":
        """compare(ProxElasticNetAtomicFloat self, ProxElasticNetAtomicFloat that) -> bool"""
        return _solver.ProxElasticNetAtomicFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxElasticNetAtomicFloat
    __del__ = lambda self: None
ProxElasticNetAtomicFloat_swigregister = _solver.ProxElasticNetAtomicFloat_swigregister
ProxElasticNetAtomicFloat_swigregister(ProxElasticNetAtomicFloat)

class ProxSlope(Prox):
    """Proxy of C++ TProxSlope<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, bool positive) -> ProxSlope
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlope
        """
        this = _solver.new_ProxSlope(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_false_discovery_rate(self) -> "double":
        """get_false_discovery_rate(ProxSlope self) -> double"""
        return _solver.ProxSlope_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        """set_false_discovery_rate(ProxSlope self, double fdr)"""
        return _solver.ProxSlope_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "double":
        """get_weight_i(ProxSlope self, unsigned long i) -> double"""
        return _solver.ProxSlope_get_weight_i(self, i)


    def compare(self, that: 'ProxSlope') -> "bool":
        """compare(ProxSlope self, ProxSlope that) -> bool"""
        return _solver.ProxSlope_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxSlope
    __del__ = lambda self: None
ProxSlope_swigregister = _solver.ProxSlope_swigregister
ProxSlope_swigregister(ProxSlope)

class ProxSlopeDouble(Prox):
    """Proxy of C++ TProxSlope<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, bool positive) -> ProxSlopeDouble
        __init__(TProxSlope<(double,double)> self, double arg2, double fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeDouble
        """
        this = _solver.new_ProxSlopeDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_false_discovery_rate(self) -> "double":
        """get_false_discovery_rate(ProxSlopeDouble self) -> double"""
        return _solver.ProxSlopeDouble_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'double') -> "void":
        """set_false_discovery_rate(ProxSlopeDouble self, double fdr)"""
        return _solver.ProxSlopeDouble_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "double":
        """get_weight_i(ProxSlopeDouble self, unsigned long i) -> double"""
        return _solver.ProxSlopeDouble_get_weight_i(self, i)


    def compare(self, that: 'ProxSlope') -> "bool":
        """compare(ProxSlopeDouble self, ProxSlope that) -> bool"""
        return _solver.ProxSlopeDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxSlopeDouble
    __del__ = lambda self: None
ProxSlopeDouble_swigregister = _solver.ProxSlopeDouble_swigregister
ProxSlopeDouble_swigregister(ProxSlopeDouble)

class ProxSlopeFloat(ProxFloat):
    """Proxy of C++ TProxSlope<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxSlope<(float,float)> self, float arg2, float fdr, bool positive) -> ProxSlopeFloat
        __init__(TProxSlope<(float,float)> self, float arg2, float fdr, unsigned long start, unsigned long end, bool positive) -> ProxSlopeFloat
        """
        this = _solver.new_ProxSlopeFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_false_discovery_rate(self) -> "float":
        """get_false_discovery_rate(ProxSlopeFloat self) -> float"""
        return _solver.ProxSlopeFloat_get_false_discovery_rate(self)


    def set_false_discovery_rate(self, fdr: 'float') -> "void":
        """set_false_discovery_rate(ProxSlopeFloat self, float fdr)"""
        return _solver.ProxSlopeFloat_set_false_discovery_rate(self, fdr)


    def get_weight_i(self, i: 'unsigned long') -> "float":
        """get_weight_i(ProxSlopeFloat self, unsigned long i) -> float"""
        return _solver.ProxSlopeFloat_get_weight_i(self, i)


    def compare(self, that: 'ProxSlopeFloat') -> "bool":
        """compare(ProxSlopeFloat self, ProxSlopeFloat that) -> bool"""
        return _solver.ProxSlopeFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxSlopeFloat
    __del__ = lambda self: None
ProxSlopeFloat_swigregister = _solver.ProxSlopeFloat_swigregister
ProxSlopeFloat_swigregister(ProxSlopeFloat)

class ProxDoublePtrVector(object):
    """Proxy of C++ std::vector<(ProxDoublePtr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(ProxDoublePtrVector self) -> SwigPyIterator"""
        return _solver.ProxDoublePtrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """__len__(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< double,double > >,std::allocator< std::shared_ptr< TProx< double,double > > > > *":
        """__getslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j) -> ProxDoublePtrVector"""
        return _solver.ProxDoublePtrVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)
        __setslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j, ProxDoublePtrVector v)
        """
        return _solver.ProxDoublePtrVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< double,double > > >::difference_type') -> "void":
        """__delslice__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type j)"""
        return _solver.ProxDoublePtrVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i)
        __delitem__(ProxDoublePtrVector self, PySliceObject * slice)
        """
        return _solver.ProxDoublePtrVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """
        __getitem__(ProxDoublePtrVector self, PySliceObject * slice) -> ProxDoublePtrVector
        __getitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &
        """
        return _solver.ProxDoublePtrVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice, ProxDoublePtrVector v)
        __setitem__(ProxDoublePtrVector self, PySliceObject * slice)
        __setitem__(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::difference_type i, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type":
        """pop(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type"""
        return _solver.ProxDoublePtrVector_pop(self)


    def append(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """append(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_append(self, x)


    def empty(self) -> "bool":
        """empty(ProxDoublePtrVector self) -> bool"""
        return _solver.ProxDoublePtrVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """size(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector_size(self)


    def swap(self, v: 'ProxDoublePtrVector') -> "void":
        """swap(ProxDoublePtrVector self, ProxDoublePtrVector v)"""
        return _solver.ProxDoublePtrVector_swap(self, v)


    def begin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """begin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _solver.ProxDoublePtrVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """end(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator"""
        return _solver.ProxDoublePtrVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        """rbegin(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _solver.ProxDoublePtrVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator":
        """rend(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::reverse_iterator"""
        return _solver.ProxDoublePtrVector_rend(self)


    def clear(self) -> "void":
        """clear(ProxDoublePtrVector self)"""
        return _solver.ProxDoublePtrVector_clear(self)


    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type":
        """get_allocator(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::allocator_type"""
        return _solver.ProxDoublePtrVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(ProxDoublePtrVector self)"""
        return _solver.ProxDoublePtrVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< double,double > > >::iterator":
        """
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        erase(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator first, std::vector< std::shared_ptr< TProx< double,double > > >::iterator last) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        """
        return _solver.ProxDoublePtrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ProxDoublePtr)> self) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, ProxDoublePtrVector arg2) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size) -> ProxDoublePtrVector
        __init__(std::vector<(ProxDoublePtr)> self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & value) -> ProxDoublePtrVector
        """
        this = _solver.new_ProxDoublePtrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """push_back(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """front(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _solver.ProxDoublePtrVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &":
        """back(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &"""
        return _solver.ProxDoublePtrVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< double,double > > >::value_type const &') -> "void":
        """assign(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)"""
        return _solver.ProxDoublePtrVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size)
        resize(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type new_size, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< double,double > > >::iterator
        insert(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::iterator pos, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n, std::vector< std::shared_ptr< TProx< double,double > > >::value_type const & x)
        """
        return _solver.ProxDoublePtrVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< double,double > > >::size_type') -> "void":
        """reserve(ProxDoublePtrVector self, std::vector< std::shared_ptr< TProx< double,double > > >::size_type n)"""
        return _solver.ProxDoublePtrVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< TProx< double,double > > >::size_type":
        """capacity(ProxDoublePtrVector self) -> std::vector< std::shared_ptr< TProx< double,double > > >::size_type"""
        return _solver.ProxDoublePtrVector_capacity(self)

    __swig_destroy__ = _solver.delete_ProxDoublePtrVector
    __del__ = lambda self: None
ProxDoublePtrVector_swigregister = _solver.ProxDoublePtrVector_swigregister
ProxDoublePtrVector_swigregister(ProxDoublePtrVector)

class ProxFloatPtrVector(object):
    """Proxy of C++ std::vector<(ProxFloatPtr)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(ProxFloatPtrVector self) -> SwigPyIterator"""
        return _solver.ProxFloatPtrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """__len__(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "std::vector< std::shared_ptr< TProx< float,float > >,std::allocator< std::shared_ptr< TProx< float,float > > > > *":
        """__getslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j) -> ProxFloatPtrVector"""
        return _solver.ProxFloatPtrVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)
        __setslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j, ProxFloatPtrVector v)
        """
        return _solver.ProxFloatPtrVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type', j: 'std::vector< std::shared_ptr< TProx< float,float > > >::difference_type') -> "void":
        """__delslice__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type j)"""
        return _solver.ProxFloatPtrVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i)
        __delitem__(ProxFloatPtrVector self, PySliceObject * slice)
        """
        return _solver.ProxFloatPtrVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """
        __getitem__(ProxFloatPtrVector self, PySliceObject * slice) -> ProxFloatPtrVector
        __getitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &
        """
        return _solver.ProxFloatPtrVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice, ProxFloatPtrVector v)
        __setitem__(ProxFloatPtrVector self, PySliceObject * slice)
        __setitem__(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::difference_type i, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type":
        """pop(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type"""
        return _solver.ProxFloatPtrVector_pop(self)


    def append(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """append(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_append(self, x)


    def empty(self) -> "bool":
        """empty(ProxFloatPtrVector self) -> bool"""
        return _solver.ProxFloatPtrVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """size(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector_size(self)


    def swap(self, v: 'ProxFloatPtrVector') -> "void":
        """swap(ProxFloatPtrVector self, ProxFloatPtrVector v)"""
        return _solver.ProxFloatPtrVector_swap(self, v)


    def begin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """begin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _solver.ProxFloatPtrVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """end(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator"""
        return _solver.ProxFloatPtrVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        """rbegin(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _solver.ProxFloatPtrVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator":
        """rend(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::reverse_iterator"""
        return _solver.ProxFloatPtrVector_rend(self)


    def clear(self) -> "void":
        """clear(ProxFloatPtrVector self)"""
        return _solver.ProxFloatPtrVector_clear(self)


    def get_allocator(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type":
        """get_allocator(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::allocator_type"""
        return _solver.ProxFloatPtrVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(ProxFloatPtrVector self)"""
        return _solver.ProxFloatPtrVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< TProx< float,float > > >::iterator":
        """
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        erase(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator first, std::vector< std::shared_ptr< TProx< float,float > > >::iterator last) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        """
        return _solver.ProxFloatPtrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(ProxFloatPtr)> self) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, ProxFloatPtrVector arg2) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size) -> ProxFloatPtrVector
        __init__(std::vector<(ProxFloatPtr)> self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & value) -> ProxFloatPtrVector
        """
        this = _solver.new_ProxFloatPtrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """push_back(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """front(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _solver.ProxFloatPtrVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &":
        """back(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &"""
        return _solver.ProxFloatPtrVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type', x: 'std::vector< std::shared_ptr< TProx< float,float > > >::value_type const &') -> "void":
        """assign(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)"""
        return _solver.ProxFloatPtrVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size)
        resize(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type new_size, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x) -> std::vector< std::shared_ptr< TProx< float,float > > >::iterator
        insert(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::iterator pos, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n, std::vector< std::shared_ptr< TProx< float,float > > >::value_type const & x)
        """
        return _solver.ProxFloatPtrVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< TProx< float,float > > >::size_type') -> "void":
        """reserve(ProxFloatPtrVector self, std::vector< std::shared_ptr< TProx< float,float > > >::size_type n)"""
        return _solver.ProxFloatPtrVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< TProx< float,float > > >::size_type":
        """capacity(ProxFloatPtrVector self) -> std::vector< std::shared_ptr< TProx< float,float > > >::size_type"""
        return _solver.ProxFloatPtrVector_capacity(self)

    __swig_destroy__ = _solver.delete_ProxFloatPtrVector
    __del__ = lambda self: None
ProxFloatPtrVector_swigregister = _solver.ProxFloatPtrVector_swigregister
ProxFloatPtrVector_swigregister(ProxFloatPtrVector)

class ProxMultiDouble(Prox):
    """Proxy of C++ TProxMulti<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxDoublePtrVector'):
        """__init__(TProxMulti<(double,double)> self, ProxDoublePtrVector proxs) -> ProxMultiDouble"""
        this = _solver.new_ProxMultiDouble(proxs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solver.delete_ProxMultiDouble
    __del__ = lambda self: None
ProxMultiDouble_swigregister = _solver.ProxMultiDouble_swigregister
ProxMultiDouble_swigregister(ProxMultiDouble)

class ProxMultiFloat(ProxFloat):
    """Proxy of C++ TProxMulti<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, proxs: 'ProxFloatPtrVector'):
        """__init__(TProxMulti<(float,float)> self, ProxFloatPtrVector proxs) -> ProxMultiFloat"""
        this = _solver.new_ProxMultiFloat(proxs)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solver.delete_ProxMultiFloat
    __del__ = lambda self: None
ProxMultiFloat_swigregister = _solver.ProxMultiFloat_swigregister
ProxMultiFloat_swigregister(ProxMultiFloat)

class ProxEquality(Prox):
    """Proxy of C++ TProxEquality<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxEquality<(double,double)> self, double strength, bool positive) -> ProxEquality
        __init__(TProxEquality<(double,double)> self, double strength, ulong start, ulong end, bool positive) -> ProxEquality
        """
        this = _solver.new_ProxEquality(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxEquality') -> "bool":
        """compare(ProxEquality self, ProxEquality that) -> bool"""
        return _solver.ProxEquality_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxEquality
    __del__ = lambda self: None
ProxEquality_swigregister = _solver.ProxEquality_swigregister
ProxEquality_swigregister(ProxEquality)

class ProxEqualityDouble(Prox):
    """Proxy of C++ TProxEquality<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxEquality<(double,double)> self, double strength, bool positive) -> ProxEqualityDouble
        __init__(TProxEquality<(double,double)> self, double strength, ulong start, ulong end, bool positive) -> ProxEqualityDouble
        """
        this = _solver.new_ProxEqualityDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxEquality') -> "bool":
        """compare(ProxEqualityDouble self, ProxEquality that) -> bool"""
        return _solver.ProxEqualityDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxEqualityDouble
    __del__ = lambda self: None
ProxEqualityDouble_swigregister = _solver.ProxEqualityDouble_swigregister
ProxEqualityDouble_swigregister(ProxEqualityDouble)

class ProxEqualityFloat(ProxFloat):
    """Proxy of C++ TProxEquality<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxEquality<(float,float)> self, float strength, bool positive) -> ProxEqualityFloat
        __init__(TProxEquality<(float,float)> self, float strength, ulong start, ulong end, bool positive) -> ProxEqualityFloat
        """
        this = _solver.new_ProxEqualityFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'ProxEqualityFloat') -> "bool":
        """compare(ProxEqualityFloat self, ProxEqualityFloat that) -> bool"""
        return _solver.ProxEqualityFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxEqualityFloat
    __del__ = lambda self: None
ProxEqualityFloat_swigregister = _solver.ProxEqualityFloat_swigregister
ProxEqualityFloat_swigregister(ProxEqualityFloat)

class ProxWithGroupsDouble(Prox):
    """Proxy of C++ TProxWithGroups<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxWithGroups<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsDouble
        __init__(TProxWithGroups<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsDouble
        """
        this = _solver.new_ProxWithGroupsDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solver.delete_ProxWithGroupsDouble
    __del__ = lambda self: None
ProxWithGroupsDouble_swigregister = _solver.ProxWithGroupsDouble_swigregister
ProxWithGroupsDouble_swigregister(ProxWithGroupsDouble)

class ProxWithGroupsFloat(ProxFloat):
    """Proxy of C++ TProxWithGroups<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxWithGroups<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxWithGroupsFloat
        __init__(TProxWithGroups<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxWithGroupsFloat
        """
        this = _solver.new_ProxWithGroupsFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _solver.delete_ProxWithGroupsFloat
    __del__ = lambda self: None
ProxWithGroupsFloat_swigregister = _solver.ProxWithGroupsFloat_swigregister
ProxWithGroupsFloat_swigregister(ProxWithGroupsFloat)

class ProxBinarsityDouble(ProxWithGroupsDouble):
    """Proxy of C++ TProxBinarsity<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxBinarsity<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityDouble
        __init__(TProxBinarsity<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityDouble
        """
        this = _solver.new_ProxBinarsityDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxBinarsityDouble self, bool positive)"""
        return _solver.ProxBinarsityDouble_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxBinarsityDouble self, SArrayULongPtr blocks_start)"""
        return _solver.ProxBinarsityDouble_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxBinarsityDouble self, SArrayULongPtr blocks_length)"""
        return _solver.ProxBinarsityDouble_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxBinarsityDouble') -> "bool":
        """compare(ProxBinarsityDouble self, ProxBinarsityDouble that) -> bool"""
        return _solver.ProxBinarsityDouble_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxBinarsityDouble
    __del__ = lambda self: None
ProxBinarsityDouble_swigregister = _solver.ProxBinarsityDouble_swigregister
ProxBinarsityDouble_swigregister(ProxBinarsityDouble)

class ProxBinarsityFloat(ProxWithGroupsFloat):
    """Proxy of C++ TProxBinarsity<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxBinarsity<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxBinarsityFloat
        __init__(TProxBinarsity<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxBinarsityFloat
        """
        this = _solver.new_ProxBinarsityFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxBinarsityFloat self, bool positive)"""
        return _solver.ProxBinarsityFloat_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxBinarsityFloat self, SArrayULongPtr blocks_start)"""
        return _solver.ProxBinarsityFloat_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxBinarsityFloat self, SArrayULongPtr blocks_length)"""
        return _solver.ProxBinarsityFloat_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxBinarsityFloat') -> "bool":
        """compare(ProxBinarsityFloat self, ProxBinarsityFloat that) -> bool"""
        return _solver.ProxBinarsityFloat_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxBinarsityFloat
    __del__ = lambda self: None
ProxBinarsityFloat_swigregister = _solver.ProxBinarsityFloat_swigregister
ProxBinarsityFloat_swigregister(ProxBinarsityFloat)

class ProxGroupL1Double(ProxWithGroupsDouble):
    """Proxy of C++ TProxGroupL1<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxGroupL1<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Double
        __init__(TProxGroupL1<(double,double)> self, double strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Double
        """
        this = _solver.new_ProxGroupL1Double(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxGroupL1Double self, bool positive)"""
        return _solver.ProxGroupL1Double_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxGroupL1Double self, SArrayULongPtr blocks_start)"""
        return _solver.ProxGroupL1Double_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxGroupL1Double self, SArrayULongPtr blocks_length)"""
        return _solver.ProxGroupL1Double_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxGroupL1Double') -> "bool":
        """compare(ProxGroupL1Double self, ProxGroupL1Double that) -> bool"""
        return _solver.ProxGroupL1Double_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxGroupL1Double
    __del__ = lambda self: None
ProxGroupL1Double_swigregister = _solver.ProxGroupL1Double_swigregister
ProxGroupL1Double_swigregister(ProxGroupL1Double)

class ProxGroupL1Float(ProxWithGroupsFloat):
    """Proxy of C++ TProxGroupL1<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TProxGroupL1<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, bool positive) -> ProxGroupL1Float
        __init__(TProxGroupL1<(float,float)> self, float strength, SArrayULongPtr blocks_start, SArrayULongPtr blocks_length, ulong start, ulong end, bool positive) -> ProxGroupL1Float
        """
        this = _solver.new_ProxGroupL1Float(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_positive(self, positive: 'bool') -> "void":
        """set_positive(ProxGroupL1Float self, bool positive)"""
        return _solver.ProxGroupL1Float_set_positive(self, positive)


    def set_blocks_start(self, blocks_start: 'SArrayULongPtr') -> "void":
        """set_blocks_start(ProxGroupL1Float self, SArrayULongPtr blocks_start)"""
        return _solver.ProxGroupL1Float_set_blocks_start(self, blocks_start)


    def set_blocks_length(self, blocks_length: 'SArrayULongPtr') -> "void":
        """set_blocks_length(ProxGroupL1Float self, SArrayULongPtr blocks_length)"""
        return _solver.ProxGroupL1Float_set_blocks_length(self, blocks_length)


    def compare(self, that: 'ProxGroupL1Float') -> "bool":
        """compare(ProxGroupL1Float self, ProxGroupL1Float that) -> bool"""
        return _solver.ProxGroupL1Float_compare(self, that)

    __swig_destroy__ = _solver.delete_ProxGroupL1Float
    __del__ = lambda self: None
ProxGroupL1Float_swigregister = _solver.ProxGroupL1Float_swigregister
ProxGroupL1Float_swigregister(ProxGroupL1Float)

class IntVector(object):
    """Proxy of C++ std::vector<(int)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(IntVector self) -> SwigPyIterator"""
        return _solver.IntVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(IntVector self) -> bool"""
        return _solver.IntVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(IntVector self) -> bool"""
        return _solver.IntVector___bool__(self)


    def __len__(self) -> "std::vector< int >::size_type":
        """__len__(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector___len__(self)


    def __getslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "std::vector< int,std::allocator< int > > *":
        """__getslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> IntVector"""
        return _solver.IntVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        __setslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, IntVector v)
        """
        return _solver.IntVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< int >::difference_type', j: 'std::vector< int >::difference_type') -> "void":
        """__delslice__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _solver.IntVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(IntVector self, std::vector< int >::difference_type i)
        __delitem__(IntVector self, PySliceObject * slice)
        """
        return _solver.IntVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< int >::value_type const &":
        """
        __getitem__(IntVector self, PySliceObject * slice) -> IntVector
        __getitem__(IntVector self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _solver.IntVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(IntVector self, PySliceObject * slice, IntVector v)
        __setitem__(IntVector self, PySliceObject * slice)
        __setitem__(IntVector self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector___setitem__(self, *args)


    def pop(self) -> "std::vector< int >::value_type":
        """pop(IntVector self) -> std::vector< int >::value_type"""
        return _solver.IntVector_pop(self)


    def append(self, x: 'std::vector< int >::value_type const &') -> "void":
        """append(IntVector self, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_append(self, x)


    def empty(self) -> "bool":
        """empty(IntVector self) -> bool"""
        return _solver.IntVector_empty(self)


    def size(self) -> "std::vector< int >::size_type":
        """size(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector_size(self)


    def swap(self, v: 'IntVector') -> "void":
        """swap(IntVector self, IntVector v)"""
        return _solver.IntVector_swap(self, v)


    def begin(self) -> "std::vector< int >::iterator":
        """begin(IntVector self) -> std::vector< int >::iterator"""
        return _solver.IntVector_begin(self)


    def end(self) -> "std::vector< int >::iterator":
        """end(IntVector self) -> std::vector< int >::iterator"""
        return _solver.IntVector_end(self)


    def rbegin(self) -> "std::vector< int >::reverse_iterator":
        """rbegin(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _solver.IntVector_rbegin(self)


    def rend(self) -> "std::vector< int >::reverse_iterator":
        """rend(IntVector self) -> std::vector< int >::reverse_iterator"""
        return _solver.IntVector_rend(self)


    def clear(self) -> "void":
        """clear(IntVector self)"""
        return _solver.IntVector_clear(self)


    def get_allocator(self) -> "std::vector< int >::allocator_type":
        """get_allocator(IntVector self) -> std::vector< int >::allocator_type"""
        return _solver.IntVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(IntVector self)"""
        return _solver.IntVector_pop_back(self)


    def erase(self, *args) -> "std::vector< int >::iterator":
        """
        erase(IntVector self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(IntVector self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _solver.IntVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(int)> self) -> IntVector
        __init__(std::vector<(int)> self, IntVector arg2) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size) -> IntVector
        __init__(std::vector<(int)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> IntVector
        """
        this = _solver.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< int >::value_type const &') -> "void":
        """push_back(IntVector self, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_push_back(self, x)


    def front(self) -> "std::vector< int >::value_type const &":
        """front(IntVector self) -> std::vector< int >::value_type const &"""
        return _solver.IntVector_front(self)


    def back(self) -> "std::vector< int >::value_type const &":
        """back(IntVector self) -> std::vector< int >::value_type const &"""
        return _solver.IntVector_back(self)


    def assign(self, n: 'std::vector< int >::size_type', x: 'std::vector< int >::value_type const &') -> "void":
        """assign(IntVector self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _solver.IntVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(IntVector self, std::vector< int >::size_type new_size)
        resize(IntVector self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(IntVector self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _solver.IntVector_insert(self, *args)


    def reserve(self, n: 'std::vector< int >::size_type') -> "void":
        """reserve(IntVector self, std::vector< int >::size_type n)"""
        return _solver.IntVector_reserve(self, n)


    def capacity(self) -> "std::vector< int >::size_type":
        """capacity(IntVector self) -> std::vector< int >::size_type"""
        return _solver.IntVector_capacity(self)

    __swig_destroy__ = _solver.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _solver.IntVector_swigregister
IntVector_swigregister(IntVector)

class DoubleVector(object):
    """Proxy of C++ std::vector<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(DoubleVector self) -> SwigPyIterator"""
        return _solver.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(DoubleVector self) -> bool"""
        return _solver.DoubleVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(DoubleVector self) -> bool"""
        return _solver.DoubleVector___bool__(self)


    def __len__(self) -> "std::vector< double >::size_type":
        """__len__(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector___len__(self)


    def __getslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "std::vector< double,std::allocator< double > > *":
        """__getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector"""
        return _solver.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)
        """
        return _solver.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< double >::difference_type', j: 'std::vector< double >::difference_type') -> "void":
        """__delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _solver.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)
        __delitem__(DoubleVector self, PySliceObject * slice)
        """
        return _solver.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< double >::value_type const &":
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector
        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _solver.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)
        __setitem__(DoubleVector self, PySliceObject * slice)
        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector___setitem__(self, *args)


    def pop(self) -> "std::vector< double >::value_type":
        """pop(DoubleVector self) -> std::vector< double >::value_type"""
        return _solver.DoubleVector_pop(self)


    def append(self, x: 'std::vector< double >::value_type const &') -> "void":
        """append(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_append(self, x)


    def empty(self) -> "bool":
        """empty(DoubleVector self) -> bool"""
        return _solver.DoubleVector_empty(self)


    def size(self) -> "std::vector< double >::size_type":
        """size(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector_size(self)


    def swap(self, v: 'DoubleVector') -> "void":
        """swap(DoubleVector self, DoubleVector v)"""
        return _solver.DoubleVector_swap(self, v)


    def begin(self) -> "std::vector< double >::iterator":
        """begin(DoubleVector self) -> std::vector< double >::iterator"""
        return _solver.DoubleVector_begin(self)


    def end(self) -> "std::vector< double >::iterator":
        """end(DoubleVector self) -> std::vector< double >::iterator"""
        return _solver.DoubleVector_end(self)


    def rbegin(self) -> "std::vector< double >::reverse_iterator":
        """rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _solver.DoubleVector_rbegin(self)


    def rend(self) -> "std::vector< double >::reverse_iterator":
        """rend(DoubleVector self) -> std::vector< double >::reverse_iterator"""
        return _solver.DoubleVector_rend(self)


    def clear(self) -> "void":
        """clear(DoubleVector self)"""
        return _solver.DoubleVector_clear(self)


    def get_allocator(self) -> "std::vector< double >::allocator_type":
        """get_allocator(DoubleVector self) -> std::vector< double >::allocator_type"""
        return _solver.DoubleVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(DoubleVector self)"""
        return _solver.DoubleVector_pop_back(self)


    def erase(self, *args) -> "std::vector< double >::iterator":
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _solver.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector
        """
        this = _solver.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< double >::value_type const &') -> "void":
        """push_back(DoubleVector self, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_push_back(self, x)


    def front(self) -> "std::vector< double >::value_type const &":
        """front(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _solver.DoubleVector_front(self)


    def back(self) -> "std::vector< double >::value_type const &":
        """back(DoubleVector self) -> std::vector< double >::value_type const &"""
        return _solver.DoubleVector_back(self)


    def assign(self, n: 'std::vector< double >::size_type', x: 'std::vector< double >::value_type const &') -> "void":
        """assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _solver.DoubleVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)
        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _solver.DoubleVector_insert(self, *args)


    def reserve(self, n: 'std::vector< double >::size_type') -> "void":
        """reserve(DoubleVector self, std::vector< double >::size_type n)"""
        return _solver.DoubleVector_reserve(self, n)


    def capacity(self) -> "std::vector< double >::size_type":
        """capacity(DoubleVector self) -> std::vector< double >::size_type"""
        return _solver.DoubleVector_capacity(self)

    __swig_destroy__ = _solver.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _solver.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class SArrayDoubleVector(object):
    """Proxy of C++ std::vector<(std::shared_ptr<(SArray<(double)>)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(SArrayDoubleVector self) -> SwigPyIterator"""
        return _solver.SArrayDoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        """__len__(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type') -> "std::vector< std::shared_ptr< SArray< double > >,std::allocator< std::shared_ptr< SArray< double > > > > *":
        """__getslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j) -> SArrayDoubleVector"""
        return _solver.SArrayDoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j)
        __setslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j, SArrayDoubleVector v)
        """
        return _solver.SArrayDoubleVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< double > > >::difference_type') -> "void":
        """__delslice__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::difference_type j)"""
        return _solver.SArrayDoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i)
        __delitem__(SArrayDoubleVector self, PySliceObject * slice)
        """
        return _solver.SArrayDoubleVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        """
        __getitem__(SArrayDoubleVector self, PySliceObject * slice) -> SArrayDoubleVector
        __getitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &
        """
        return _solver.SArrayDoubleVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(SArrayDoubleVector self, PySliceObject * slice, SArrayDoubleVector v)
        __setitem__(SArrayDoubleVector self, PySliceObject * slice)
        __setitem__(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::difference_type i, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type":
        """pop(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type"""
        return _solver.SArrayDoubleVector_pop(self)


    def append(self, x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        """append(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_append(self, x)


    def empty(self) -> "bool":
        """empty(SArrayDoubleVector self) -> bool"""
        return _solver.SArrayDoubleVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        """size(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector_size(self)


    def swap(self, v: 'SArrayDoubleVector') -> "void":
        """swap(SArrayDoubleVector self, SArrayDoubleVector v)"""
        return _solver.SArrayDoubleVector_swap(self, v)


    def begin(self) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        """begin(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::iterator"""
        return _solver.SArrayDoubleVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        """end(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::iterator"""
        return _solver.SArrayDoubleVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator":
        """rbegin(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator"""
        return _solver.SArrayDoubleVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator":
        """rend(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::reverse_iterator"""
        return _solver.SArrayDoubleVector_rend(self)


    def clear(self) -> "void":
        """clear(SArrayDoubleVector self)"""
        return _solver.SArrayDoubleVector_clear(self)


    def get_allocator(self) -> "std::vector< std::shared_ptr< SArray< double > > >::allocator_type":
        """get_allocator(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::allocator_type"""
        return _solver.SArrayDoubleVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(SArrayDoubleVector self)"""
        return _solver.SArrayDoubleVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< SArray< double > > >::iterator":
        """
        erase(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        erase(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator first, std::vector< std::shared_ptr< SArray< double > > >::iterator last) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        """
        return _solver.SArrayDoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::shared_ptr<(SArray<(double)>)>)> self) -> SArrayDoubleVector
        __init__(std::vector<(std::shared_ptr<(SArray<(double)>)>)> self, SArrayDoubleVector arg2) -> SArrayDoubleVector
        __init__(std::vector<(std::shared_ptr<(SArray<(double)>)>)> self, std::vector< std::shared_ptr< SArray< double > > >::size_type size) -> SArrayDoubleVector
        __init__(std::vector<(std::shared_ptr<(SArray<(double)>)>)> self, std::vector< std::shared_ptr< SArray< double > > >::size_type size, std::vector< std::shared_ptr< SArray< double > > >::value_type const & value) -> SArrayDoubleVector
        """
        this = _solver.new_SArrayDoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        """push_back(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        """front(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &"""
        return _solver.SArrayDoubleVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< SArray< double > > >::value_type const &":
        """back(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::value_type const &"""
        return _solver.SArrayDoubleVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< SArray< double > > >::size_type', x: 'std::vector< std::shared_ptr< SArray< double > > >::value_type const &') -> "void":
        """assign(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type n, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)"""
        return _solver.SArrayDoubleVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type new_size)
        resize(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type new_size, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x) -> std::vector< std::shared_ptr< SArray< double > > >::iterator
        insert(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::iterator pos, std::vector< std::shared_ptr< SArray< double > > >::size_type n, std::vector< std::shared_ptr< SArray< double > > >::value_type const & x)
        """
        return _solver.SArrayDoubleVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< SArray< double > > >::size_type') -> "void":
        """reserve(SArrayDoubleVector self, std::vector< std::shared_ptr< SArray< double > > >::size_type n)"""
        return _solver.SArrayDoubleVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< SArray< double > > >::size_type":
        """capacity(SArrayDoubleVector self) -> std::vector< std::shared_ptr< SArray< double > > >::size_type"""
        return _solver.SArrayDoubleVector_capacity(self)

    __swig_destroy__ = _solver.delete_SArrayDoubleVector
    __del__ = lambda self: None
SArrayDoubleVector_swigregister = _solver.SArrayDoubleVector_swigregister
SArrayDoubleVector_swigregister(SArrayDoubleVector)

class SArrayFloatVector(object):
    """Proxy of C++ std::vector<(std::shared_ptr<(SArray<(float)>)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(SArrayFloatVector self) -> SwigPyIterator"""
        return _solver.SArrayFloatVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector___bool__(self)


    def __len__(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        """__len__(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector___len__(self)


    def __getslice__(self, i: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type') -> "std::vector< std::shared_ptr< SArray< float > >,std::allocator< std::shared_ptr< SArray< float > > > > *":
        """__getslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j) -> SArrayFloatVector"""
        return _solver.SArrayFloatVector___getslice__(self, i, j)


    def __setslice__(self, *args) -> "void":
        """
        __setslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j)
        __setslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j, SArrayFloatVector v)
        """
        return _solver.SArrayFloatVector___setslice__(self, *args)


    def __delslice__(self, i: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type', j: 'std::vector< std::shared_ptr< SArray< float > > >::difference_type') -> "void":
        """__delslice__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::difference_type j)"""
        return _solver.SArrayFloatVector___delslice__(self, i, j)


    def __delitem__(self, *args) -> "void":
        """
        __delitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i)
        __delitem__(SArrayFloatVector self, PySliceObject * slice)
        """
        return _solver.SArrayFloatVector___delitem__(self, *args)


    def __getitem__(self, *args) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        """
        __getitem__(SArrayFloatVector self, PySliceObject * slice) -> SArrayFloatVector
        __getitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &
        """
        return _solver.SArrayFloatVector___getitem__(self, *args)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(SArrayFloatVector self, PySliceObject * slice, SArrayFloatVector v)
        __setitem__(SArrayFloatVector self, PySliceObject * slice)
        __setitem__(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::difference_type i, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector___setitem__(self, *args)


    def pop(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type":
        """pop(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type"""
        return _solver.SArrayFloatVector_pop(self)


    def append(self, x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        """append(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_append(self, x)


    def empty(self) -> "bool":
        """empty(SArrayFloatVector self) -> bool"""
        return _solver.SArrayFloatVector_empty(self)


    def size(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        """size(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector_size(self)


    def swap(self, v: 'SArrayFloatVector') -> "void":
        """swap(SArrayFloatVector self, SArrayFloatVector v)"""
        return _solver.SArrayFloatVector_swap(self, v)


    def begin(self) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        """begin(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::iterator"""
        return _solver.SArrayFloatVector_begin(self)


    def end(self) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        """end(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::iterator"""
        return _solver.SArrayFloatVector_end(self)


    def rbegin(self) -> "std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator":
        """rbegin(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator"""
        return _solver.SArrayFloatVector_rbegin(self)


    def rend(self) -> "std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator":
        """rend(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::reverse_iterator"""
        return _solver.SArrayFloatVector_rend(self)


    def clear(self) -> "void":
        """clear(SArrayFloatVector self)"""
        return _solver.SArrayFloatVector_clear(self)


    def get_allocator(self) -> "std::vector< std::shared_ptr< SArray< float > > >::allocator_type":
        """get_allocator(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::allocator_type"""
        return _solver.SArrayFloatVector_get_allocator(self)


    def pop_back(self) -> "void":
        """pop_back(SArrayFloatVector self)"""
        return _solver.SArrayFloatVector_pop_back(self)


    def erase(self, *args) -> "std::vector< std::shared_ptr< SArray< float > > >::iterator":
        """
        erase(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        erase(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator first, std::vector< std::shared_ptr< SArray< float > > >::iterator last) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        """
        return _solver.SArrayFloatVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::shared_ptr<(SArray<(float)>)>)> self) -> SArrayFloatVector
        __init__(std::vector<(std::shared_ptr<(SArray<(float)>)>)> self, SArrayFloatVector arg2) -> SArrayFloatVector
        __init__(std::vector<(std::shared_ptr<(SArray<(float)>)>)> self, std::vector< std::shared_ptr< SArray< float > > >::size_type size) -> SArrayFloatVector
        __init__(std::vector<(std::shared_ptr<(SArray<(float)>)>)> self, std::vector< std::shared_ptr< SArray< float > > >::size_type size, std::vector< std::shared_ptr< SArray< float > > >::value_type const & value) -> SArrayFloatVector
        """
        this = _solver.new_SArrayFloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        """push_back(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_push_back(self, x)


    def front(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        """front(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &"""
        return _solver.SArrayFloatVector_front(self)


    def back(self) -> "std::vector< std::shared_ptr< SArray< float > > >::value_type const &":
        """back(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::value_type const &"""
        return _solver.SArrayFloatVector_back(self)


    def assign(self, n: 'std::vector< std::shared_ptr< SArray< float > > >::size_type', x: 'std::vector< std::shared_ptr< SArray< float > > >::value_type const &') -> "void":
        """assign(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type n, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)"""
        return _solver.SArrayFloatVector_assign(self, n, x)


    def resize(self, *args) -> "void":
        """
        resize(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type new_size)
        resize(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type new_size, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector_resize(self, *args)


    def insert(self, *args) -> "void":
        """
        insert(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x) -> std::vector< std::shared_ptr< SArray< float > > >::iterator
        insert(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::iterator pos, std::vector< std::shared_ptr< SArray< float > > >::size_type n, std::vector< std::shared_ptr< SArray< float > > >::value_type const & x)
        """
        return _solver.SArrayFloatVector_insert(self, *args)


    def reserve(self, n: 'std::vector< std::shared_ptr< SArray< float > > >::size_type') -> "void":
        """reserve(SArrayFloatVector self, std::vector< std::shared_ptr< SArray< float > > >::size_type n)"""
        return _solver.SArrayFloatVector_reserve(self, n)


    def capacity(self) -> "std::vector< std::shared_ptr< SArray< float > > >::size_type":
        """capacity(SArrayFloatVector self) -> std::vector< std::shared_ptr< SArray< float > > >::size_type"""
        return _solver.SArrayFloatVector_capacity(self)

    __swig_destroy__ = _solver.delete_SArrayFloatVector
    __del__ = lambda self: None
SArrayFloatVector_swigregister = _solver.SArrayFloatVector_swigregister
SArrayFloatVector_swigregister(SArrayFloatVector)

RandType_unif = _solver.RandType_unif
RandType_perm = _solver.RandType_perm
class StoSolverDouble(object):
    """Proxy of C++ TStoSolver<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'double', rand_type: 'RandType'):
        """__init__(TStoSolver<(double,double)> self, unsigned long epoch_size, double tol, RandType rand_type) -> StoSolverDouble"""
        this = _solver.new_StoSolverDouble(epoch_size, tol, rand_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, n_epochs: 'int'=1) -> "void":
        """
        solve(StoSolverDouble self, int n_epochs=1)
        solve(StoSolverDouble self)
        """
        return _solver.StoSolverDouble_solve(self, n_epochs)


    def get_minimizer(self, out: 'ArrayDouble &') -> "void":
        """get_minimizer(StoSolverDouble self, ArrayDouble & out)"""
        return _solver.StoSolverDouble_get_minimizer(self, out)


    def get_iterate(self, out: 'ArrayDouble &') -> "void":
        """get_iterate(StoSolverDouble self, ArrayDouble & out)"""
        return _solver.StoSolverDouble_get_iterate(self, out)


    def set_starting_iterate(self, new_iterate: 'ArrayDouble &') -> "void":
        """set_starting_iterate(StoSolverDouble self, ArrayDouble & new_iterate)"""
        return _solver.StoSolverDouble_set_starting_iterate(self, new_iterate)


    def set_tol(self, tol: 'double') -> "void":
        """set_tol(StoSolverDouble self, double tol)"""
        return _solver.StoSolverDouble_set_tol(self, tol)


    def get_tol(self) -> "double":
        """get_tol(StoSolverDouble self) -> double"""
        return _solver.StoSolverDouble_get_tol(self)


    def set_epoch_size(self, epoch_size: 'unsigned long') -> "void":
        """set_epoch_size(StoSolverDouble self, unsigned long epoch_size)"""
        return _solver.StoSolverDouble_set_epoch_size(self, epoch_size)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(StoSolverDouble self) -> unsigned long"""
        return _solver.StoSolverDouble_get_epoch_size(self)


    def set_rand_type(self, rand_type: 'RandType') -> "void":
        """set_rand_type(StoSolverDouble self, RandType rand_type)"""
        return _solver.StoSolverDouble_set_rand_type(self, rand_type)


    def get_rand_type(self) -> "RandType":
        """get_rand_type(StoSolverDouble self) -> RandType"""
        return _solver.StoSolverDouble_get_rand_type(self)


    def set_rand_max(self, rand_max: 'unsigned long') -> "void":
        """set_rand_max(StoSolverDouble self, unsigned long rand_max)"""
        return _solver.StoSolverDouble_set_rand_max(self, rand_max)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(StoSolverDouble self) -> unsigned long"""
        return _solver.StoSolverDouble_get_rand_max(self)


    def get_record_every(self) -> "int":
        """get_record_every(StoSolverDouble self) -> int"""
        return _solver.StoSolverDouble_get_record_every(self)


    def set_record_every(self, record_every: 'int') -> "void":
        """set_record_every(StoSolverDouble self, int record_every)"""
        return _solver.StoSolverDouble_set_record_every(self, record_every)


    def get_time_history(self) -> "std::vector< double,std::allocator< double > >":
        """get_time_history(StoSolverDouble self) -> DoubleVector"""
        return _solver.StoSolverDouble_get_time_history(self)


    def get_epoch_history(self) -> "std::vector< int,std::allocator< int > >":
        """get_epoch_history(StoSolverDouble self) -> IntVector"""
        return _solver.StoSolverDouble_get_epoch_history(self)


    def get_iterate_history(self) -> "SArrayDoublePtrList1D":
        """get_iterate_history(StoSolverDouble self) -> SArrayDoublePtrList1D"""
        return _solver.StoSolverDouble_get_iterate_history(self)


    def set_model(self, model: 'ModelDoublePtr') -> "void":
        """set_model(StoSolverDouble self, ModelDoublePtr model)"""
        return _solver.StoSolverDouble_set_model(self, model)


    def set_prox(self, prox: 'ProxDoublePtr') -> "void":
        """set_prox(StoSolverDouble self, ProxDoublePtr prox)"""
        return _solver.StoSolverDouble_set_prox(self, prox)


    def set_seed(self, seed: 'int') -> "void":
        """set_seed(StoSolverDouble self, int seed)"""
        return _solver.StoSolverDouble_set_seed(self, seed)

    __swig_destroy__ = _solver.delete_StoSolverDouble
    __del__ = lambda self: None
StoSolverDouble_swigregister = _solver.StoSolverDouble_swigregister
StoSolverDouble_swigregister(StoSolverDouble)

class StoSolverFloat(object):
    """Proxy of C++ TStoSolver<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, epoch_size: 'unsigned long', tol: 'float', rand_type: 'RandType'):
        """__init__(TStoSolver<(float,float)> self, unsigned long epoch_size, float tol, RandType rand_type) -> StoSolverFloat"""
        this = _solver.new_StoSolverFloat(epoch_size, tol, rand_type)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, n_epochs: 'int'=1) -> "void":
        """
        solve(StoSolverFloat self, int n_epochs=1)
        solve(StoSolverFloat self)
        """
        return _solver.StoSolverFloat_solve(self, n_epochs)


    def get_minimizer(self, out: 'ArrayFloat &') -> "void":
        """get_minimizer(StoSolverFloat self, ArrayFloat & out)"""
        return _solver.StoSolverFloat_get_minimizer(self, out)


    def get_iterate(self, out: 'ArrayFloat &') -> "void":
        """get_iterate(StoSolverFloat self, ArrayFloat & out)"""
        return _solver.StoSolverFloat_get_iterate(self, out)


    def set_starting_iterate(self, new_iterate: 'ArrayFloat &') -> "void":
        """set_starting_iterate(StoSolverFloat self, ArrayFloat & new_iterate)"""
        return _solver.StoSolverFloat_set_starting_iterate(self, new_iterate)


    def set_tol(self, tol: 'float') -> "void":
        """set_tol(StoSolverFloat self, float tol)"""
        return _solver.StoSolverFloat_set_tol(self, tol)


    def get_tol(self) -> "float":
        """get_tol(StoSolverFloat self) -> float"""
        return _solver.StoSolverFloat_get_tol(self)


    def set_epoch_size(self, epoch_size: 'unsigned long') -> "void":
        """set_epoch_size(StoSolverFloat self, unsigned long epoch_size)"""
        return _solver.StoSolverFloat_set_epoch_size(self, epoch_size)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(StoSolverFloat self) -> unsigned long"""
        return _solver.StoSolverFloat_get_epoch_size(self)


    def set_rand_type(self, rand_type: 'RandType') -> "void":
        """set_rand_type(StoSolverFloat self, RandType rand_type)"""
        return _solver.StoSolverFloat_set_rand_type(self, rand_type)


    def get_rand_type(self) -> "RandType":
        """get_rand_type(StoSolverFloat self) -> RandType"""
        return _solver.StoSolverFloat_get_rand_type(self)


    def set_rand_max(self, rand_max: 'unsigned long') -> "void":
        """set_rand_max(StoSolverFloat self, unsigned long rand_max)"""
        return _solver.StoSolverFloat_set_rand_max(self, rand_max)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(StoSolverFloat self) -> unsigned long"""
        return _solver.StoSolverFloat_get_rand_max(self)


    def get_record_every(self) -> "int":
        """get_record_every(StoSolverFloat self) -> int"""
        return _solver.StoSolverFloat_get_record_every(self)


    def set_record_every(self, record_every: 'int') -> "void":
        """set_record_every(StoSolverFloat self, int record_every)"""
        return _solver.StoSolverFloat_set_record_every(self, record_every)


    def get_time_history(self) -> "std::vector< double,std::allocator< double > >":
        """get_time_history(StoSolverFloat self) -> DoubleVector"""
        return _solver.StoSolverFloat_get_time_history(self)


    def get_epoch_history(self) -> "std::vector< int,std::allocator< int > >":
        """get_epoch_history(StoSolverFloat self) -> IntVector"""
        return _solver.StoSolverFloat_get_epoch_history(self)


    def get_iterate_history(self) -> "SArrayFloatPtrList1D":
        """get_iterate_history(StoSolverFloat self) -> SArrayFloatPtrList1D"""
        return _solver.StoSolverFloat_get_iterate_history(self)


    def set_model(self, model: 'ModelFloatPtr') -> "void":
        """set_model(StoSolverFloat self, ModelFloatPtr model)"""
        return _solver.StoSolverFloat_set_model(self, model)


    def set_prox(self, prox: 'ProxFloatPtr') -> "void":
        """set_prox(StoSolverFloat self, ProxFloatPtr prox)"""
        return _solver.StoSolverFloat_set_prox(self, prox)


    def set_seed(self, seed: 'int') -> "void":
        """set_seed(StoSolverFloat self, int seed)"""
        return _solver.StoSolverFloat_set_seed(self, seed)

    __swig_destroy__ = _solver.delete_StoSolverFloat
    __del__ = lambda self: None
StoSolverFloat_swigregister = _solver.StoSolverFloat_swigregister
StoSolverFloat_swigregister(StoSolverFloat)

class AdaGradDouble(StoSolverDouble):
    """Proxy of C++ TAdaGrad<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAdaGrad<(double)> self) -> AdaGradDouble
        __init__(TAdaGrad<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> AdaGradDouble
        __init__(TAdaGrad<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1) -> AdaGradDouble
        __init__(TAdaGrad<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step) -> AdaGradDouble
        """
        this = _solver.new_AdaGradDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'AdaGradDouble') -> "bool":
        """compare(AdaGradDouble self, AdaGradDouble that) -> bool"""
        return _solver.AdaGradDouble_compare(self, that)


    def __getstate__(self): return AdaGradDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AdaGradDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AdaGradDouble
    __del__ = lambda self: None
AdaGradDouble_swigregister = _solver.AdaGradDouble_swigregister
AdaGradDouble_swigregister(AdaGradDouble)


def AdaGradDoubleDeserialize(ptr: 'AdaGradDouble', hex: 'std::string const &') -> "void":
    """AdaGradDoubleDeserialize(AdaGradDouble ptr, std::string const & hex)"""
    return _solver.AdaGradDoubleDeserialize(ptr, hex)

def AdaGradDoubleSerialize(ptr: 'AdaGradDouble') -> "std::string":
    """AdaGradDoubleSerialize(AdaGradDouble ptr) -> std::string"""
    return _solver.AdaGradDoubleSerialize(ptr)
class AdaGradFloat(StoSolverFloat):
    """Proxy of C++ TAdaGrad<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TAdaGrad<(float)> self) -> AdaGradFloat
        __init__(TAdaGrad<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> AdaGradFloat
        __init__(TAdaGrad<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1) -> AdaGradFloat
        __init__(TAdaGrad<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step) -> AdaGradFloat
        """
        this = _solver.new_AdaGradFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def compare(self, that: 'AdaGradFloat') -> "bool":
        """compare(AdaGradFloat self, AdaGradFloat that) -> bool"""
        return _solver.AdaGradFloat_compare(self, that)


    def __getstate__(self): return AdaGradFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AdaGradFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AdaGradFloat
    __del__ = lambda self: None
AdaGradFloat_swigregister = _solver.AdaGradFloat_swigregister
AdaGradFloat_swigregister(AdaGradFloat)


def AdaGradFloatDeserialize(ptr: 'AdaGradFloat', hex: 'std::string const &') -> "void":
    """AdaGradFloatDeserialize(AdaGradFloat ptr, std::string const & hex)"""
    return _solver.AdaGradFloatDeserialize(ptr, hex)

def AdaGradFloatSerialize(ptr: 'AdaGradFloat') -> "std::string":
    """AdaGradFloatSerialize(AdaGradFloat ptr) -> std::string"""
    return _solver.AdaGradFloatSerialize(ptr)
class SDCADouble(StoSolverDouble):
    """Proxy of C++ SDCADouble class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SDCADouble self) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type, int record_every=1, int seed=-1) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type, int record_every=1) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0, double tol=0., RandType rand_type) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0, double tol=0.) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq, unsigned long epoch_size=0) -> SDCADouble
        __init__(SDCADouble self, double l_l2sq) -> SDCADouble
        """
        this = _solver.new_SDCADouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_model(self, model: 'ModelDoublePtr') -> "void":
        """set_model(SDCADouble self, ModelDoublePtr model)"""
        return _solver.SDCADouble_set_model(self, model)


    def reset(self) -> "void":
        """reset(SDCADouble self)"""
        return _solver.SDCADouble_reset(self)


    def set_starting_iterate(self, *args) -> "void":
        """
        set_starting_iterate(SDCADouble self)
        set_starting_iterate(SDCADouble self, ArrayDouble & dual_vector)
        """
        return _solver.SDCADouble_set_starting_iterate(self, *args)


    def get_l_l2sq(self) -> "double":
        """get_l_l2sq(SDCADouble self) -> double"""
        return _solver.SDCADouble_get_l_l2sq(self)


    def set_l_l2sq(self, l_l2sq: 'double') -> "void":
        """set_l_l2sq(SDCADouble self, double l_l2sq)"""
        return _solver.SDCADouble_set_l_l2sq(self, l_l2sq)


    def get_primal_vector(self) -> "SArrayDoublePtr":
        """get_primal_vector(SDCADouble self) -> SArrayDoublePtr"""
        return _solver.SDCADouble_get_primal_vector(self)


    def get_dual_vector(self) -> "SArrayDoublePtr":
        """get_dual_vector(SDCADouble self) -> SArrayDoublePtr"""
        return _solver.SDCADouble_get_dual_vector(self)


    def compare(self, that: 'SDCADouble') -> "bool":
        """compare(SDCADouble self, SDCADouble that) -> bool"""
        return _solver.SDCADouble_compare(self, that)


    def __getstate__(self): return SDCADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SDCADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SDCADouble
    __del__ = lambda self: None
SDCADouble_swigregister = _solver.SDCADouble_swigregister
SDCADouble_swigregister(SDCADouble)


def SDCADoubleDeserialize(ptr: 'SDCADouble', hex: 'std::string const &') -> "void":
    """SDCADoubleDeserialize(SDCADouble ptr, std::string const & hex)"""
    return _solver.SDCADoubleDeserialize(ptr, hex)

def SDCADoubleSerialize(ptr: 'SDCADouble') -> "std::string":
    """SDCADoubleSerialize(SDCADouble ptr) -> std::string"""
    return _solver.SDCADoubleSerialize(ptr)
class SDCAFloat(StoSolverFloat):
    """Proxy of C++ SDCAFloat class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(SDCAFloat self) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0, float tol=0., RandType rand_type, int record_every=1, int seed=-1) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0, float tol=0., RandType rand_type, int record_every=1) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0, float tol=0., RandType rand_type) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0, float tol=0.) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq, unsigned long epoch_size=0) -> SDCAFloat
        __init__(SDCAFloat self, float l_l2sq) -> SDCAFloat
        """
        this = _solver.new_SDCAFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_model(self, model: 'ModelFloatPtr') -> "void":
        """set_model(SDCAFloat self, ModelFloatPtr model)"""
        return _solver.SDCAFloat_set_model(self, model)


    def reset(self) -> "void":
        """reset(SDCAFloat self)"""
        return _solver.SDCAFloat_reset(self)


    def set_starting_iterate(self, *args) -> "void":
        """
        set_starting_iterate(SDCAFloat self)
        set_starting_iterate(SDCAFloat self, ArrayFloat & dual_vector)
        """
        return _solver.SDCAFloat_set_starting_iterate(self, *args)


    def get_l_l2sq(self) -> "float":
        """get_l_l2sq(SDCAFloat self) -> float"""
        return _solver.SDCAFloat_get_l_l2sq(self)


    def set_l_l2sq(self, l_l2sq: 'float') -> "void":
        """set_l_l2sq(SDCAFloat self, float l_l2sq)"""
        return _solver.SDCAFloat_set_l_l2sq(self, l_l2sq)


    def get_primal_vector(self) -> "SArrayFloatPtr":
        """get_primal_vector(SDCAFloat self) -> SArrayFloatPtr"""
        return _solver.SDCAFloat_get_primal_vector(self)


    def get_dual_vector(self) -> "SArrayFloatPtr":
        """get_dual_vector(SDCAFloat self) -> SArrayFloatPtr"""
        return _solver.SDCAFloat_get_dual_vector(self)


    def compare(self, that: 'SDCAFloat') -> "bool":
        """compare(SDCAFloat self, SDCAFloat that) -> bool"""
        return _solver.SDCAFloat_compare(self, that)


    def __getstate__(self): return SDCAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SDCAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SDCAFloat
    __del__ = lambda self: None
SDCAFloat_swigregister = _solver.SDCAFloat_swigregister
SDCAFloat_swigregister(SDCAFloat)


def SDCAFloatDeserialize(ptr: 'SDCAFloat', hex: 'std::string const &') -> "void":
    """SDCAFloatDeserialize(SDCAFloat ptr, std::string const & hex)"""
    return _solver.SDCAFloatDeserialize(ptr, hex)

def SDCAFloatSerialize(ptr: 'SDCAFloat') -> "std::string":
    """SDCAFloatSerialize(SDCAFloat ptr) -> std::string"""
    return _solver.SDCAFloatSerialize(ptr)
class SGDDouble(StoSolverDouble):
    """Proxy of C++ TSGD<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSGD<(double)> self) -> SGDDouble
        __init__(TSGD<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> SGDDouble
        __init__(TSGD<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1) -> SGDDouble
        __init__(TSGD<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step) -> SGDDouble
        """
        this = _solver.new_SGDDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_step(self, step: 'double') -> "void":
        """set_step(SGDDouble self, double step)"""
        return _solver.SGDDouble_set_step(self, step)


    def get_step(self) -> "double":
        """get_step(SGDDouble self) -> double"""
        return _solver.SGDDouble_get_step(self)


    def compare(self, that: 'SGDDouble') -> "bool":
        """compare(SGDDouble self, SGDDouble that) -> bool"""
        return _solver.SGDDouble_compare(self, that)


    def __getstate__(self): return SGDDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SGDDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SGDDouble
    __del__ = lambda self: None
SGDDouble_swigregister = _solver.SGDDouble_swigregister
SGDDouble_swigregister(SGDDouble)


def SGDDoubleDeserialize(ptr: 'SGDDouble', hex: 'std::string const &') -> "void":
    """SGDDoubleDeserialize(SGDDouble ptr, std::string const & hex)"""
    return _solver.SGDDoubleDeserialize(ptr, hex)

def SGDDoubleSerialize(ptr: 'SGDDouble') -> "std::string":
    """SGDDoubleSerialize(SGDDouble ptr) -> std::string"""
    return _solver.SGDDoubleSerialize(ptr)
class SGDFloat(StoSolverFloat):
    """Proxy of C++ TSGD<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSGD<(float)> self) -> SGDFloat
        __init__(TSGD<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> SGDFloat
        __init__(TSGD<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1) -> SGDFloat
        __init__(TSGD<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step) -> SGDFloat
        """
        this = _solver.new_SGDFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_step(self, step: 'float') -> "void":
        """set_step(SGDFloat self, float step)"""
        return _solver.SGDFloat_set_step(self, step)


    def get_step(self) -> "float":
        """get_step(SGDFloat self) -> float"""
        return _solver.SGDFloat_get_step(self)


    def compare(self, that: 'SGDFloat') -> "bool":
        """compare(SGDFloat self, SGDFloat that) -> bool"""
        return _solver.SGDFloat_compare(self, that)


    def __getstate__(self): return SGDFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SGDFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SGDFloat
    __del__ = lambda self: None
SGDFloat_swigregister = _solver.SGDFloat_swigregister
SGDFloat_swigregister(SGDFloat)


def SGDFloatDeserialize(ptr: 'SGDFloat', hex: 'std::string const &') -> "void":
    """SGDFloatDeserialize(SGDFloat ptr, std::string const & hex)"""
    return _solver.SGDFloatDeserialize(ptr, hex)

def SGDFloatSerialize(ptr: 'SGDFloat') -> "std::string":
    """SGDFloatSerialize(SGDFloat ptr) -> std::string"""
    return _solver.SGDFloatSerialize(ptr)
class SAGADouble(StoSolverDouble):
    """Proxy of C++ TSAGA<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSAGA<(double)> self) -> SAGADouble
        __init__(TSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> SAGADouble
        __init__(TSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1) -> SAGADouble
        __init__(TSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step) -> SAGADouble
        """
        this = _solver.new_SAGADouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_step(self, step: 'double') -> "void":
        """set_step(SAGADouble self, double step)"""
        return _solver.SAGADouble_set_step(self, step)


    def set_model(self, model: 'std::shared_ptr< TModel< double,double > >') -> "void":
        """set_model(SAGADouble self, std::shared_ptr< TModel< double,double > > model)"""
        return _solver.SAGADouble_set_model(self, model)


    def compare(self, that: 'SAGADouble') -> "bool":
        """compare(SAGADouble self, SAGADouble that) -> bool"""
        return _solver.SAGADouble_compare(self, that)


    def __getstate__(self): return SAGADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SAGADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SAGADouble
    __del__ = lambda self: None
SAGADouble_swigregister = _solver.SAGADouble_swigregister
SAGADouble_swigregister(SAGADouble)


def SAGADoubleDeserialize(ptr: 'SAGADouble', hex: 'std::string const &') -> "void":
    """SAGADoubleDeserialize(SAGADouble ptr, std::string const & hex)"""
    return _solver.SAGADoubleDeserialize(ptr, hex)

def SAGADoubleSerialize(ptr: 'SAGADouble') -> "std::string":
    """SAGADoubleSerialize(SAGADouble ptr) -> std::string"""
    return _solver.SAGADoubleSerialize(ptr)
class SAGAFloat(StoSolverFloat):
    """Proxy of C++ TSAGA<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSAGA<(float)> self) -> SAGAFloat
        __init__(TSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> SAGAFloat
        __init__(TSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1) -> SAGAFloat
        __init__(TSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step) -> SAGAFloat
        """
        this = _solver.new_SAGAFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_step(self, step: 'float') -> "void":
        """set_step(SAGAFloat self, float step)"""
        return _solver.SAGAFloat_set_step(self, step)


    def set_model(self, model: 'std::shared_ptr< TModel< float,float > >') -> "void":
        """set_model(SAGAFloat self, std::shared_ptr< TModel< float,float > > model)"""
        return _solver.SAGAFloat_set_model(self, model)


    def compare(self, that: 'SAGAFloat') -> "bool":
        """compare(SAGAFloat self, SAGAFloat that) -> bool"""
        return _solver.SAGAFloat_compare(self, that)


    def __getstate__(self): return SAGAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SAGAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SAGAFloat
    __del__ = lambda self: None
SAGAFloat_swigregister = _solver.SAGAFloat_swigregister
SAGAFloat_swigregister(SAGAFloat)


def SAGAFloatDeserialize(ptr: 'SAGAFloat', hex: 'std::string const &') -> "void":
    """SAGAFloatDeserialize(SAGAFloat ptr, std::string const & hex)"""
    return _solver.SAGAFloatDeserialize(ptr, hex)

def SAGAFloatSerialize(ptr: 'SAGAFloat') -> "std::string":
    """SAGAFloatSerialize(SAGAFloat ptr) -> std::string"""
    return _solver.SAGAFloatSerialize(ptr)
class AtomicSAGADouble(StoSolverDouble):
    """Proxy of C++ AtomicSAGA<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AtomicSAGA<(double)> self) -> AtomicSAGADouble
        __init__(AtomicSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1, int n_threads=2) -> AtomicSAGADouble
        __init__(AtomicSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> AtomicSAGADouble
        __init__(AtomicSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step, int record_every=1) -> AtomicSAGADouble
        __init__(AtomicSAGA<(double)> self, unsigned long epoch_size, double tol, RandType rand_type, double step) -> AtomicSAGADouble
        """
        this = _solver.new_AtomicSAGADouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, n_epochs: 'int'=1) -> "void":
        """
        solve(AtomicSAGADouble self, int n_epochs=1)
        solve(AtomicSAGADouble self)
        """
        return _solver.AtomicSAGADouble_solve(self, n_epochs)


    def __getstate__(self): return AtomicSAGADoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AtomicSAGADoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AtomicSAGADouble
    __del__ = lambda self: None
AtomicSAGADouble_swigregister = _solver.AtomicSAGADouble_swigregister
AtomicSAGADouble_swigregister(AtomicSAGADouble)


def AtomicSAGADoubleDeserialize(ptr: 'AtomicSAGADouble', hex: 'std::string const &') -> "void":
    """AtomicSAGADoubleDeserialize(AtomicSAGADouble ptr, std::string const & hex)"""
    return _solver.AtomicSAGADoubleDeserialize(ptr, hex)

def AtomicSAGADoubleSerialize(ptr: 'AtomicSAGADouble') -> "std::string":
    """AtomicSAGADoubleSerialize(AtomicSAGADouble ptr) -> std::string"""
    return _solver.AtomicSAGADoubleSerialize(ptr)
class AtomicSAGAFloat(StoSolverFloat):
    """Proxy of C++ AtomicSAGA<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(AtomicSAGA<(float)> self) -> AtomicSAGAFloat
        __init__(AtomicSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1, int n_threads=2) -> AtomicSAGAFloat
        __init__(AtomicSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> AtomicSAGAFloat
        __init__(AtomicSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step, int record_every=1) -> AtomicSAGAFloat
        __init__(AtomicSAGA<(float)> self, unsigned long epoch_size, float tol, RandType rand_type, float step) -> AtomicSAGAFloat
        """
        this = _solver.new_AtomicSAGAFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def solve(self, n_epochs: 'int'=1) -> "void":
        """
        solve(AtomicSAGAFloat self, int n_epochs=1)
        solve(AtomicSAGAFloat self)
        """
        return _solver.AtomicSAGAFloat_solve(self, n_epochs)


    def __getstate__(self): return AtomicSAGAFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return AtomicSAGAFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_AtomicSAGAFloat
    __del__ = lambda self: None
AtomicSAGAFloat_swigregister = _solver.AtomicSAGAFloat_swigregister
AtomicSAGAFloat_swigregister(AtomicSAGAFloat)


def AtomicSAGAFloatDeserialize(ptr: 'AtomicSAGAFloat', hex: 'std::string const &') -> "void":
    """AtomicSAGAFloatDeserialize(AtomicSAGAFloat ptr, std::string const & hex)"""
    return _solver.AtomicSAGAFloatDeserialize(ptr, hex)

def AtomicSAGAFloatSerialize(ptr: 'AtomicSAGAFloat') -> "std::string":
    """AtomicSAGAFloatSerialize(AtomicSAGAFloat ptr) -> std::string"""
    return _solver.AtomicSAGAFloatSerialize(ptr)
SVRG_VarianceReductionMethod_Last = _solver.SVRG_VarianceReductionMethod_Last
SVRG_VarianceReductionMethod_Average = _solver.SVRG_VarianceReductionMethod_Average
SVRG_VarianceReductionMethod_Random = _solver.SVRG_VarianceReductionMethod_Random
SVRG_StepType_Fixed = _solver.SVRG_StepType_Fixed
SVRG_StepType_BarzilaiBorwein = _solver.SVRG_StepType_BarzilaiBorwein
class SVRGDouble(StoSolverDouble):
    """Proxy of C++ TSVRG<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSVRG<(double)> self) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1, int n_threads=1, SVRG_VarianceReductionMethod variance_reduction, SVRG_StepType step_method) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1, int n_threads=1, SVRG_VarianceReductionMethod variance_reduction) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1, int n_threads=1) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step, int record_every=1, int seed=-1) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step, int record_every=1) -> SVRGDouble
        __init__(TSVRG<(double)> self, ulong epoch_size, double tol, RandType rand_type, double step) -> SVRGDouble
        """
        this = _solver.new_SVRGDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_step(self) -> "double":
        """get_step(SVRGDouble self) -> double"""
        return _solver.SVRGDouble_get_step(self)


    def set_step(self, step: 'double') -> "void":
        """set_step(SVRGDouble self, double step)"""
        return _solver.SVRGDouble_set_step(self, step)


    def get_variance_reduction(self) -> "SVRG_VarianceReductionMethod":
        """get_variance_reduction(SVRGDouble self) -> SVRG_VarianceReductionMethod"""
        return _solver.SVRGDouble_get_variance_reduction(self)


    def set_variance_reduction(self, variance_reduction: 'SVRG_VarianceReductionMethod') -> "void":
        """set_variance_reduction(SVRGDouble self, SVRG_VarianceReductionMethod variance_reduction)"""
        return _solver.SVRGDouble_set_variance_reduction(self, variance_reduction)


    def get_step_type(self) -> "SVRG_StepType":
        """get_step_type(SVRGDouble self) -> SVRG_StepType"""
        return _solver.SVRGDouble_get_step_type(self)


    def set_step_type(self, step_type: 'SVRG_StepType') -> "void":
        """set_step_type(SVRGDouble self, SVRG_StepType step_type)"""
        return _solver.SVRGDouble_set_step_type(self, step_type)


    def compare(self, that: 'SVRGDouble') -> "bool":
        """compare(SVRGDouble self, SVRGDouble that) -> bool"""
        return _solver.SVRGDouble_compare(self, that)


    def __getstate__(self): return SVRGDoubleSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SVRGDoubleDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SVRGDouble
    __del__ = lambda self: None
SVRGDouble_swigregister = _solver.SVRGDouble_swigregister
SVRGDouble_swigregister(SVRGDouble)


def SVRGDoubleDeserialize(ptr: 'SVRGDouble', hex: 'std::string const &') -> "void":
    """SVRGDoubleDeserialize(SVRGDouble ptr, std::string const & hex)"""
    return _solver.SVRGDoubleDeserialize(ptr, hex)

def SVRGDoubleSerialize(ptr: 'SVRGDouble') -> "std::string":
    """SVRGDoubleSerialize(SVRGDouble ptr) -> std::string"""
    return _solver.SVRGDoubleSerialize(ptr)
class SVRGFloat(StoSolverFloat):
    """Proxy of C++ TSVRG<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(TSVRG<(float)> self) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1, int n_threads=1, SVRG_VarianceReductionMethod variance_reduction, SVRG_StepType step_method) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1, int n_threads=1, SVRG_VarianceReductionMethod variance_reduction) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1, int n_threads=1) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step, int record_every=1, int seed=-1) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step, int record_every=1) -> SVRGFloat
        __init__(TSVRG<(float)> self, ulong epoch_size, float tol, RandType rand_type, float step) -> SVRGFloat
        """
        this = _solver.new_SVRGFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_step(self) -> "float":
        """get_step(SVRGFloat self) -> float"""
        return _solver.SVRGFloat_get_step(self)


    def set_step(self, step: 'float') -> "void":
        """set_step(SVRGFloat self, float step)"""
        return _solver.SVRGFloat_set_step(self, step)


    def get_variance_reduction(self) -> "SVRG_VarianceReductionMethod":
        """get_variance_reduction(SVRGFloat self) -> SVRG_VarianceReductionMethod"""
        return _solver.SVRGFloat_get_variance_reduction(self)


    def set_variance_reduction(self, variance_reduction: 'SVRG_VarianceReductionMethod') -> "void":
        """set_variance_reduction(SVRGFloat self, SVRG_VarianceReductionMethod variance_reduction)"""
        return _solver.SVRGFloat_set_variance_reduction(self, variance_reduction)


    def get_step_type(self) -> "SVRG_StepType":
        """get_step_type(SVRGFloat self) -> SVRG_StepType"""
        return _solver.SVRGFloat_get_step_type(self)


    def set_step_type(self, step_type: 'SVRG_StepType') -> "void":
        """set_step_type(SVRGFloat self, SVRG_StepType step_type)"""
        return _solver.SVRGFloat_set_step_type(self, step_type)


    def compare(self, that: 'SVRGFloat') -> "bool":
        """compare(SVRGFloat self, SVRGFloat that) -> bool"""
        return _solver.SVRGFloat_compare(self, that)


    def __getstate__(self): return SVRGFloatSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return SVRGFloatDeserialize(self, s)

    __swig_destroy__ = _solver.delete_SVRGFloat
    __del__ = lambda self: None
SVRGFloat_swigregister = _solver.SVRGFloat_swigregister
SVRGFloat_swigregister(SVRGFloat)


def SVRGFloatDeserialize(ptr: 'SVRGFloat', hex: 'std::string const &') -> "void":
    """SVRGFloatDeserialize(SVRGFloat ptr, std::string const & hex)"""
    return _solver.SVRGFloatDeserialize(ptr, hex)

def SVRGFloatSerialize(ptr: 'SVRGFloat') -> "std::string":
    """SVRGFloatSerialize(SVRGFloat ptr) -> std::string"""
    return _solver.SVRGFloatSerialize(ptr)


