# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_base')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_base')
    _base = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_base', [dirname(__file__)])
        except ImportError:
            import _base
            return _base
        try:
            _mod = imp.load_module('_base', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _base = swig_import_helper()
    del swig_import_helper
else:
    import _base
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _base.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _base.to_bytes(hex)
import tick.array.build.array

def standard_normal_cdf(x: 'double') -> "double":
    """standard_normal_cdf(double x) -> double"""
    return _base.standard_normal_cdf(x)

def standard_normal_inv_cdf(*args) -> "void":
    """
    standard_normal_inv_cdf(double const q) -> double
    standard_normal_inv_cdf(ArrayDouble & q, ArrayDouble & out)
    """
    return _base.standard_normal_inv_cdf(*args)
class TimeFunction(object):
    """Proxy of C++ TimeFunction class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    InterMode_InterLinear = _base.TimeFunction_InterMode_InterLinear
    InterMode_InterConstRight = _base.TimeFunction_InterMode_InterConstRight
    InterMode_InterConstLeft = _base.TimeFunction_InterMode_InterConstLeft
    BorderType_Border0 = _base.TimeFunction_BorderType_Border0
    BorderType_BorderConstant = _base.TimeFunction_BorderType_BorderConstant
    BorderType_BorderContinue = _base.TimeFunction_BorderType_BorderContinue
    BorderType_Cyclic = _base.TimeFunction_BorderType_Cyclic

    def __init__(self, *args):
        """
        __init__(TimeFunction self, ArrayDouble const & T, ArrayDouble const & Y, TimeFunction::BorderType type, TimeFunction::InterMode mode, double dt, double border_value) -> TimeFunction
        __init__(TimeFunction self, double y=0.0) -> TimeFunction
        __init__(TimeFunction self) -> TimeFunction
        """
        this = _base.new_TimeFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def value(self, *args) -> "SArrayDoublePtr":
        """
        value(TimeFunction self, double t) -> double
        value(TimeFunction self, ArrayDouble & array) -> SArrayDoublePtr
        """
        return _base.TimeFunction_value(self, *args)


    def future_bound(self, *args) -> "SArrayDoublePtr":
        """
        future_bound(TimeFunction self, double t) -> double
        future_bound(TimeFunction self, ArrayDouble & array) -> SArrayDoublePtr
        """
        return _base.TimeFunction_future_bound(self, *args)


    def max_error(self, t: 'double') -> "double":
        """max_error(TimeFunction self, double t) -> double"""
        return _base.TimeFunction_max_error(self, t)


    def compute_future_max(self) -> "void":
        """compute_future_max(TimeFunction self)"""
        return _base.TimeFunction_compute_future_max(self)


    def get_norm(self) -> "double":
        """get_norm(TimeFunction self) -> double"""
        return _base.TimeFunction_get_norm(self)


    def get_inter_mode(self) -> "TimeFunction::InterMode":
        """get_inter_mode(TimeFunction self) -> TimeFunction::InterMode"""
        return _base.TimeFunction_get_inter_mode(self)


    def get_border_type(self) -> "TimeFunction::BorderType":
        """get_border_type(TimeFunction self) -> TimeFunction::BorderType"""
        return _base.TimeFunction_get_border_type(self)


    def get_border_value(self) -> "double":
        """get_border_value(TimeFunction self) -> double"""
        return _base.TimeFunction_get_border_value(self)


    def get_sampled_y(self) -> "SArrayDoublePtr":
        """get_sampled_y(TimeFunction self) -> SArrayDoublePtr"""
        return _base.TimeFunction_get_sampled_y(self)


    def get_future_max(self) -> "SArrayDoublePtr":
        """get_future_max(TimeFunction self) -> SArrayDoublePtr"""
        return _base.TimeFunction_get_future_max(self)


    def get_dt(self) -> "double":
        """get_dt(TimeFunction self) -> double"""
        return _base.TimeFunction_get_dt(self)


    def __getstate__(self): return TimeFunctionSerialize(self)
    def __setstate__(self, s):
        self.__init__(0.0)
        return TimeFunctionDeserialize(self, s)

    __swig_destroy__ = _base.delete_TimeFunction
    __del__ = lambda self: None
TimeFunction_swigregister = _base.TimeFunction_swigregister
TimeFunction_swigregister(TimeFunction)
cvar = _base.cvar
TimeFunction.DEFAULT_INTER = _base.cvar.TimeFunction_DEFAULT_INTER
TimeFunction.DEFAULT_BORDER = _base.cvar.TimeFunction_DEFAULT_BORDER


def TimeFunctionDeserialize(ptr: 'TimeFunction', hex: 'std::string const &') -> "void":
    """TimeFunctionDeserialize(TimeFunction ptr, std::string const & hex)"""
    return _base.TimeFunctionDeserialize(ptr, hex)

def TimeFunctionSerialize(ptr: 'TimeFunction') -> "std::string":
    """TimeFunctionSerialize(TimeFunction ptr) -> std::string"""
    return _base.TimeFunctionSerialize(ptr)
class A0(object):
    """Proxy of C++ A0 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def get_cpp_int(self) -> "int":
        """get_cpp_int(A0 self) -> int"""
        return _base.A0_get_cpp_int(self)


    def set_cpp_int(self, cpp_int: 'int') -> "void":
        """set_cpp_int(A0 self, int cpp_int)"""
        return _base.A0_set_cpp_int(self, cpp_int)


    def __init__(self):
        """__init__(A0 self) -> A0"""
        this = _base.new_A0()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _base.delete_A0
    __del__ = lambda self: None
A0_swigregister = _base.A0_swigregister
A0_swigregister(A0)


def throw_out_of_range() -> "void":
    """throw_out_of_range()"""
    return _base.throw_out_of_range()

def throw_system_error() -> "void":
    """throw_system_error()"""
    return _base.throw_system_error()

def throw_invalid_argument() -> "void":
    """throw_invalid_argument()"""
    return _base.throw_invalid_argument()

def throw_domain_error() -> "void":
    """throw_domain_error()"""
    return _base.throw_domain_error()

def throw_runtime_error() -> "void":
    """throw_runtime_error()"""
    return _base.throw_runtime_error()

def throw_string() -> "void":
    """throw_string()"""
    return _base.throw_string()


