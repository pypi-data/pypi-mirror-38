# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_hawkes_model')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_hawkes_model')
    _hawkes_model = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hawkes_model', [dirname(__file__)])
        except ImportError:
            import _hawkes_model
            return _hawkes_model
        try:
            _mod = imp.load_module('_hawkes_model', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _hawkes_model = swig_import_helper()
    del swig_import_helper
else:
    import _hawkes_model
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _hawkes_model.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _hawkes_model.to_bytes(hex)
SHARED_PTR_DISOWN = _hawkes_model.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _hawkes_model.new_Model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_model.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_model.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _hawkes_model.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _hawkes_model.Model_is_sparse(self)

    __swig_destroy__ = _hawkes_model.delete_Model
    __del__ = lambda self: None
Model_swigregister = _hawkes_model.Model_swigregister
Model_swigregister(Model)

class ModelDouble(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _hawkes_model.new_ModelDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_model.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _hawkes_model.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _hawkes_model.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _hawkes_model.ModelDouble_is_sparse(self)

    __swig_destroy__ = _hawkes_model.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _hawkes_model.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    """Proxy of C++ TModel<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _hawkes_model.new_ModelFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _hawkes_model.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _hawkes_model.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _hawkes_model.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _hawkes_model.ModelFloat_is_sparse(self)

    __swig_destroy__ = _hawkes_model.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _hawkes_model.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _hawkes_model.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_model.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _hawkes_model.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _hawkes_model.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _hawkes_model.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _hawkes_model.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _hawkes_model.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _hawkes_model.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _hawkes_model.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _hawkes_model.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _hawkes_model.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _hawkes_model.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _hawkes_model.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _hawkes_model.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    """Proxy of C++ TModelLabelsFeatures<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,double)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        this = _hawkes_model.new_ModelLabelsFeaturesDouble(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesDouble_get_n_features(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLabelsFeaturesDouble
    __del__ = lambda self: None
ModelLabelsFeaturesDouble_swigregister = _hawkes_model.ModelLabelsFeaturesDouble_swigregister
ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,float)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        this = _hawkes_model.new_ModelLabelsFeaturesFloat(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesFloat_get_n_features(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLabelsFeaturesFloat
    __del__ = lambda self: None
ModelLabelsFeaturesFloat_swigregister = _hawkes_model.ModelLabelsFeaturesFloat_swigregister
ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLabelsFeatures<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,std::atomic<(double)>)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        this = _hawkes_model.new_ModelLabelsFeaturesAtomicDouble(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesAtomicDouble_get_n_features(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLabelsFeaturesAtomicDouble
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicDouble_swigregister = _hawkes_model.ModelLabelsFeaturesAtomicDouble_swigregister
ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,std::atomic<(float)>)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        this = _hawkes_model.new_ModelLabelsFeaturesAtomicFloat(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _hawkes_model.ModelLabelsFeaturesAtomicFloat_get_n_features(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLabelsFeaturesAtomicFloat
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicFloat_swigregister = _hawkes_model.ModelLabelsFeaturesAtomicFloat_swigregister
ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitz"""
        this = _hawkes_model.new_ModelLipschitz()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _hawkes_model.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _hawkes_model.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _hawkes_model.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitzDouble"""
        this = _hawkes_model.new_ModelLipschitzDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzDouble self) -> double"""
        return _hawkes_model.ModelLipschitzDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _hawkes_model.ModelLipschitzDouble_get_lip_mean(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLipschitzDouble
    __del__ = lambda self: None
ModelLipschitzDouble_swigregister = _hawkes_model.ModelLipschitzDouble_swigregister
ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    """Proxy of C++ TModelLipschitz<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,float)> self) -> ModelLipschitzFloat"""
        this = _hawkes_model.new_ModelLipschitzFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzFloat self) -> float"""
        return _hawkes_model.ModelLipschitzFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _hawkes_model.ModelLipschitzFloat_get_lip_mean(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLipschitzFloat
    __del__ = lambda self: None
ModelLipschitzFloat_swigregister = _hawkes_model.ModelLipschitzFloat_swigregister
ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLipschitz<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,std::atomic<(double)>)> self) -> ModelLipschitzAtomicDouble"""
        this = _hawkes_model.new_ModelLipschitzAtomicDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_model.ModelLipschitzAtomicDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _hawkes_model.ModelLipschitzAtomicDouble_get_lip_mean(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLipschitzAtomicDouble
    __del__ = lambda self: None
ModelLipschitzAtomicDouble_swigregister = _hawkes_model.ModelLipschitzAtomicDouble_swigregister
ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLipschitz<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,std::atomic<(float)>)> self) -> ModelLipschitzAtomicFloat"""
        this = _hawkes_model.new_ModelLipschitzAtomicFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_model.ModelLipschitzAtomicFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _hawkes_model.ModelLipschitzAtomicFloat_get_lip_mean(self)

    __swig_destroy__ = _hawkes_model.delete_ModelLipschitzAtomicFloat
    __del__ = lambda self: None
ModelLipschitzAtomicFloat_swigregister = _hawkes_model.ModelLipschitzAtomicFloat_swigregister
ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearDouble
        """
        this = _hawkes_model.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _hawkes_model.ModelGeneralizedLinearDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _hawkes_model.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_model.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_model.delete_ModelGeneralizedLinearDouble
    __del__ = lambda self: None
ModelGeneralizedLinearDouble_swigregister = _hawkes_model.ModelGeneralizedLinearDouble_swigregister
ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearFloat
        """
        this = _hawkes_model.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _hawkes_model.ModelGeneralizedLinearFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _hawkes_model.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_model.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_model.delete_ModelGeneralizedLinearFloat
    __del__ = lambda self: None
ModelGeneralizedLinearFloat_swigregister = _hawkes_model.ModelGeneralizedLinearFloat_swigregister
ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicDouble
        """
        this = _hawkes_model.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _hawkes_model.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _hawkes_model.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _hawkes_model.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_model.delete_ModelGeneralizedLinearAtomicDouble
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicDouble_swigregister = _hawkes_model.ModelGeneralizedLinearAtomicDouble_swigregister
ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicFloat
        """
        this = _hawkes_model.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _hawkes_model.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _hawkes_model.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _hawkes_model.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _hawkes_model.delete_ModelGeneralizedLinearAtomicFloat
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicFloat_swigregister = _hawkes_model.ModelGeneralizedLinearAtomicFloat_swigregister
ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelHawkes(Model):
    """Proxy of C++ ModelHawkes class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkes self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkes
        __init__(ModelHawkes self, int const max_n_threads=1) -> ModelHawkes
        __init__(ModelHawkes self) -> ModelHawkes
        """
        this = _hawkes_model.new_ModelHawkes(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkes self, int const max_n_threads)"""
        return _hawkes_model.ModelHawkes_set_n_threads(self, max_n_threads)


    def get_n_nodes(self) -> "ulong":
        """get_n_nodes(ModelHawkes self) -> ulong"""
        return _hawkes_model.ModelHawkes_get_n_nodes(self)


    def get_n_total_jumps(self) -> "ulong":
        """get_n_total_jumps(ModelHawkes self) -> ulong"""
        return _hawkes_model.ModelHawkes_get_n_total_jumps(self)


    def get_n_jumps_per_node(self) -> "SArrayULongPtr":
        """get_n_jumps_per_node(ModelHawkes self) -> SArrayULongPtr"""
        return _hawkes_model.ModelHawkes_get_n_jumps_per_node(self)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkes
    __del__ = lambda self: None
ModelHawkes_swigregister = _hawkes_model.ModelHawkes_swigregister
ModelHawkes_swigregister(ModelHawkes)

class ModelHawkesList(ModelHawkes):
    """Proxy of C++ ModelHawkesList class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesList self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesList
        __init__(ModelHawkesList self, int const max_n_threads=1) -> ModelHawkesList
        __init__(ModelHawkesList self) -> ModelHawkesList
        """
        this = _hawkes_model.new_ModelHawkesList(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_data(self, timestamps_list: 'SArrayDoublePtrList2D const &', end_time: 'VArrayDoublePtr const') -> "void":
        """set_data(ModelHawkesList self, SArrayDoublePtrList2D const & timestamps_list, VArrayDoublePtr const end_time)"""
        return _hawkes_model.ModelHawkesList_set_data(self, timestamps_list, end_time)


    def get_end_times(self) -> "VArrayDoublePtr":
        """get_end_times(ModelHawkesList self) -> VArrayDoublePtr"""
        return _hawkes_model.ModelHawkesList_get_end_times(self)


    def get_n_coeffs(self) -> "ulong":
        """get_n_coeffs(ModelHawkesList self) -> ulong"""
        return _hawkes_model.ModelHawkesList_get_n_coeffs(self)


    def get_n_threads(self) -> "ulong":
        """get_n_threads(ModelHawkesList self) -> ulong"""
        return _hawkes_model.ModelHawkesList_get_n_threads(self)


    def get_n_jumps_per_realization(self) -> "SArrayULongPtr":
        """get_n_jumps_per_realization(ModelHawkesList self) -> SArrayULongPtr"""
        return _hawkes_model.ModelHawkesList_get_n_jumps_per_realization(self)


    def get_timestamps_list(self) -> "SArrayDoublePtrList2D":
        """get_timestamps_list(ModelHawkesList self) -> SArrayDoublePtrList2D"""
        return _hawkes_model.ModelHawkesList_get_timestamps_list(self)


    def set_n_threads(self, max_n_threads: 'int const') -> "void":
        """set_n_threads(ModelHawkesList self, int const max_n_threads)"""
        return _hawkes_model.ModelHawkesList_set_n_threads(self, max_n_threads)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesList
    __del__ = lambda self: None
ModelHawkesList_swigregister = _hawkes_model.ModelHawkesList_swigregister
ModelHawkesList_swigregister(ModelHawkesList)

class ModelHawkesLeastSq(ModelHawkesList):
    """Proxy of C++ ModelHawkesLeastSq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1, optimization_level: 'unsigned int const'=0):
        """
        __init__(ModelHawkesLeastSq self, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesLeastSq
        __init__(ModelHawkesLeastSq self, int const max_n_threads=1) -> ModelHawkesLeastSq
        __init__(ModelHawkesLeastSq self) -> ModelHawkesLeastSq
        """
        this = _hawkes_model.new_ModelHawkesLeastSq(max_n_threads, optimization_level)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLeastSq self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_model.ModelHawkesLeastSq_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLeastSq self)"""
        return _hawkes_model.ModelHawkesLeastSq_compute_weights(self)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesLeastSq
    __del__ = lambda self: None
ModelHawkesLeastSq_swigregister = _hawkes_model.ModelHawkesLeastSq_swigregister
ModelHawkesLeastSq_swigregister(ModelHawkesLeastSq)

class ModelHawkesLogLik(ModelHawkesList):
    """Proxy of C++ ModelHawkesLogLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesLogLik self, int const max_n_threads=1) -> ModelHawkesLogLik
        __init__(ModelHawkesLogLik self) -> ModelHawkesLogLik
        """
        this = _hawkes_model.new_ModelHawkesLogLik(max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def loss_and_grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "double":
        """loss_and_grad(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out) -> double"""
        return _hawkes_model.ModelHawkesLogLik_loss_and_grad(self, coeffs, out)


    def hessian_norm(self, coeffs: 'ArrayDouble const &', vector: 'ArrayDouble const &') -> "double":
        """hessian_norm(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble const & vector) -> double"""
        return _hawkes_model.ModelHawkesLogLik_hessian_norm(self, coeffs, vector)


    def hessian(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesLogLik self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _hawkes_model.ModelHawkesLogLik_hessian(self, coeffs, out)


    def incremental_set_data(self, timestamps: 'SArrayDoublePtrList1D const &', end_time: 'double') -> "void":
        """incremental_set_data(ModelHawkesLogLik self, SArrayDoublePtrList1D const & timestamps, double end_time)"""
        return _hawkes_model.ModelHawkesLogLik_incremental_set_data(self, timestamps, end_time)


    def compute_weights(self) -> "void":
        """compute_weights(ModelHawkesLogLik self)"""
        return _hawkes_model.ModelHawkesLogLik_compute_weights(self)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesLogLik
    __del__ = lambda self: None
ModelHawkesLogLik_swigregister = _hawkes_model.ModelHawkesLogLik_swigregister
ModelHawkesLogLik_swigregister(ModelHawkesLogLik)

class ModelHawkesExpKernLeastSq(ModelHawkesLeastSq):
    """Proxy of C++ ModelHawkesExpKernLeastSq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesExpKernLeastSq self) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays, int const max_n_threads=1) -> ModelHawkesExpKernLeastSq
        __init__(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays) -> ModelHawkesExpKernLeastSq
        """
        this = _hawkes_model.new_ModelHawkesExpKernLeastSq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def hessian(self, out: 'ArrayDouble &') -> "void":
        """hessian(ModelHawkesExpKernLeastSq self, ArrayDouble & out)"""
        return _hawkes_model.ModelHawkesExpKernLeastSq_hessian(self, out)


    def set_decays(self, decays: 'SArrayDouble2dPtr const') -> "void":
        """set_decays(ModelHawkesExpKernLeastSq self, SArrayDouble2dPtr const decays)"""
        return _hawkes_model.ModelHawkesExpKernLeastSq_set_decays(self, decays)


    def __getstate__(self): return ModelHawkesExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesExpKernLeastSq_swigregister = _hawkes_model.ModelHawkesExpKernLeastSq_swigregister
ModelHawkesExpKernLeastSq_swigregister(ModelHawkesExpKernLeastSq)


def ModelHawkesExpKernLeastSqDeserialize(ptr: 'ModelHawkesExpKernLeastSq', hex: 'std::string const &') -> "void":
    """ModelHawkesExpKernLeastSqDeserialize(ModelHawkesExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_model.ModelHawkesExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesExpKernLeastSqSerialize(ptr: 'ModelHawkesExpKernLeastSq') -> "std::string":
    """ModelHawkesExpKernLeastSqSerialize(ModelHawkesExpKernLeastSq ptr) -> std::string"""
    return _hawkes_model.ModelHawkesExpKernLeastSqSerialize(ptr)
class ModelHawkesSumExpKernLeastSq(ModelHawkesLeastSq):
    """Proxy of C++ ModelHawkesSumExpKernLeastSq class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(ModelHawkesSumExpKernLeastSq self) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1, unsigned int const optimization_level=0) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length, unsigned int const max_n_threads=1) -> ModelHawkesSumExpKernLeastSq
        __init__(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays, ulong const n_baselines, double const period_length) -> ModelHawkesSumExpKernLeastSq
        """
        this = _hawkes_model.new_ModelHawkesSumExpKernLeastSq(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble const &') -> "void":
        """set_decays(ModelHawkesSumExpKernLeastSq self, ArrayDouble const & decays)"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_set_decays(self, decays)


    def get_n_decays(self) -> "ulong":
        """get_n_decays(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_get_n_decays(self)


    def get_n_baselines(self) -> "ulong":
        """get_n_baselines(ModelHawkesSumExpKernLeastSq self) -> ulong"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_get_n_baselines(self)


    def get_period_length(self) -> "double":
        """get_period_length(ModelHawkesSumExpKernLeastSq self) -> double"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_get_period_length(self)


    def set_n_baselines(self, n_baselines: 'ulong') -> "void":
        """set_n_baselines(ModelHawkesSumExpKernLeastSq self, ulong n_baselines)"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_set_n_baselines(self, n_baselines)


    def set_period_length(self, period_length: 'double') -> "void":
        """set_period_length(ModelHawkesSumExpKernLeastSq self, double period_length)"""
        return _hawkes_model.ModelHawkesSumExpKernLeastSq_set_period_length(self, period_length)


    def __getstate__(self): return ModelHawkesSumExpKernLeastSqSerialize(self)
    def __setstate__(self, s):
        self.__init__()
        return ModelHawkesSumExpKernLeastSqDeserialize(self, s)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesSumExpKernLeastSq
    __del__ = lambda self: None
ModelHawkesSumExpKernLeastSq_swigregister = _hawkes_model.ModelHawkesSumExpKernLeastSq_swigregister
ModelHawkesSumExpKernLeastSq_swigregister(ModelHawkesSumExpKernLeastSq)


def ModelHawkesSumExpKernLeastSqDeserialize(ptr: 'ModelHawkesSumExpKernLeastSq', hex: 'std::string const &') -> "void":
    """ModelHawkesSumExpKernLeastSqDeserialize(ModelHawkesSumExpKernLeastSq ptr, std::string const & hex)"""
    return _hawkes_model.ModelHawkesSumExpKernLeastSqDeserialize(ptr, hex)

def ModelHawkesSumExpKernLeastSqSerialize(ptr: 'ModelHawkesSumExpKernLeastSq') -> "std::string":
    """ModelHawkesSumExpKernLeastSqSerialize(ModelHawkesSumExpKernLeastSq ptr) -> std::string"""
    return _hawkes_model.ModelHawkesSumExpKernLeastSqSerialize(ptr)
class ModelHawkesExpKernLogLik(ModelHawkesLogLik):
    """Proxy of C++ ModelHawkesExpKernLogLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decay: 'double const', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesExpKernLogLik self, double const decay, int const max_n_threads=1) -> ModelHawkesExpKernLogLik
        __init__(ModelHawkesExpKernLogLik self, double const decay) -> ModelHawkesExpKernLogLik
        """
        this = _hawkes_model.new_ModelHawkesExpKernLogLik(decay, max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decay(self, decay: 'double const') -> "void":
        """set_decay(ModelHawkesExpKernLogLik self, double const decay)"""
        return _hawkes_model.ModelHawkesExpKernLogLik_set_decay(self, decay)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesExpKernLogLik
    __del__ = lambda self: None
ModelHawkesExpKernLogLik_swigregister = _hawkes_model.ModelHawkesExpKernLogLik_swigregister
ModelHawkesExpKernLogLik_swigregister(ModelHawkesExpKernLogLik)

class ModelHawkesSumExpKernLogLik(ModelHawkesLogLik):
    """Proxy of C++ ModelHawkesSumExpKernLogLik class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, decays: 'ArrayDouble const &', max_n_threads: 'int const'=1):
        """
        __init__(ModelHawkesSumExpKernLogLik self, ArrayDouble const & decays, int const max_n_threads=1) -> ModelHawkesSumExpKernLogLik
        __init__(ModelHawkesSumExpKernLogLik self, ArrayDouble const & decays) -> ModelHawkesSumExpKernLogLik
        """
        this = _hawkes_model.new_ModelHawkesSumExpKernLogLik(decays, max_n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def set_decays(self, decays: 'ArrayDouble &') -> "void":
        """set_decays(ModelHawkesSumExpKernLogLik self, ArrayDouble & decays)"""
        return _hawkes_model.ModelHawkesSumExpKernLogLik_set_decays(self, decays)


    def get_decays(self) -> "SArrayDoublePtr":
        """get_decays(ModelHawkesSumExpKernLogLik self) -> SArrayDoublePtr"""
        return _hawkes_model.ModelHawkesSumExpKernLogLik_get_decays(self)

    __swig_destroy__ = _hawkes_model.delete_ModelHawkesSumExpKernLogLik
    __del__ = lambda self: None
ModelHawkesSumExpKernLogLik_swigregister = _hawkes_model.ModelHawkesSumExpKernLogLik_swigregister
ModelHawkesSumExpKernLogLik_swigregister(ModelHawkesSumExpKernLogLik)



