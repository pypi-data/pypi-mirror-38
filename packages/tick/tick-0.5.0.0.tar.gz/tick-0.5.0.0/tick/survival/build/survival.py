# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_survival')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_survival')
    _survival = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_survival', [dirname(__file__)])
        except ImportError:
            import _survival
            return _survival
        if fp is not None:
            try:
                _mod = imp.load_module('_survival', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _survival = swig_import_helper()
    del swig_import_helper
else:
    import _survival
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def to_hex(bytes: 'std::string const &') -> "std::string":
    """to_hex(std::string const & bytes) -> std::string"""
    return _survival.to_hex(bytes)

def to_bytes(hex: 'std::string const &') -> "std::string":
    """to_bytes(std::string const & hex) -> std::string"""
    return _survival.to_bytes(hex)
SHARED_PTR_DISOWN = _survival.SHARED_PTR_DISOWN
import tick.base
import tick.array.build.array
class Model(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> Model"""
        this = _survival.new_Model()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(Model self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _survival.Model_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(Model self, ArrayDouble const & coeffs) -> double"""
        return _survival.Model_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(Model self) -> unsigned long"""
        return _survival.Model_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(Model self) -> bool"""
        return _survival.Model_is_sparse(self)

    __swig_destroy__ = _survival.delete_Model
    __del__ = lambda self: None
Model_swigregister = _survival.Model_swigregister
Model_swigregister(Model)

class ModelDouble(object):
    """Proxy of C++ TModel<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,double)> self) -> ModelDouble"""
        this = _survival.new_ModelDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelDouble self, ArrayDouble const & coeffs, ArrayDouble & out)"""
        return _survival.ModelDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayDouble const &') -> "double":
        """loss(ModelDouble self, ArrayDouble const & coeffs) -> double"""
        return _survival.ModelDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelDouble self) -> unsigned long"""
        return _survival.ModelDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelDouble self) -> bool"""
        return _survival.ModelDouble_is_sparse(self)

    __swig_destroy__ = _survival.delete_ModelDouble
    __del__ = lambda self: None
ModelDouble_swigregister = _survival.ModelDouble_swigregister
ModelDouble_swigregister(ModelDouble)

class ModelFloat(object):
    """Proxy of C++ TModel<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,float)> self) -> ModelFloat"""
        this = _survival.new_ModelFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayFloat const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelFloat self, ArrayFloat const & coeffs, ArrayFloat & out)"""
        return _survival.ModelFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayFloat const &') -> "double":
        """loss(ModelFloat self, ArrayFloat const & coeffs) -> double"""
        return _survival.ModelFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelFloat self) -> unsigned long"""
        return _survival.ModelFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelFloat self) -> bool"""
        return _survival.ModelFloat_is_sparse(self)

    __swig_destroy__ = _survival.delete_ModelFloat
    __del__ = lambda self: None
ModelFloat_swigregister = _survival.ModelFloat_swigregister
ModelFloat_swigregister(ModelFloat)

class ModelAtomicDouble(object):
    """Proxy of C++ TModel<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(double,std::atomic<(double)>)> self) -> ModelAtomicDouble"""
        this = _survival.new_ModelAtomicDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'ArrayAtomicDouble const &', out: 'ArrayDouble &') -> "void":
        """grad(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs, ArrayDouble & out)"""
        return _survival.ModelAtomicDouble_grad(self, coeffs, out)


    def loss(self, coeffs: 'ArrayAtomicDouble const &') -> "double":
        """loss(ModelAtomicDouble self, ArrayAtomicDouble const & coeffs) -> double"""
        return _survival.ModelAtomicDouble_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicDouble self) -> unsigned long"""
        return _survival.ModelAtomicDouble_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicDouble self) -> bool"""
        return _survival.ModelAtomicDouble_is_sparse(self)

    __swig_destroy__ = _survival.delete_ModelAtomicDouble
    __del__ = lambda self: None
ModelAtomicDouble_swigregister = _survival.ModelAtomicDouble_swigregister
ModelAtomicDouble_swigregister(ModelAtomicDouble)

class ModelAtomicFloat(object):
    """Proxy of C++ TModel<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModel<(float,std::atomic<(float)>)> self) -> ModelAtomicFloat"""
        this = _survival.new_ModelAtomicFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def grad(self, coeffs: 'Array< std::atomic< float > > const &', out: 'ArrayFloat &') -> "void":
        """grad(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs, ArrayFloat & out)"""
        return _survival.ModelAtomicFloat_grad(self, coeffs, out)


    def loss(self, coeffs: 'Array< std::atomic< float > > const &') -> "float":
        """loss(ModelAtomicFloat self, Array< std::atomic< float > > const & coeffs) -> float"""
        return _survival.ModelAtomicFloat_loss(self, coeffs)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelAtomicFloat self) -> unsigned long"""
        return _survival.ModelAtomicFloat_get_epoch_size(self)


    def is_sparse(self) -> "bool":
        """is_sparse(ModelAtomicFloat self) -> bool"""
        return _survival.ModelAtomicFloat_is_sparse(self)

    __swig_destroy__ = _survival.delete_ModelAtomicFloat
    __del__ = lambda self: None
ModelAtomicFloat_swigregister = _survival.ModelAtomicFloat_swigregister
ModelAtomicFloat_swigregister(ModelAtomicFloat)

class ModelLabelsFeaturesDouble(Model):
    """Proxy of C++ TModelLabelsFeatures<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,double)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesDouble"""
        this = _survival.new_ModelLabelsFeaturesDouble(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesDouble self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesDouble_get_n_features(self)

    __swig_destroy__ = _survival.delete_ModelLabelsFeaturesDouble
    __del__ = lambda self: None
ModelLabelsFeaturesDouble_swigregister = _survival.ModelLabelsFeaturesDouble_swigregister
ModelLabelsFeaturesDouble_swigregister(ModelLabelsFeaturesDouble)

class ModelLabelsFeaturesFloat(ModelFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,float)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesFloat"""
        this = _survival.new_ModelLabelsFeaturesFloat(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesFloat self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesFloat_get_n_features(self)

    __swig_destroy__ = _survival.delete_ModelLabelsFeaturesFloat
    __del__ = lambda self: None
ModelLabelsFeaturesFloat_swigregister = _survival.ModelLabelsFeaturesFloat_swigregister
ModelLabelsFeaturesFloat_swigregister(ModelLabelsFeaturesFloat)

class ModelLabelsFeaturesAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLabelsFeatures<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< double > > const', labels: 'std::shared_ptr< SArray< double > > const'):
        """__init__(TModelLabelsFeatures<(double,std::atomic<(double)>)> self, std::shared_ptr< BaseArray2d< double > > const features, std::shared_ptr< SArray< double > > const labels) -> ModelLabelsFeaturesAtomicDouble"""
        this = _survival.new_ModelLabelsFeaturesAtomicDouble(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesAtomicDouble_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicDouble self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesAtomicDouble_get_n_features(self)

    __swig_destroy__ = _survival.delete_ModelLabelsFeaturesAtomicDouble
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicDouble_swigregister = _survival.ModelLabelsFeaturesAtomicDouble_swigregister
ModelLabelsFeaturesAtomicDouble_swigregister(ModelLabelsFeaturesAtomicDouble)

class ModelLabelsFeaturesAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLabelsFeatures<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'std::shared_ptr< BaseArray2d< float > > const', labels: 'std::shared_ptr< SArray< float > > const'):
        """__init__(TModelLabelsFeatures<(float,std::atomic<(float)>)> self, std::shared_ptr< BaseArray2d< float > > const features, std::shared_ptr< SArray< float > > const labels) -> ModelLabelsFeaturesAtomicFloat"""
        this = _survival.new_ModelLabelsFeaturesAtomicFloat(features, labels)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_samples(self) -> "unsigned long":
        """get_n_samples(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesAtomicFloat_get_n_samples(self)


    def get_n_features(self) -> "unsigned long":
        """get_n_features(ModelLabelsFeaturesAtomicFloat self) -> unsigned long"""
        return _survival.ModelLabelsFeaturesAtomicFloat_get_n_features(self)

    __swig_destroy__ = _survival.delete_ModelLabelsFeaturesAtomicFloat
    __del__ = lambda self: None
ModelLabelsFeaturesAtomicFloat_swigregister = _survival.ModelLabelsFeaturesAtomicFloat_swigregister
ModelLabelsFeaturesAtomicFloat_swigregister(ModelLabelsFeaturesAtomicFloat)

class ModelLipschitz(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitz"""
        this = _survival.new_ModelLipschitz()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitz self) -> double"""
        return _survival.ModelLipschitz_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitz self) -> double"""
        return _survival.ModelLipschitz_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitz
    __del__ = lambda self: None
ModelLipschitz_swigregister = _survival.ModelLipschitz_swigregister
ModelLipschitz_swigregister(ModelLipschitz)

class ModelLipschitzDouble(Model):
    """Proxy of C++ TModelLipschitz<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,double)> self) -> ModelLipschitzDouble"""
        this = _survival.new_ModelLipschitzDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzDouble self) -> double"""
        return _survival.ModelLipschitzDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzDouble self) -> double"""
        return _survival.ModelLipschitzDouble_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitzDouble
    __del__ = lambda self: None
ModelLipschitzDouble_swigregister = _survival.ModelLipschitzDouble_swigregister
ModelLipschitzDouble_swigregister(ModelLipschitzDouble)

class ModelLipschitzFloat(ModelFloat):
    """Proxy of C++ TModelLipschitz<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,float)> self) -> ModelLipschitzFloat"""
        this = _survival.new_ModelLipschitzFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzFloat self) -> float"""
        return _survival.ModelLipschitzFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzFloat self) -> float"""
        return _survival.ModelLipschitzFloat_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitzFloat
    __del__ = lambda self: None
ModelLipschitzFloat_swigregister = _survival.ModelLipschitzFloat_swigregister
ModelLipschitzFloat_swigregister(ModelLipschitzFloat)

class ModelLipschitzAtomicDouble(ModelAtomicDouble):
    """Proxy of C++ TModelLipschitz<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(double,std::atomic<(double)>)> self) -> ModelLipschitzAtomicDouble"""
        this = _survival.new_ModelLipschitzAtomicDouble()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "double":
        """get_lip_max(ModelLipschitzAtomicDouble self) -> double"""
        return _survival.ModelLipschitzAtomicDouble_get_lip_max(self)


    def get_lip_mean(self) -> "double":
        """get_lip_mean(ModelLipschitzAtomicDouble self) -> double"""
        return _survival.ModelLipschitzAtomicDouble_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitzAtomicDouble
    __del__ = lambda self: None
ModelLipschitzAtomicDouble_swigregister = _survival.ModelLipschitzAtomicDouble_swigregister
ModelLipschitzAtomicDouble_swigregister(ModelLipschitzAtomicDouble)

class ModelLipschitzAtomicFloat(ModelAtomicFloat):
    """Proxy of C++ TModelLipschitz<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(TModelLipschitz<(float,std::atomic<(float)>)> self) -> ModelLipschitzAtomicFloat"""
        this = _survival.new_ModelLipschitzAtomicFloat()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_lip_max(self) -> "float":
        """get_lip_max(ModelLipschitzAtomicFloat self) -> float"""
        return _survival.ModelLipschitzAtomicFloat_get_lip_max(self)


    def get_lip_mean(self) -> "float":
        """get_lip_mean(ModelLipschitzAtomicFloat self) -> float"""
        return _survival.ModelLipschitzAtomicFloat_get_lip_mean(self)

    __swig_destroy__ = _survival.delete_ModelLipschitzAtomicFloat
    __del__ = lambda self: None
ModelLipschitzAtomicFloat_swigregister = _survival.ModelLipschitzAtomicFloat_swigregister
ModelLipschitzAtomicFloat_swigregister(ModelLipschitzAtomicFloat)

class ModelGeneralizedLinearDouble(ModelLabelsFeaturesDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearDouble
        __init__(TModelGeneralizedLinear<(double,double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearDouble
        """
        this = _survival.new_ModelGeneralizedLinearDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearDouble self) -> unsigned long"""
        return _survival.ModelGeneralizedLinearDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearDouble self, bool fit_intercept)"""
        return _survival.ModelGeneralizedLinearDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _survival.ModelGeneralizedLinearDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _survival.delete_ModelGeneralizedLinearDouble
    __del__ = lambda self: None
ModelGeneralizedLinearDouble_swigregister = _survival.ModelGeneralizedLinearDouble_swigregister
ModelGeneralizedLinearDouble_swigregister(ModelGeneralizedLinearDouble)

class ModelGeneralizedLinearFloat(ModelLabelsFeaturesFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearFloat
        __init__(TModelGeneralizedLinear<(float,float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearFloat
        """
        this = _survival.new_ModelGeneralizedLinearFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearFloat self) -> unsigned long"""
        return _survival.ModelGeneralizedLinearFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearFloat self, bool fit_intercept)"""
        return _survival.ModelGeneralizedLinearFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _survival.ModelGeneralizedLinearFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _survival.delete_ModelGeneralizedLinearFloat
    __del__ = lambda self: None
ModelGeneralizedLinearFloat_swigregister = _survival.ModelGeneralizedLinearFloat_swigregister
ModelGeneralizedLinearFloat_swigregister(ModelGeneralizedLinearFloat)

class ModelGeneralizedLinearAtomicDouble(ModelLabelsFeaturesAtomicDouble):
    """Proxy of C++ TModelGeneralizedLinear<(double,std::atomic<(double)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', labels: 'SArrayDoublePtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicDouble
        __init__(TModelGeneralizedLinear<(double,std::atomic<(double)>)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicDouble
        """
        this = _survival.new_ModelGeneralizedLinearAtomicDouble(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicDouble self) -> unsigned long"""
        return _survival.ModelGeneralizedLinearAtomicDouble_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicDouble self, bool fit_intercept)"""
        return _survival.ModelGeneralizedLinearAtomicDouble_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'double const', dual_vector: 'ArrayDouble const &', out_primal_vector: 'ArrayDouble &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicDouble self, double const l_l2sq, ArrayDouble const & dual_vector, ArrayDouble & out_primal_vector)"""
        return _survival.ModelGeneralizedLinearAtomicDouble_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _survival.delete_ModelGeneralizedLinearAtomicDouble
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicDouble_swigregister = _survival.ModelGeneralizedLinearAtomicDouble_swigregister
ModelGeneralizedLinearAtomicDouble_swigregister(ModelGeneralizedLinearAtomicDouble)

class ModelGeneralizedLinearAtomicFloat(ModelLabelsFeaturesAtomicFloat):
    """Proxy of C++ TModelGeneralizedLinear<(float,std::atomic<(float)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', labels: 'SArrayFloatPtr const', fit_intercept: 'bool const', n_threads: 'int const'=1):
        """
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept, int const n_threads=1) -> ModelGeneralizedLinearAtomicFloat
        __init__(TModelGeneralizedLinear<(float,std::atomic<(float)>)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const labels, bool const fit_intercept) -> ModelGeneralizedLinearAtomicFloat
        """
        this = _survival.new_ModelGeneralizedLinearAtomicFloat(features, labels, fit_intercept, n_threads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelGeneralizedLinearAtomicFloat self) -> unsigned long"""
        return _survival.ModelGeneralizedLinearAtomicFloat_get_n_coeffs(self)


    def set_fit_intercept(self, fit_intercept: 'bool') -> "void":
        """set_fit_intercept(ModelGeneralizedLinearAtomicFloat self, bool fit_intercept)"""
        return _survival.ModelGeneralizedLinearAtomicFloat_set_fit_intercept(self, fit_intercept)


    def sdca_primal_dual_relation(self, l_l2sq: 'float const', dual_vector: 'ArrayFloat const &', out_primal_vector: 'ArrayFloat &') -> "void":
        """sdca_primal_dual_relation(ModelGeneralizedLinearAtomicFloat self, float const l_l2sq, ArrayFloat const & dual_vector, ArrayFloat & out_primal_vector)"""
        return _survival.ModelGeneralizedLinearAtomicFloat_sdca_primal_dual_relation(self, l_l2sq, dual_vector, out_primal_vector)

    __swig_destroy__ = _survival.delete_ModelGeneralizedLinearAtomicFloat
    __del__ = lambda self: None
ModelGeneralizedLinearAtomicFloat_swigregister = _survival.ModelGeneralizedLinearAtomicFloat_swigregister
ModelGeneralizedLinearAtomicFloat_swigregister(ModelGeneralizedLinearAtomicFloat)

class ModelCoxRegPartialLik(Model):
    """Proxy of C++ TModelCoxRegPartialLik<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', times: 'SArrayDoublePtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(TModelCoxRegPartialLik<(double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLik"""
        this = _survival.new_ModelCoxRegPartialLik(features, times, censoring)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _survival.delete_ModelCoxRegPartialLik
    __del__ = lambda self: None
ModelCoxRegPartialLik_swigregister = _survival.ModelCoxRegPartialLik_swigregister
ModelCoxRegPartialLik_swigregister(ModelCoxRegPartialLik)

class ModelCoxRegPartialLikDouble(Model):
    """Proxy of C++ TModelCoxRegPartialLik<(double)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtr const', times: 'SArrayDoublePtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(TModelCoxRegPartialLik<(double)> self, SBaseArrayDouble2dPtr const features, SArrayDoublePtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLikDouble"""
        this = _survival.new_ModelCoxRegPartialLikDouble(features, times, censoring)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _survival.delete_ModelCoxRegPartialLikDouble
    __del__ = lambda self: None
ModelCoxRegPartialLikDouble_swigregister = _survival.ModelCoxRegPartialLikDouble_swigregister
ModelCoxRegPartialLikDouble_swigregister(ModelCoxRegPartialLikDouble)

class ModelCoxRegPartialLikFloat(ModelFloat):
    """Proxy of C++ TModelCoxRegPartialLik<(float)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayFloat2dPtr const', times: 'SArrayFloatPtr const', censoring: 'SArrayUShortPtr const'):
        """__init__(TModelCoxRegPartialLik<(float)> self, SBaseArrayFloat2dPtr const features, SArrayFloatPtr const times, SArrayUShortPtr const censoring) -> ModelCoxRegPartialLikFloat"""
        this = _survival.new_ModelCoxRegPartialLikFloat(features, times, censoring)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _survival.delete_ModelCoxRegPartialLikFloat
    __del__ = lambda self: None
ModelCoxRegPartialLikFloat_swigregister = _survival.ModelCoxRegPartialLikFloat_swigregister
ModelCoxRegPartialLikFloat_swigregister(ModelCoxRegPartialLikFloat)

class ModelSCCS(ModelLipschitz):
    """Proxy of C++ ModelSCCS class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, features: 'SBaseArrayDouble2dPtrList1D const &', labels: 'SArrayIntPtrList1D const &', censoring: 'SBaseArrayULongPtr const', n_lags: 'SArrayULongPtr const'):
        """__init__(ModelSCCS self, SBaseArrayDouble2dPtrList1D const & features, SArrayIntPtrList1D const & labels, SBaseArrayULongPtr const censoring, SArrayULongPtr const n_lags) -> ModelSCCS"""
        this = _survival.new_ModelSCCS(features, labels, censoring, n_lags)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def loss(self, coeffs: 'ArrayDouble &') -> "double":
        """loss(ModelSCCS self, ArrayDouble & coeffs) -> double"""
        return _survival.ModelSCCS_loss(self, coeffs)


    def grad(self, coeffs: 'ArrayDouble &', out: 'ArrayDouble &') -> "void":
        """grad(ModelSCCS self, ArrayDouble & coeffs, ArrayDouble & out)"""
        return _survival.ModelSCCS_grad(self, coeffs, out)


    def compute_lip_consts(self) -> "void":
        """compute_lip_consts(ModelSCCS self)"""
        return _survival.ModelSCCS_compute_lip_consts(self)


    def get_rand_max(self) -> "unsigned long":
        """get_rand_max(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_rand_max(self)


    def get_epoch_size(self) -> "unsigned long":
        """get_epoch_size(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_epoch_size(self)


    def get_n_coeffs(self) -> "unsigned long":
        """get_n_coeffs(ModelSCCS self) -> unsigned long"""
        return _survival.ModelSCCS_get_n_coeffs(self)


    def get_lip_max(self) -> "double":
        """get_lip_max(ModelSCCS self) -> double"""
        return _survival.ModelSCCS_get_lip_max(self)

    __swig_destroy__ = _survival.delete_ModelSCCS
    __del__ = lambda self: None
ModelSCCS_swigregister = _survival.ModelSCCS_swigregister
ModelSCCS_swigregister(ModelSCCS)



