#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
import logging
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def forbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def forbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - group_id
    """
    pass

  def forbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - device_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - device_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def forbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def taxiOrderHold(self, taxi_order_id, holdContent, isSend, sys_op_id):
    """
    Parameters:
     - taxi_order_id
     - holdContent
     - isSend
     - sys_op_id
    """
    pass

  def taxiOrderCancelHold(self, taxi_order_id, holdContent, sys_op_id):
    """
    Parameters:
     - taxi_order_id
     - holdContent
     - sys_op_id
    """
    pass

  def orderHold(self, order_id, holdContent, isSend, sys_op_id):
    """
    Parameters:
     - order_id
     - holdContent
     - isSend
     - sys_op_id
    """
    pass

  def orderCancelHold(self, order_id, holdContent, sys_op_id):
    """
    Parameters:
     - order_id
     - holdContent
     - sys_op_id
    """
    pass

  def taxiOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - order_id
     - sys_order_group
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def delReply(self, replyId):
    """
    Parameters:
     - replyId
    """
    pass

  def delReplyMulti(self, replyIds):
    """
    Parameters:
     - replyIds
    """
    pass

  def maskReply(self, replyId, mask):
    """
    Parameters:
     - replyId
     - mask
    """
    pass

  def maskReplyMulti(self, replyIds):
    """
    Parameters:
     - replyIds
    """
    pass

  def forbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - group_id
    """
    pass

  def forbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    pass

  def unforbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def userOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - order_id
     - sys_order_group
     - reason
     - sys_op_id
     - sys_op_ip
    """
    pass

  def createBatch(self, source, type, awardTime):
    """
    Parameters:
     - source
     - type
     - awardTime
    """
    pass

  def insertDetail(self, batchId, userId, balance, allOrderNum, actualOrderNum, cityId):
    """
    Parameters:
     - batchId
     - userId
     - balance
     - allOrderNum
     - actualOrderNum
     - cityId
    """
    pass

  def closeBatch(self, batchId):
    """
    Parameters:
     - batchId
    """
    pass

  def taxiOrderSetTagAndDebit(self, taxi_order_id, debitContent, sys_op_id, debitType, debitMoney):
    """
    Parameters:
     - taxi_order_id
     - debitContent
     - sys_op_id
     - debitType
     - debitMoney
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def forbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenUser(user_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenUser()

  def send_forbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenUser', TMessageType.CALL, self._seqid)
    args = forbiddenUser_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenUser(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenUser_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenUser failed: unknown result")

  def unforbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_unforbiddenUser(user_id, reason, sys_op_id, sys_op_ip)
    return self.recv_unforbiddenUser()

  def send_unforbiddenUser(self, user_id, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('unforbiddenUser', TMessageType.CALL, self._seqid)
    args = unforbiddenUser_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenUser(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenUser_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenUser failed: unknown result")

  def forbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenDriver(user_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenDriver()

  def send_forbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenDriver', TMessageType.CALL, self._seqid)
    args = forbiddenDriver_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenDriver(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenDriver_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenDriver failed: unknown result")

  def unforbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - group_id
    """
    self.send_unforbiddenDriver(user_id, reason, sys_op_id, sys_op_ip, group_id)
    return self.recv_unforbiddenDriver()

  def send_unforbiddenDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    self._oprot.writeMessageBegin('unforbiddenDriver', TMessageType.CALL, self._seqid)
    args = unforbiddenDriver_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.group_id = group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenDriver(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenDriver_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenDriver failed: unknown result")

  def forbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - device_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenDevice(device_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenDevice()

  def send_forbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenDevice', TMessageType.CALL, self._seqid)
    args = forbiddenDevice_args()
    args.device_id = device_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenDevice(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenDevice_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenDevice failed: unknown result")

  def unforbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - device_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_unforbiddenDevice(device_id, reason, sys_op_id, sys_op_ip)
    return self.recv_unforbiddenDevice()

  def send_unforbiddenDevice(self, device_id, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('unforbiddenDevice', TMessageType.CALL, self._seqid)
    args = unforbiddenDevice_args()
    args.device_id = device_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenDevice(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenDevice_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenDevice failed: unknown result")

  def forbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenPost(user_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenPost()

  def send_forbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenPost', TMessageType.CALL, self._seqid)
    args = forbiddenPost_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenPost(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenPost_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenPost failed: unknown result")

  def unforbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_unforbiddenPost(user_id, reason, sys_op_id, sys_op_ip)
    return self.recv_unforbiddenPost()

  def send_unforbiddenPost(self, user_id, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('unforbiddenPost', TMessageType.CALL, self._seqid)
    args = unforbiddenPost_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenPost(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenPost_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenPost failed: unknown result")

  def taxiOrderHold(self, taxi_order_id, holdContent, isSend, sys_op_id):
    """
    Parameters:
     - taxi_order_id
     - holdContent
     - isSend
     - sys_op_id
    """
    self.send_taxiOrderHold(taxi_order_id, holdContent, isSend, sys_op_id)
    return self.recv_taxiOrderHold()

  def send_taxiOrderHold(self, taxi_order_id, holdContent, isSend, sys_op_id):
    self._oprot.writeMessageBegin('taxiOrderHold', TMessageType.CALL, self._seqid)
    args = taxiOrderHold_args()
    args.taxi_order_id = taxi_order_id
    args.holdContent = holdContent
    args.isSend = isSend
    args.sys_op_id = sys_op_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_taxiOrderHold(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = taxiOrderHold_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "taxiOrderHold failed: unknown result")

  def taxiOrderCancelHold(self, taxi_order_id, holdContent, sys_op_id):
    """
    Parameters:
     - taxi_order_id
     - holdContent
     - sys_op_id
    """
    self.send_taxiOrderCancelHold(taxi_order_id, holdContent, sys_op_id)
    return self.recv_taxiOrderCancelHold()

  def send_taxiOrderCancelHold(self, taxi_order_id, holdContent, sys_op_id):
    self._oprot.writeMessageBegin('taxiOrderCancelHold', TMessageType.CALL, self._seqid)
    args = taxiOrderCancelHold_args()
    args.taxi_order_id = taxi_order_id
    args.holdContent = holdContent
    args.sys_op_id = sys_op_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_taxiOrderCancelHold(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = taxiOrderCancelHold_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "taxiOrderCancelHold failed: unknown result")

  def orderHold(self, order_id, holdContent, isSend, sys_op_id):
    """
    Parameters:
     - order_id
     - holdContent
     - isSend
     - sys_op_id
    """
    self.send_orderHold(order_id, holdContent, isSend, sys_op_id)
    return self.recv_orderHold()

  def send_orderHold(self, order_id, holdContent, isSend, sys_op_id):
    self._oprot.writeMessageBegin('orderHold', TMessageType.CALL, self._seqid)
    args = orderHold_args()
    args.order_id = order_id
    args.holdContent = holdContent
    args.isSend = isSend
    args.sys_op_id = sys_op_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_orderHold(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = orderHold_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "orderHold failed: unknown result")

  def orderCancelHold(self, order_id, holdContent, sys_op_id):
    """
    Parameters:
     - order_id
     - holdContent
     - sys_op_id
    """
    self.send_orderCancelHold(order_id, holdContent, sys_op_id)
    return self.recv_orderCancelHold()

  def send_orderCancelHold(self, order_id, holdContent, sys_op_id):
    self._oprot.writeMessageBegin('orderCancelHold', TMessageType.CALL, self._seqid)
    args = orderCancelHold_args()
    args.order_id = order_id
    args.holdContent = holdContent
    args.sys_op_id = sys_op_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_orderCancelHold(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = orderCancelHold_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "orderCancelHold failed: unknown result")

  def taxiOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - order_id
     - sys_order_group
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_taxiOrderSetTag(order_id, sys_order_group, reason, sys_op_id, sys_op_ip)
    return self.recv_taxiOrderSetTag()

  def send_taxiOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('taxiOrderSetTag', TMessageType.CALL, self._seqid)
    args = taxiOrderSetTag_args()
    args.order_id = order_id
    args.sys_order_group = sys_order_group
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_taxiOrderSetTag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = taxiOrderSetTag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "taxiOrderSetTag failed: unknown result")

  def delReply(self, replyId):
    """
    Parameters:
     - replyId
    """
    self.send_delReply(replyId)
    return self.recv_delReply()

  def send_delReply(self, replyId):
    self._oprot.writeMessageBegin('delReply', TMessageType.CALL, self._seqid)
    args = delReply_args()
    args.replyId = replyId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_delReply(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = delReply_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "delReply failed: unknown result")

  def delReplyMulti(self, replyIds):
    """
    Parameters:
     - replyIds
    """
    self.send_delReplyMulti(replyIds)
    return self.recv_delReplyMulti()

  def send_delReplyMulti(self, replyIds):
    self._oprot.writeMessageBegin('delReplyMulti', TMessageType.CALL, self._seqid)
    args = delReplyMulti_args()
    args.replyIds = replyIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_delReplyMulti(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = delReplyMulti_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "delReplyMulti failed: unknown result")

  def maskReply(self, replyId, mask):
    """
    Parameters:
     - replyId
     - mask
    """
    self.send_maskReply(replyId, mask)
    return self.recv_maskReply()

  def send_maskReply(self, replyId, mask):
    self._oprot.writeMessageBegin('maskReply', TMessageType.CALL, self._seqid)
    args = maskReply_args()
    args.replyId = replyId
    args.mask = mask
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_maskReply(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = maskReply_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "maskReply failed: unknown result")

  def maskReplyMulti(self, replyIds):
    """
    Parameters:
     - replyIds
    """
    self.send_maskReplyMulti(replyIds)
    return self.recv_maskReplyMulti()

  def send_maskReplyMulti(self, replyIds):
    self._oprot.writeMessageBegin('maskReplyMulti', TMessageType.CALL, self._seqid)
    args = maskReplyMulti_args()
    args.replyIds = replyIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_maskReplyMulti(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = maskReplyMulti_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "maskReplyMulti failed: unknown result")

  def forbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenTaxiDriver(user_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenTaxiDriver()

  def send_forbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenTaxiDriver', TMessageType.CALL, self._seqid)
    args = forbiddenTaxiDriver_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenTaxiDriver(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenTaxiDriver_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenTaxiDriver failed: unknown result")

  def unforbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - group_id
    """
    self.send_unforbiddenTaxiDriver(user_id, reason, sys_op_id, sys_op_ip, group_id)
    return self.recv_unforbiddenTaxiDriver()

  def send_unforbiddenTaxiDriver(self, user_id, reason, sys_op_id, sys_op_ip, group_id):
    self._oprot.writeMessageBegin('unforbiddenTaxiDriver', TMessageType.CALL, self._seqid)
    args = unforbiddenTaxiDriver_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.group_id = group_id
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenTaxiDriver(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenTaxiDriver_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenTaxiDriver failed: unknown result")

  def forbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
     - days
    """
    self.send_forbiddenTaxiUser(user_id, reason, sys_op_id, sys_op_ip, days)
    return self.recv_forbiddenTaxiUser()

  def send_forbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip, days):
    self._oprot.writeMessageBegin('forbiddenTaxiUser', TMessageType.CALL, self._seqid)
    args = forbiddenTaxiUser_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.days = days
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_forbiddenTaxiUser(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = forbiddenTaxiUser_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "forbiddenTaxiUser failed: unknown result")

  def unforbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - user_id
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_unforbiddenTaxiUser(user_id, reason, sys_op_id, sys_op_ip)
    return self.recv_unforbiddenTaxiUser()

  def send_unforbiddenTaxiUser(self, user_id, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('unforbiddenTaxiUser', TMessageType.CALL, self._seqid)
    args = unforbiddenTaxiUser_args()
    args.user_id = user_id
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_unforbiddenTaxiUser(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = unforbiddenTaxiUser_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "unforbiddenTaxiUser failed: unknown result")

  def userOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    """
    Parameters:
     - order_id
     - sys_order_group
     - reason
     - sys_op_id
     - sys_op_ip
    """
    self.send_userOrderSetTag(order_id, sys_order_group, reason, sys_op_id, sys_op_ip)
    return self.recv_userOrderSetTag()

  def send_userOrderSetTag(self, order_id, sys_order_group, reason, sys_op_id, sys_op_ip):
    self._oprot.writeMessageBegin('userOrderSetTag', TMessageType.CALL, self._seqid)
    args = userOrderSetTag_args()
    args.order_id = order_id
    args.sys_order_group = sys_order_group
    args.reason = reason
    args.sys_op_id = sys_op_id
    args.sys_op_ip = sys_op_ip
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_userOrderSetTag(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = userOrderSetTag_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "userOrderSetTag failed: unknown result")

  def createBatch(self, source, type, awardTime):
    """
    Parameters:
     - source
     - type
     - awardTime
    """
    self.send_createBatch(source, type, awardTime)
    return self.recv_createBatch()

  def send_createBatch(self, source, type, awardTime):
    self._oprot.writeMessageBegin('createBatch', TMessageType.CALL, self._seqid)
    args = createBatch_args()
    args.source = source
    args.type = type
    args.awardTime = awardTime
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createBatch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = createBatch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createBatch failed: unknown result")

  def insertDetail(self, batchId, userId, balance, allOrderNum, actualOrderNum, cityId):
    """
    Parameters:
     - batchId
     - userId
     - balance
     - allOrderNum
     - actualOrderNum
     - cityId
    """
    self.send_insertDetail(batchId, userId, balance, allOrderNum, actualOrderNum, cityId)
    return self.recv_insertDetail()

  def send_insertDetail(self, batchId, userId, balance, allOrderNum, actualOrderNum, cityId):
    self._oprot.writeMessageBegin('insertDetail', TMessageType.CALL, self._seqid)
    args = insertDetail_args()
    args.batchId = batchId
    args.userId = userId
    args.balance = balance
    args.allOrderNum = allOrderNum
    args.actualOrderNum = actualOrderNum
    args.cityId = cityId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_insertDetail(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = insertDetail_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "insertDetail failed: unknown result")

  def closeBatch(self, batchId):
    """
    Parameters:
     - batchId
    """
    self.send_closeBatch(batchId)
    return self.recv_closeBatch()

  def send_closeBatch(self, batchId):
    self._oprot.writeMessageBegin('closeBatch', TMessageType.CALL, self._seqid)
    args = closeBatch_args()
    args.batchId = batchId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_closeBatch(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = closeBatch_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "closeBatch failed: unknown result")

  def taxiOrderSetTagAndDebit(self, taxi_order_id, debitContent, sys_op_id, debitType, debitMoney):
    """
    Parameters:
     - taxi_order_id
     - debitContent
     - sys_op_id
     - debitType
     - debitMoney
    """
    self.send_taxiOrderSetTagAndDebit(taxi_order_id, debitContent, sys_op_id, debitType, debitMoney)
    return self.recv_taxiOrderSetTagAndDebit()

  def send_taxiOrderSetTagAndDebit(self, taxi_order_id, debitContent, sys_op_id, debitType, debitMoney):
    self._oprot.writeMessageBegin('taxiOrderSetTagAndDebit', TMessageType.CALL, self._seqid)
    args = taxiOrderSetTagAndDebit_args()
    args.taxi_order_id = taxi_order_id
    args.debitContent = debitContent
    args.sys_op_id = sys_op_id
    args.debitType = debitType
    args.debitMoney = debitMoney
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_taxiOrderSetTagAndDebit(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = taxiOrderSetTagAndDebit_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "taxiOrderSetTagAndDebit failed: unknown result")


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["forbiddenUser"] = Processor.process_forbiddenUser
    self._processMap["unforbiddenUser"] = Processor.process_unforbiddenUser
    self._processMap["forbiddenDriver"] = Processor.process_forbiddenDriver
    self._processMap["unforbiddenDriver"] = Processor.process_unforbiddenDriver
    self._processMap["forbiddenDevice"] = Processor.process_forbiddenDevice
    self._processMap["unforbiddenDevice"] = Processor.process_unforbiddenDevice
    self._processMap["forbiddenPost"] = Processor.process_forbiddenPost
    self._processMap["unforbiddenPost"] = Processor.process_unforbiddenPost
    self._processMap["taxiOrderHold"] = Processor.process_taxiOrderHold
    self._processMap["taxiOrderCancelHold"] = Processor.process_taxiOrderCancelHold
    self._processMap["orderHold"] = Processor.process_orderHold
    self._processMap["orderCancelHold"] = Processor.process_orderCancelHold
    self._processMap["taxiOrderSetTag"] = Processor.process_taxiOrderSetTag
    self._processMap["delReply"] = Processor.process_delReply
    self._processMap["delReplyMulti"] = Processor.process_delReplyMulti
    self._processMap["maskReply"] = Processor.process_maskReply
    self._processMap["maskReplyMulti"] = Processor.process_maskReplyMulti
    self._processMap["forbiddenTaxiDriver"] = Processor.process_forbiddenTaxiDriver
    self._processMap["unforbiddenTaxiDriver"] = Processor.process_unforbiddenTaxiDriver
    self._processMap["forbiddenTaxiUser"] = Processor.process_forbiddenTaxiUser
    self._processMap["unforbiddenTaxiUser"] = Processor.process_unforbiddenTaxiUser
    self._processMap["userOrderSetTag"] = Processor.process_userOrderSetTag
    self._processMap["createBatch"] = Processor.process_createBatch
    self._processMap["insertDetail"] = Processor.process_insertDetail
    self._processMap["closeBatch"] = Processor.process_closeBatch
    self._processMap["taxiOrderSetTagAndDebit"] = Processor.process_taxiOrderSetTagAndDebit

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_forbiddenUser(self, seqid, iprot, oprot):
    args = forbiddenUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenUser_result()
    try:
      result.success = self._handler.forbiddenUser(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenUser", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenUser(self, seqid, iprot, oprot):
    args = unforbiddenUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenUser_result()
    try:
      result.success = self._handler.unforbiddenUser(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenUser", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forbiddenDriver(self, seqid, iprot, oprot):
    args = forbiddenDriver_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenDriver_result()
    try:
      result.success = self._handler.forbiddenDriver(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenDriver", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenDriver(self, seqid, iprot, oprot):
    args = unforbiddenDriver_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenDriver_result()
    try:
      result.success = self._handler.unforbiddenDriver(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.group_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenDriver", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forbiddenDevice(self, seqid, iprot, oprot):
    args = forbiddenDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenDevice_result()
    try:
      result.success = self._handler.forbiddenDevice(args.device_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenDevice", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenDevice(self, seqid, iprot, oprot):
    args = unforbiddenDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenDevice_result()
    try:
      result.success = self._handler.unforbiddenDevice(args.device_id, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenDevice", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forbiddenPost(self, seqid, iprot, oprot):
    args = forbiddenPost_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenPost_result()
    try:
      result.success = self._handler.forbiddenPost(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenPost", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenPost(self, seqid, iprot, oprot):
    args = unforbiddenPost_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenPost_result()
    try:
      result.success = self._handler.unforbiddenPost(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenPost", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_taxiOrderHold(self, seqid, iprot, oprot):
    args = taxiOrderHold_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = taxiOrderHold_result()
    try:
      result.success = self._handler.taxiOrderHold(args.taxi_order_id, args.holdContent, args.isSend, args.sys_op_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("taxiOrderHold", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_taxiOrderCancelHold(self, seqid, iprot, oprot):
    args = taxiOrderCancelHold_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = taxiOrderCancelHold_result()
    try:
      result.success = self._handler.taxiOrderCancelHold(args.taxi_order_id, args.holdContent, args.sys_op_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("taxiOrderCancelHold", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_orderHold(self, seqid, iprot, oprot):
    args = orderHold_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = orderHold_result()
    try:
      result.success = self._handler.orderHold(args.order_id, args.holdContent, args.isSend, args.sys_op_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("orderHold", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_orderCancelHold(self, seqid, iprot, oprot):
    args = orderCancelHold_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = orderCancelHold_result()
    try:
      result.success = self._handler.orderCancelHold(args.order_id, args.holdContent, args.sys_op_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("orderCancelHold", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_taxiOrderSetTag(self, seqid, iprot, oprot):
    args = taxiOrderSetTag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = taxiOrderSetTag_result()
    try:
      result.success = self._handler.taxiOrderSetTag(args.order_id, args.sys_order_group, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("taxiOrderSetTag", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_delReply(self, seqid, iprot, oprot):
    args = delReply_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = delReply_result()
    try:
      result.success = self._handler.delReply(args.replyId)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("delReply", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_delReplyMulti(self, seqid, iprot, oprot):
    args = delReplyMulti_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = delReplyMulti_result()
    try:
      result.success = self._handler.delReplyMulti(args.replyIds)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("delReplyMulti", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_maskReply(self, seqid, iprot, oprot):
    args = maskReply_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = maskReply_result()
    try:
      result.success = self._handler.maskReply(args.replyId, args.mask)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("maskReply", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_maskReplyMulti(self, seqid, iprot, oprot):
    args = maskReplyMulti_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = maskReplyMulti_result()
    try:
      result.success = self._handler.maskReplyMulti(args.replyIds)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("maskReplyMulti", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forbiddenTaxiDriver(self, seqid, iprot, oprot):
    args = forbiddenTaxiDriver_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenTaxiDriver_result()
    try:
      result.success = self._handler.forbiddenTaxiDriver(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenTaxiDriver", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenTaxiDriver(self, seqid, iprot, oprot):
    args = unforbiddenTaxiDriver_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenTaxiDriver_result()
    try:
      result.success = self._handler.unforbiddenTaxiDriver(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.group_id)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenTaxiDriver", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_forbiddenTaxiUser(self, seqid, iprot, oprot):
    args = forbiddenTaxiUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = forbiddenTaxiUser_result()
    try:
      result.success = self._handler.forbiddenTaxiUser(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip, args.days)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("forbiddenTaxiUser", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_unforbiddenTaxiUser(self, seqid, iprot, oprot):
    args = unforbiddenTaxiUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = unforbiddenTaxiUser_result()
    try:
      result.success = self._handler.unforbiddenTaxiUser(args.user_id, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("unforbiddenTaxiUser", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_userOrderSetTag(self, seqid, iprot, oprot):
    args = userOrderSetTag_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = userOrderSetTag_result()
    try:
      result.success = self._handler.userOrderSetTag(args.order_id, args.sys_order_group, args.reason, args.sys_op_id, args.sys_op_ip)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("userOrderSetTag", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createBatch(self, seqid, iprot, oprot):
    args = createBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createBatch_result()
    try:
      result.success = self._handler.createBatch(args.source, args.type, args.awardTime)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("createBatch", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_insertDetail(self, seqid, iprot, oprot):
    args = insertDetail_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = insertDetail_result()
    try:
      result.success = self._handler.insertDetail(args.batchId, args.userId, args.balance, args.allOrderNum, args.actualOrderNum, args.cityId)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("insertDetail", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_closeBatch(self, seqid, iprot, oprot):
    args = closeBatch_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = closeBatch_result()
    try:
      result.success = self._handler.closeBatch(args.batchId)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("closeBatch", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_taxiOrderSetTagAndDebit(self, seqid, iprot, oprot):
    args = taxiOrderSetTagAndDebit_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = taxiOrderSetTagAndDebit_result()
    try:
      result.success = self._handler.taxiOrderSetTagAndDebit(args.taxi_order_id, args.debitContent, args.sys_op_id, args.debitType, args.debitMoney)
      msg_type = TMessageType.REPLY
    except (TTransport.TTransportException, KeyboardInterrupt, SystemExit):
      raise
    except Exception as ex:
      msg_type = TMessageType.EXCEPTION
      logging.exception(ex)
      result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
    oprot.writeMessageBegin("taxiOrderSetTagAndDebit", msg_type, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class forbiddenUser_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenUser_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenUser_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenUser_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenUser_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenUser_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenDriver_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenDriver_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenDriver_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenDriver_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenDriver_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.BYTE, 'group_id', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, group_id=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.group_id = group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.group_id = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenDriver_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.BYTE, 5)
      oprot.writeByte(self.group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenDriver_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenDriver_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenDevice_args:
  """
  Attributes:
   - device_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'device_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, device_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.device_id = device_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.device_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenDevice_args')
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 1)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.device_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenDevice_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DeviceResult, DeviceResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DeviceResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenDevice_args:
  """
  Attributes:
   - device_id
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'device_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
  )

  def __init__(self, device_id=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.device_id = device_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.device_id = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenDevice_args')
    if self.device_id is not None:
      oprot.writeFieldBegin('device_id', TType.STRING, 1)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.device_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenDevice_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (DeviceResult, DeviceResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = DeviceResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenDevice_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenPost_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenPost_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenPost_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenPost_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenPost_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenPost_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenPost_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenPost_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderHold_args:
  """
  Attributes:
   - taxi_order_id
   - holdContent
   - isSend
   - sys_op_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'taxi_order_id', None, None, ), # 1
    (2, TType.STRING, 'holdContent', None, None, ), # 2
    (3, TType.BOOL, 'isSend', None, None, ), # 3
    (4, TType.I64, 'sys_op_id', None, None, ), # 4
  )

  def __init__(self, taxi_order_id=None, holdContent=None, isSend=None, sys_op_id=None,):
    self.taxi_order_id = taxi_order_id
    self.holdContent = holdContent
    self.isSend = isSend
    self.sys_op_id = sys_op_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.taxi_order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.holdContent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isSend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderHold_args')
    if self.taxi_order_id is not None:
      oprot.writeFieldBegin('taxi_order_id', TType.I64, 1)
      oprot.writeI64(self.taxi_order_id)
      oprot.writeFieldEnd()
    if self.holdContent is not None:
      oprot.writeFieldBegin('holdContent', TType.STRING, 2)
      oprot.writeString(self.holdContent)
      oprot.writeFieldEnd()
    if self.isSend is not None:
      oprot.writeFieldBegin('isSend', TType.BOOL, 3)
      oprot.writeBool(self.isSend)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 4)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taxi_order_id)
    value = (value * 31) ^ hash(self.holdContent)
    value = (value * 31) ^ hash(self.isSend)
    value = (value * 31) ^ hash(self.sys_op_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderHold_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderHold_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderCancelHold_args:
  """
  Attributes:
   - taxi_order_id
   - holdContent
   - sys_op_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'taxi_order_id', None, None, ), # 1
    (2, TType.STRING, 'holdContent', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
  )

  def __init__(self, taxi_order_id=None, holdContent=None, sys_op_id=None,):
    self.taxi_order_id = taxi_order_id
    self.holdContent = holdContent
    self.sys_op_id = sys_op_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.taxi_order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.holdContent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderCancelHold_args')
    if self.taxi_order_id is not None:
      oprot.writeFieldBegin('taxi_order_id', TType.I64, 1)
      oprot.writeI64(self.taxi_order_id)
      oprot.writeFieldEnd()
    if self.holdContent is not None:
      oprot.writeFieldBegin('holdContent', TType.STRING, 2)
      oprot.writeString(self.holdContent)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taxi_order_id)
    value = (value * 31) ^ hash(self.holdContent)
    value = (value * 31) ^ hash(self.sys_op_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderCancelHold_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderCancelHold_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class orderHold_args:
  """
  Attributes:
   - order_id
   - holdContent
   - isSend
   - sys_op_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.STRING, 'holdContent', None, None, ), # 2
    (3, TType.BOOL, 'isSend', None, None, ), # 3
    (4, TType.I64, 'sys_op_id', None, None, ), # 4
  )

  def __init__(self, order_id=None, holdContent=None, isSend=None, sys_op_id=None,):
    self.order_id = order_id
    self.holdContent = holdContent
    self.isSend = isSend
    self.sys_op_id = sys_op_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.holdContent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.isSend = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('orderHold_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.holdContent is not None:
      oprot.writeFieldBegin('holdContent', TType.STRING, 2)
      oprot.writeString(self.holdContent)
      oprot.writeFieldEnd()
    if self.isSend is not None:
      oprot.writeFieldBegin('isSend', TType.BOOL, 3)
      oprot.writeBool(self.isSend)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 4)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.holdContent)
    value = (value * 31) ^ hash(self.isSend)
    value = (value * 31) ^ hash(self.sys_op_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class orderHold_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('orderHold_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class orderCancelHold_args:
  """
  Attributes:
   - order_id
   - holdContent
   - sys_op_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.STRING, 'holdContent', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
  )

  def __init__(self, order_id=None, holdContent=None, sys_op_id=None,):
    self.order_id = order_id
    self.holdContent = holdContent
    self.sys_op_id = sys_op_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.holdContent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('orderCancelHold_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.holdContent is not None:
      oprot.writeFieldBegin('holdContent', TType.STRING, 2)
      oprot.writeString(self.holdContent)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.holdContent)
    value = (value * 31) ^ hash(self.sys_op_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class orderCancelHold_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('orderCancelHold_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderSetTag_args:
  """
  Attributes:
   - order_id
   - sys_order_group
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.BYTE, 'sys_order_group', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.I64, 'sys_op_id', None, None, ), # 4
    (5, TType.STRING, 'sys_op_ip', None, None, ), # 5
  )

  def __init__(self, order_id=None, sys_order_group=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.order_id = order_id
    self.sys_order_group = sys_order_group
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.sys_order_group = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderSetTag_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.sys_order_group is not None:
      oprot.writeFieldBegin('sys_order_group', TType.BYTE, 2)
      oprot.writeByte(self.sys_order_group)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 4)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 5)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.sys_order_group)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderSetTag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderSetTag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delReply_args:
  """
  Attributes:
   - replyId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replyId', None, None, ), # 1
  )

  def __init__(self, replyId=None,):
    self.replyId = replyId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replyId = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delReply_args')
    if self.replyId is not None:
      oprot.writeFieldBegin('replyId', TType.STRING, 1)
      oprot.writeString(self.replyId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replyId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delReply_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delReply_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delReplyMulti_args:
  """
  Attributes:
   - replyIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replyIds', None, None, ), # 1
  )

  def __init__(self, replyIds=None,):
    self.replyIds = replyIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replyIds = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delReplyMulti_args')
    if self.replyIds is not None:
      oprot.writeFieldBegin('replyIds', TType.STRING, 1)
      oprot.writeString(self.replyIds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replyIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class delReplyMulti_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('delReplyMulti_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maskReply_args:
  """
  Attributes:
   - replyId
   - mask
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replyId', None, None, ), # 1
    (2, TType.BYTE, 'mask', None, None, ), # 2
  )

  def __init__(self, replyId=None, mask=None,):
    self.replyId = replyId
    self.mask = mask

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replyId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.mask = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maskReply_args')
    if self.replyId is not None:
      oprot.writeFieldBegin('replyId', TType.STRING, 1)
      oprot.writeString(self.replyId)
      oprot.writeFieldEnd()
    if self.mask is not None:
      oprot.writeFieldBegin('mask', TType.BYTE, 2)
      oprot.writeByte(self.mask)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replyId)
    value = (value * 31) ^ hash(self.mask)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maskReply_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maskReply_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maskReplyMulti_args:
  """
  Attributes:
   - replyIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'replyIds', None, None, ), # 1
  )

  def __init__(self, replyIds=None,):
    self.replyIds = replyIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.replyIds = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maskReplyMulti_args')
    if self.replyIds is not None:
      oprot.writeFieldBegin('replyIds', TType.STRING, 1)
      oprot.writeString(self.replyIds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.replyIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class maskReplyMulti_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('maskReplyMulti_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenTaxiDriver_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenTaxiDriver_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenTaxiDriver_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenTaxiDriver_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenTaxiDriver_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - group_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.BYTE, 'group_id', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, group_id=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.group_id = group_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BYTE:
          self.group_id = iprot.readByte()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenTaxiDriver_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.group_id is not None:
      oprot.writeFieldBegin('group_id', TType.BYTE, 5)
      oprot.writeByte(self.group_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.group_id)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenTaxiDriver_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenTaxiDriver_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenTaxiUser_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
   - days
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
    (5, TType.I32, 'days', None, None, ), # 5
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None, days=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip
    self.days = days

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.days = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenTaxiUser_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    if self.days is not None:
      oprot.writeFieldBegin('days', TType.I32, 5)
      oprot.writeI32(self.days)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    value = (value * 31) ^ hash(self.days)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class forbiddenTaxiUser_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('forbiddenTaxiUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenTaxiUser_args:
  """
  Attributes:
   - user_id
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'reason', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.STRING, 'sys_op_ip', None, None, ), # 4
  )

  def __init__(self, user_id=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.user_id = user_id
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenTaxiUser_args')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 2)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 4)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class unforbiddenTaxiUser_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('unforbiddenTaxiUser_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class userOrderSetTag_args:
  """
  Attributes:
   - order_id
   - sys_order_group
   - reason
   - sys_op_id
   - sys_op_ip
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'order_id', None, None, ), # 1
    (2, TType.BYTE, 'sys_order_group', None, None, ), # 2
    (3, TType.STRING, 'reason', None, None, ), # 3
    (4, TType.I64, 'sys_op_id', None, None, ), # 4
    (5, TType.STRING, 'sys_op_ip', None, None, ), # 5
  )

  def __init__(self, order_id=None, sys_order_group=None, reason=None, sys_op_id=None, sys_op_ip=None,):
    self.order_id = order_id
    self.sys_order_group = sys_order_group
    self.reason = reason
    self.sys_op_id = sys_op_id
    self.sys_op_ip = sys_op_ip

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.sys_order_group = iprot.readByte()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.reason = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sys_op_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('userOrderSetTag_args')
    if self.order_id is not None:
      oprot.writeFieldBegin('order_id', TType.I64, 1)
      oprot.writeI64(self.order_id)
      oprot.writeFieldEnd()
    if self.sys_order_group is not None:
      oprot.writeFieldBegin('sys_order_group', TType.BYTE, 2)
      oprot.writeByte(self.sys_order_group)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 3)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 4)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.sys_op_ip is not None:
      oprot.writeFieldBegin('sys_op_ip', TType.STRING, 5)
      oprot.writeString(self.sys_op_ip)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.order_id)
    value = (value * 31) ^ hash(self.sys_order_group)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.sys_op_ip)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class userOrderSetTag_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('userOrderSetTag_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createBatch_args:
  """
  Attributes:
   - source
   - type
   - awardTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'source', None, None, ), # 1
    (2, TType.STRING, 'type', None, None, ), # 2
    (3, TType.STRING, 'awardTime', None, None, ), # 3
  )

  def __init__(self, source=None, type=None, awardTime=None,):
    self.source = source
    self.type = type
    self.awardTime = awardTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.source = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.type = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.awardTime = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createBatch_args')
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.STRING, 1)
      oprot.writeString(self.source)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.STRING, 2)
      oprot.writeString(self.type)
      oprot.writeFieldEnd()
    if self.awardTime is not None:
      oprot.writeFieldBegin('awardTime', TType.STRING, 3)
      oprot.writeString(self.awardTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.awardTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createBatch_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (BatchResult, BatchResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = BatchResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createBatch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertDetail_args:
  """
  Attributes:
   - batchId
   - userId
   - balance
   - allOrderNum
   - actualOrderNum
   - cityId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'batchId', None, None, ), # 1
    (2, TType.STRING, 'userId', None, None, ), # 2
    (3, TType.STRING, 'balance', None, None, ), # 3
    (4, TType.STRING, 'allOrderNum', None, None, ), # 4
    (5, TType.STRING, 'actualOrderNum', None, None, ), # 5
    (6, TType.STRING, 'cityId', None, None, ), # 6
  )

  def __init__(self, batchId=None, userId=None, balance=None, allOrderNum=None, actualOrderNum=None, cityId=None,):
    self.batchId = batchId
    self.userId = userId
    self.balance = balance
    self.allOrderNum = allOrderNum
    self.actualOrderNum = actualOrderNum
    self.cityId = cityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.batchId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.balance = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.allOrderNum = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.actualOrderNum = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.cityId = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertDetail_args')
    if self.batchId is not None:
      oprot.writeFieldBegin('batchId', TType.STRING, 1)
      oprot.writeString(self.batchId)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.STRING, 2)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.STRING, 3)
      oprot.writeString(self.balance)
      oprot.writeFieldEnd()
    if self.allOrderNum is not None:
      oprot.writeFieldBegin('allOrderNum', TType.STRING, 4)
      oprot.writeString(self.allOrderNum)
      oprot.writeFieldEnd()
    if self.actualOrderNum is not None:
      oprot.writeFieldBegin('actualOrderNum', TType.STRING, 5)
      oprot.writeString(self.actualOrderNum)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.STRING, 6)
      oprot.writeString(self.cityId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.batchId)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.balance)
    value = (value * 31) ^ hash(self.allOrderNum)
    value = (value * 31) ^ hash(self.actualOrderNum)
    value = (value * 31) ^ hash(self.cityId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class insertDetail_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (BatchResult, BatchResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = BatchResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('insertDetail_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class closeBatch_args:
  """
  Attributes:
   - batchId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'batchId', None, None, ), # 1
  )

  def __init__(self, batchId=None,):
    self.batchId = batchId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.batchId = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('closeBatch_args')
    if self.batchId is not None:
      oprot.writeFieldBegin('batchId', TType.STRING, 1)
      oprot.writeString(self.batchId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.batchId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class closeBatch_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (BatchResult, BatchResult.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = BatchResult()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('closeBatch_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderSetTagAndDebit_args:
  """
  Attributes:
   - taxi_order_id
   - debitContent
   - sys_op_id
   - debitType
   - debitMoney
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'taxi_order_id', None, None, ), # 1
    (2, TType.STRING, 'debitContent', None, None, ), # 2
    (3, TType.I64, 'sys_op_id', None, None, ), # 3
    (4, TType.I32, 'debitType', None, None, ), # 4
    (5, TType.STRING, 'debitMoney', None, None, ), # 5
  )

  def __init__(self, taxi_order_id=None, debitContent=None, sys_op_id=None, debitType=None, debitMoney=None,):
    self.taxi_order_id = taxi_order_id
    self.debitContent = debitContent
    self.sys_op_id = sys_op_id
    self.debitType = debitType
    self.debitMoney = debitMoney

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.taxi_order_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.debitContent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.sys_op_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.debitType = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.debitMoney = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderSetTagAndDebit_args')
    if self.taxi_order_id is not None:
      oprot.writeFieldBegin('taxi_order_id', TType.I64, 1)
      oprot.writeI64(self.taxi_order_id)
      oprot.writeFieldEnd()
    if self.debitContent is not None:
      oprot.writeFieldBegin('debitContent', TType.STRING, 2)
      oprot.writeString(self.debitContent)
      oprot.writeFieldEnd()
    if self.sys_op_id is not None:
      oprot.writeFieldBegin('sys_op_id', TType.I64, 3)
      oprot.writeI64(self.sys_op_id)
      oprot.writeFieldEnd()
    if self.debitType is not None:
      oprot.writeFieldBegin('debitType', TType.I32, 4)
      oprot.writeI32(self.debitType)
      oprot.writeFieldEnd()
    if self.debitMoney is not None:
      oprot.writeFieldBegin('debitMoney', TType.STRING, 5)
      oprot.writeString(self.debitMoney)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taxi_order_id)
    value = (value * 31) ^ hash(self.debitContent)
    value = (value * 31) ^ hash(self.sys_op_id)
    value = (value * 31) ^ hash(self.debitType)
    value = (value * 31) ^ hash(self.debitMoney)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class taxiOrderSetTagAndDebit_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (Result, Result.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = Result()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('taxiOrderSetTagAndDebit_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
