# DO NOT EDIT! This file is automatically generated

import re

import marshmallow
import marshmallow_enum

from commercetools import helpers, types


class LocalizedStringField(marshmallow.fields.Dict):
    def _deserialize(self, value, attr, data):
        result = super()._deserialize(value, attr, data)
        return types.LocalizedString(**result)


class CategoryOrderHintsField(marshmallow.fields.Dict):
    def _deserialize(self, value, attr, data):
        result = super()._deserialize(value, attr, data)
        return types.CategoryOrderHints(**result)


class FieldContainerField(marshmallow.fields.Dict):
    def _deserialize(self, value, attr, data):
        result = super()._deserialize(value, attr, data)
        return types.FieldContainer(**result)


class AddressSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    title = marshmallow.fields.String(allow_none=True, missing=None)
    salutation = marshmallow.fields.String(allow_none=True, missing=None)
    first_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lastName"
    )
    street_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="streetName"
    )
    street_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="streetNumber"
    )
    additional_street_info = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="additionalStreetInfo"
    )
    postal_code = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="postalCode"
    )
    city = marshmallow.fields.String(allow_none=True, missing=None)
    region = marshmallow.fields.String(allow_none=True, missing=None)
    state = marshmallow.fields.String(allow_none=True, missing=None)
    country = marshmallow.fields.String()
    company = marshmallow.fields.String(allow_none=True, missing=None)
    department = marshmallow.fields.String(allow_none=True, missing=None)
    building = marshmallow.fields.String(allow_none=True, missing=None)
    apartment = marshmallow.fields.String(allow_none=True, missing=None)
    p_o_box = marshmallow.fields.String(allow_none=True, missing=None, data_key="pOBox")
    phone = marshmallow.fields.String(allow_none=True, missing=None)
    mobile = marshmallow.fields.String(allow_none=True, missing=None)
    email = marshmallow.fields.String(allow_none=True, missing=None)
    fax = marshmallow.fields.String(allow_none=True, missing=None)
    additional_address_info = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="additionalAddressInfo"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Address(**data)


class AssetDimensionsSchema(marshmallow.Schema):
    w = marshmallow.fields.Integer(allow_none=True)
    h = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AssetDimensions(**data)


class AssetDraftSchema(marshmallow.Schema):
    sources = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSourceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    tags = marshmallow.fields.String(allow_none=True, many=True, missing=None)
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AssetDraft(**data)


class AssetSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    sources = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSourceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    tags = marshmallow.fields.String(allow_none=True, many=True, missing=None)
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Asset(**data)


class AssetSourceSchema(marshmallow.Schema):
    uri = marshmallow.fields.String(allow_none=True)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    dimensions = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetDimensionsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    content_type = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="contentType"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AssetSource(**data)


class AttributeDefinitionDraftSchema(marshmallow.Schema):
    type = helpers.Discriminator(
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "boolean": "commercetools.schemas.AttributeBooleanTypeSchema",
            "datetime": "commercetools.schemas.AttributeDateTimeTypeSchema",
            "date": "commercetools.schemas.AttributeDateTypeSchema",
            "enum": "commercetools.schemas.AttributeEnumTypeSchema",
            "ltext": "commercetools.schemas.AttributeLocalizableTextTypeSchema",
            "lenum": "commercetools.schemas.AttributeLocalizedEnumTypeSchema",
            "money": "commercetools.schemas.AttributeMoneyTypeSchema",
            "nested": "commercetools.schemas.AttributeNestedTypeSchema",
            "number": "commercetools.schemas.AttributeNumberTypeSchema",
            "reference": "commercetools.schemas.AttributeReferenceTypeSchema",
            "set": "commercetools.schemas.AttributeSetTypeSchema",
            "text": "commercetools.schemas.AttributeTextTypeSchema",
            "time": "commercetools.schemas.AttributeTimeTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    name = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)
    is_required = marshmallow.fields.Bool(allow_none=True, data_key="isRequired")
    attribute_constraint = marshmallow_enum.EnumField(
        types.AttributeConstraintEnum,
        by_value=True,
        missing=None,
        data_key="attributeConstraint",
    )
    input_tip = LocalizedStringField(allow_none=True, missing=None, data_key="inputTip")
    input_hint = marshmallow_enum.EnumField(
        types.TextInputHint, by_value=True, missing=None, data_key="inputHint"
    )
    is_searchable = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isSearchable"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AttributeDefinitionDraft(**data)


class AttributeDefinitionSchema(marshmallow.Schema):
    type = helpers.Discriminator(
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "boolean": "commercetools.schemas.AttributeBooleanTypeSchema",
            "datetime": "commercetools.schemas.AttributeDateTimeTypeSchema",
            "date": "commercetools.schemas.AttributeDateTypeSchema",
            "enum": "commercetools.schemas.AttributeEnumTypeSchema",
            "ltext": "commercetools.schemas.AttributeLocalizableTextTypeSchema",
            "lenum": "commercetools.schemas.AttributeLocalizedEnumTypeSchema",
            "money": "commercetools.schemas.AttributeMoneyTypeSchema",
            "nested": "commercetools.schemas.AttributeNestedTypeSchema",
            "number": "commercetools.schemas.AttributeNumberTypeSchema",
            "reference": "commercetools.schemas.AttributeReferenceTypeSchema",
            "set": "commercetools.schemas.AttributeSetTypeSchema",
            "text": "commercetools.schemas.AttributeTextTypeSchema",
            "time": "commercetools.schemas.AttributeTimeTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    name = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)
    is_required = marshmallow.fields.Bool(allow_none=True, data_key="isRequired")
    attribute_constraint = marshmallow_enum.EnumField(
        types.AttributeConstraintEnum, by_value=True, data_key="attributeConstraint"
    )
    input_tip = LocalizedStringField(allow_none=True, missing=None, data_key="inputTip")
    input_hint = marshmallow_enum.EnumField(
        types.TextInputHint, by_value=True, data_key="inputHint"
    )
    is_searchable = marshmallow.fields.Bool(allow_none=True, data_key="isSearchable")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AttributeDefinition(**data)


class AttributeLocalizedEnumValueSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AttributeLocalizedEnumValue(**data)


class AttributePlainEnumValueSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    label = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.AttributePlainEnumValue(**data)


class AttributeSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Attribute(**data)


class AttributeTypeSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeType(**data)


class CartDiscountDraftSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.CartDiscountValueAbsoluteSchema",
            "giftLineItem": "commercetools.schemas.CartDiscountValueGiftLineItemSchema",
            "relative": "commercetools.schemas.CartDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    cart_predicate = marshmallow.fields.String(
        allow_none=True, data_key="cartPredicate"
    )
    target = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "customLineItems": "commercetools.schemas.CartDiscountCustomLineItemsTargetSchema",
            "lineItems": "commercetools.schemas.CartDiscountLineItemsTargetSchema",
            "shipping": "commercetools.schemas.CartDiscountShippingCostTargetSchema",
            "multiBuyCustomLineItems": "commercetools.schemas.MultiBuyCustomLineItemsTargetSchema",
            "multiBuyLineItems": "commercetools.schemas.MultiBuyLineItemsTargetSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")
    is_active = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isActive"
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )
    requires_discount_code = marshmallow.fields.Bool(
        allow_none=True, data_key="requiresDiscountCode"
    )
    stacking_mode = marshmallow_enum.EnumField(
        types.StackingMode, by_value=True, missing=None, data_key="stackingMode"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDiscountDraft(**data)


class CartDiscountTargetSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountTarget(**data)


class CartDiscountValueSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountValue(**data)


class CartDraftSchema(marshmallow.Schema):
    currency = marshmallow.fields.String()
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, missing=None, data_key="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode"
    )
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode,
        by_value=True,
        missing=None,
        data_key="taxCalculationMode",
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.LineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="customLineItems",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    external_tax_rate_for_shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRateForShippingMethod",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True, missing=None)
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas.ClassificationShippingRateInputDraftSchema",
            "Score": "commercetools.schemas.ScoreShippingRateInputDraftSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDraft(**data)


class CategoryDraftSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True)
    slug = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    parent = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    order_hint = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderHint"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    assets = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CategoryDraft(**data)


class ChangeSubscriptionSchema(marshmallow.Schema):
    resource_type_id = marshmallow.fields.String(
        allow_none=True, data_key="resourceTypeId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ChangeSubscription(**data)


class ChannelDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ChannelRoleEnum, by_value=True), missing=None
    )
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    geo_location = marshmallow.fields.Nested(
        nested="commercetools.schemas.GeoJsonPointSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="geoLocation",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ChannelDraft(**data)


class CustomFieldEnumValueSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    label = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomFieldEnumValue(**data)


class CustomFieldLocalizedEnumValueSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomFieldLocalizedEnumValue(**data)


class CustomFieldsDraftSchema(marshmallow.Schema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomFieldsDraft(**data)


class CustomFieldsSchema(marshmallow.Schema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    fields = FieldContainerField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomFields(**data)


class CustomLineItemDraftSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    slug = marshmallow.fields.String(allow_none=True)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomLineItemDraft(**data)


class CustomLineItemSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    money = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    total_price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    slug = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    discounted_price_per_quantity = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPriceForQuantitySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="discountedPricePerQuantity",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomLineItem(**data)


class CustomObjectDraftSchema(marshmallow.Schema):
    container = marshmallow.fields.String(allow_none=True)
    key = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomObjectDraft(**data)


class CustomerChangePasswordSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)
    current_password = marshmallow.fields.String(
        allow_none=True, data_key="currentPassword"
    )
    new_password = marshmallow.fields.String(allow_none=True, data_key="newPassword")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerChangePassword(**data)


class CustomerCreateEmailTokenSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True, missing=None)
    ttl_minutes = marshmallow.fields.Integer(allow_none=True, data_key="ttlMinutes")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerCreateEmailToken(**data)


class CustomerCreatePasswordResetTokenSchema(marshmallow.Schema):
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerCreatePasswordResetToken(**data)


class CustomerDraftSchema(marshmallow.Schema):
    customer_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerNumber"
    )
    email = marshmallow.fields.String(allow_none=True)
    password = marshmallow.fields.String(allow_none=True)
    first_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lastName"
    )
    middle_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="middleName"
    )
    title = marshmallow.fields.String(allow_none=True, missing=None)
    anonymous_cart_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousCartId"
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    date_of_birth = marshmallow.fields.Date(
        allow_none=True, missing=None, data_key="dateOfBirth"
    )
    company_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="companyName"
    )
    vat_id = marshmallow.fields.String(allow_none=True, missing=None, data_key="vatId")
    addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    default_shipping_address = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="defaultShippingAddress"
    )
    shipping_addresses = marshmallow.fields.Integer(
        allow_none=True, many=True, missing=None, data_key="shippingAddresses"
    )
    default_billing_address = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="defaultBillingAddress"
    )
    billing_addresses = marshmallow.fields.Integer(
        allow_none=True, many=True, missing=None, data_key="billingAddresses"
    )
    is_email_verified = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isEmailVerified"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    salutation = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerDraft(**data)


class CustomerEmailVerifySchema(marshmallow.Schema):
    version = marshmallow.fields.Integer(allow_none=True, missing=None)
    token_value = marshmallow.fields.String(allow_none=True, data_key="tokenValue")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerEmailVerify(**data)


class CustomerGroupDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    group_name = marshmallow.fields.String(allow_none=True, data_key="groupName")
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerGroupDraft(**data)


class CustomerResetPasswordSchema(marshmallow.Schema):
    token_value = marshmallow.fields.String(allow_none=True, data_key="tokenValue")
    new_password = marshmallow.fields.String(allow_none=True, data_key="newPassword")
    version = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerResetPassword(**data)


class CustomerSignInResultSchema(marshmallow.Schema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    cart = marshmallow.fields.Dict(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerSignInResult(**data)


class CustomerSigninSchema(marshmallow.Schema):
    email = marshmallow.fields.String(allow_none=True)
    password = marshmallow.fields.String(allow_none=True)
    anonymous_cart_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousCartId"
    )
    anonymous_cart_sign_in_mode = marshmallow_enum.EnumField(
        types.AnonymousCartSignInMode,
        by_value=True,
        missing=None,
        data_key="anonymousCartSignInMode",
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerSignin(**data)


class CustomerTokenSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="lastModifiedAt"
    )
    customer_id = marshmallow.fields.String(allow_none=True, data_key="customerId")
    expires_at = marshmallow.fields.DateTime(allow_none=True, data_key="expiresAt")
    value = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerToken(**data)


class DeliveryItemSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DeliveryItem(**data)


class DeliverySchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    parcels = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Delivery(**data)


class DestinationSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.Destination(**data)


class DiscountCodeDraftSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    code = marshmallow.fields.String(allow_none=True)
    cart_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="cartDiscounts",
    )
    cart_predicate = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="cartPredicate"
    )
    is_active = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isActive"
    )
    max_applications = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplications"
    )
    max_applications_per_customer = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplicationsPerCustomer"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    groups = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.stringSchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        missing=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCodeDraft(**data)


class DiscountCodeInfoSchema(marshmallow.Schema):
    discount_code = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountCode",
    )
    state = marshmallow_enum.EnumField(types.DiscountCodeState, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCodeInfo(**data)


class DiscountedLineItemPortionSchema(marshmallow.Schema):
    discount = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    discounted_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountedAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPortion(**data)


class DiscountedLineItemPriceDraftSchema(marshmallow.Schema):
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    included_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="includedDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPriceDraft(**data)


class DiscountedLineItemPriceForQuantitySchema(marshmallow.Schema):
    quantity = marshmallow.fields.Integer(allow_none=True)
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPriceForQuantity(**data)


class DiscountedLineItemPriceSchema(marshmallow.Schema):
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    included_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="includedDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedLineItemPrice(**data)


class DiscountedPriceSchema(marshmallow.Schema):
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    discount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountedPrice(**data)


class ErrorObjectSchema(marshmallow.Schema):
    code = marshmallow.fields.String(allow_none=True)
    message = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.ErrorObject(**data)


class ErrorResponseSchema(marshmallow.Schema):
    status_code = marshmallow.fields.Integer(allow_none=True, data_key="statusCode")
    message = marshmallow.fields.String(allow_none=True)
    error = marshmallow.fields.String(allow_none=True, missing=None)
    error_description = marshmallow.fields.String(allow_none=True, missing=None)
    errors = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("code", "code"),
            discriminator_schemas={
                "access_denied": "commercetools.schemas.AccessDeniedErrorSchema",
                "ConcurrentModification": "commercetools.schemas.ConcurrentModificationErrorSchema",
                "DiscountCodeNonApplicable": "commercetools.schemas.DiscountCodeNonApplicableErrorSchema",
                "DuplicateAttributeValue": "commercetools.schemas.DuplicateAttributeValueErrorSchema",
                "DuplicateAttributeValues": "commercetools.schemas.DuplicateAttributeValuesErrorSchema",
                "DuplicateField": "commercetools.schemas.DuplicateFieldErrorSchema",
                "DuplicatePriceScope": "commercetools.schemas.DuplicatePriceScopeErrorSchema",
                "DuplicateVariantValues": "commercetools.schemas.DuplicateVariantValuesErrorSchema",
                "insufficient_scope": "commercetools.schemas.InsufficientScopeErrorSchema",
                "InvalidCredentials": "commercetools.schemas.InvalidCredentialsErrorSchema",
                "InvalidCurrentPassword": "commercetools.schemas.InvalidCurrentPasswordErrorSchema",
                "InvalidField": "commercetools.schemas.InvalidFieldErrorSchema",
                "InvalidInput": "commercetools.schemas.InvalidInputErrorSchema",
                "InvalidItemShippingDetails": "commercetools.schemas.InvalidItemShippingDetailsErrorSchema",
                "InvalidOperation": "commercetools.schemas.InvalidOperationErrorSchema",
                "InvalidSubject": "commercetools.schemas.InvalidSubjectErrorSchema",
                "invalid_token": "commercetools.schemas.InvalidTokenErrorSchema",
                "OutOfStock": "commercetools.schemas.OutOfStockErrorSchema",
                "PriceChanged": "commercetools.schemas.PriceChangedErrorSchema",
                "RequiredField": "commercetools.schemas.RequiredFieldErrorSchema",
                "ResourceNotFound": "commercetools.schemas.ResourceNotFoundErrorSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ErrorResponse(**data)


class ExtensionDestinationSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionDestination(**data)


class ExtensionDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "AWSLambda": "commercetools.schemas.ExtensionAWSLambdaDestinationSchema",
            "HTTP": "commercetools.schemas.ExtensionHttpDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    triggers = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExtensionTriggerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExtensionDraft(**data)


class ExtensionHttpDestinationAuthenticationSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionHttpDestinationAuthentication(**data)


class ExtensionInputSchema(marshmallow.Schema):
    action = marshmallow_enum.EnumField(types.ExtensionAction, by_value=True)
    resource = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExtensionInput(**data)


class ExtensionTriggerSchema(marshmallow.Schema):
    resource_type_id = marshmallow_enum.EnumField(
        types.ExtensionResourceTypeId, by_value=True, data_key="resourceTypeId"
    )
    actions = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ExtensionAction, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExtensionTrigger(**data)


class ExternalLineItemTotalPriceSchema(marshmallow.Schema):
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalLineItemTotalPrice(**data)


class ExternalTaxAmountDraftSchema(marshmallow.Schema):
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalTaxAmountDraft(**data)


class ExternalTaxRateDraftSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    amount = marshmallow.fields.Integer(allow_none=True, missing=None)
    country = marshmallow.fields.String(allow_none=True)
    state = marshmallow.fields.String(allow_none=True, missing=None)
    sub_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.SubRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="subRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExternalTaxRateDraft(**data)


class FacetResultRangeSchema(marshmallow.Schema):
    from_ = marshmallow.fields.Integer(allow_none=True, data_key="from")
    from_str = marshmallow.fields.String(allow_none=True, data_key="fromStr")
    to = marshmallow.fields.Integer(allow_none=True)
    to_str = marshmallow.fields.String(allow_none=True, data_key="toStr")
    count = marshmallow.fields.Integer(allow_none=True)
    product_count = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="productCount"
    )
    total = marshmallow.fields.Integer(allow_none=True)
    min = marshmallow.fields.Integer(allow_none=True)
    max = marshmallow.fields.Integer(allow_none=True)
    mean = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.FacetResultRange(**data)


class FacetResultSchema(marshmallow.Schema):
    type = marshmallow_enum.EnumField(types.FacetTypes, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.FacetResult(**data)


class FacetResultTermSchema(marshmallow.Schema):
    term = marshmallow.fields.Raw(allow_none=True)
    count = marshmallow.fields.Integer(allow_none=True)
    product_count = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="productCount"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.FacetResultTerm(**data)


class FacetResultsSchema(marshmallow.Schema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        pattern=re.compile("^[a-z].*$"),
        type=helpers.Discriminator(
            discriminator_field=("type", "type"),
            discriminator_schemas={
                "filter": "commercetools.schemas.FilteredFacetResultSchema",
                "range": "commercetools.schemas.RangeFacetResultSchema",
                "terms": "commercetools.schemas.TermFacetResultSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        data = self.fields["_regex"].postprocess(data)
        return types.FacetResults(**data)

    @marshmallow.pre_load
    def pre_load(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.pre_dump
    def pre_dump(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.post_dump
    def post_dump(self, data):
        data = self.fields["_regex"].postprocess(data)
        return data


class FieldDefinitionSchema(marshmallow.Schema):
    type = marshmallow.fields.Dict(allow_none=True)
    name = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)
    required = marshmallow.fields.Bool(allow_none=True)
    input_hint = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="inputHint"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.FieldDefinition(**data)


class FieldTypeSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.FieldType(**data)


class GeoJsonSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)
    coordinates = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.GeoJson(**data)


class ImageDimensionsSchema(marshmallow.Schema):
    w = marshmallow.fields.Integer(allow_none=True)
    h = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ImageDimensions(**data)


class ImageSchema(marshmallow.Schema):
    url = marshmallow.fields.String(allow_none=True)
    dimensions = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageDimensionsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    label = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Image(**data)


class InventoryEntryDraftSchema(marshmallow.Schema):
    sku = marshmallow.fields.String(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, data_key="quantityOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays"
    )
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryEntryDraft(**data)


class ItemShippingDetailsDraftSchema(marshmallow.Schema):
    targets = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingDetailsDraft(**data)


class ItemShippingDetailsSchema(marshmallow.Schema):
    targets = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    valid = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingDetails(**data)


class ItemShippingTargetSchema(marshmallow.Schema):
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey")
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemShippingTarget(**data)


class ItemStateSchema(marshmallow.Schema):
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ItemState(**data)


class LineItemDraftSchema(marshmallow.Schema):
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItemDraft(**data)


class LineItemImportDraftSchema(marshmallow.Schema):
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    name = LocalizedStringField(allow_none=True)
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantImportDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItemImportDraft(**data)


class LineItemSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    product_id = marshmallow.fields.String(allow_none=True, data_key="productId")
    name = LocalizedStringField(allow_none=True)
    product_slug = LocalizedStringField(
        allow_none=True, missing=None, data_key="productSlug"
    )
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productType",
    )
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )
    discounted_price_per_quantity = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPriceForQuantitySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="discountedPricePerQuantity",
    )
    price_mode = marshmallow_enum.EnumField(
        types.LineItemPriceMode, by_value=True, data_key="priceMode"
    )
    line_item_mode = marshmallow_enum.EnumField(
        types.LineItemMode, by_value=True, data_key="lineItemMode"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.LineItem(**data)


class LocationSchema(marshmallow.Schema):
    country = marshmallow.fields.String()
    state = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Location(**data)


class MessageConfigurationSchema(marshmallow.Schema):
    enabled = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MessageConfiguration(**data)


class MessagePayloadSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.MessagePayload(**data)


class MessageSubscriptionSchema(marshmallow.Schema):
    resource_type_id = marshmallow.fields.String(
        allow_none=True, data_key="resourceTypeId"
    )
    types = marshmallow.fields.String(allow_none=True, many=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MessageSubscription(**data)


class MoneySchema(marshmallow.Schema):
    cent_amount = marshmallow.fields.Integer(allow_none=True, data_key="centAmount")
    currency_code = marshmallow.fields.String(data_key="currencyCode")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Money(**data)


class MyCartDraftSchema(marshmallow.Schema):
    currency = marshmallow.fields.String()
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.MyLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, missing=None, data_key="taxMode"
    )
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MyCartDraft(**data)


class MyCustomerDraftSchema(marshmallow.Schema):
    email = marshmallow.fields.String(allow_none=True)
    password = marshmallow.fields.String(allow_none=True)
    first_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lastName"
    )
    middle_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="middleName"
    )
    title = marshmallow.fields.String(allow_none=True, missing=None)
    date_of_birth = marshmallow.fields.Date(
        allow_none=True, missing=None, data_key="dateOfBirth"
    )
    company_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="companyName"
    )
    vat_id = marshmallow.fields.String(allow_none=True, missing=None, data_key="vatId")
    addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    default_shipping_address = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="defaultShippingAddress"
    )
    default_billing_address = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="defaultBillingAddress"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MyCustomerDraft(**data)


class MyLineItemDraftSchema(marshmallow.Schema):
    product_id = marshmallow.fields.String(allow_none=True, data_key="productId")
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MyLineItemDraft(**data)


class MyOrderFromCartDraftSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MyOrderFromCartDraft(**data)


class OrderEditApplySchema(marshmallow.Schema):
    edit_version = marshmallow.fields.Integer(allow_none=True, data_key="editVersion")
    resource_version = marshmallow.fields.Integer(
        allow_none=True, data_key="resourceVersion"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderEditApply(**data)


class OrderEditDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    resource = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged_actions = helpers.Discriminator(
        discriminator_field=("action", "action"),
        discriminator_schemas={
            "addCustomLineItem": "commercetools.schemas.StagedOrderAddCustomLineItemActionSchema",
            "addDelivery": "commercetools.schemas.StagedOrderAddDeliveryActionSchema",
            "addDiscountCode": "commercetools.schemas.StagedOrderAddDiscountCodeActionSchema",
            "addItemShippingAddress": "commercetools.schemas.StagedOrderAddItemShippingAddressActionSchema",
            "addLineItem": "commercetools.schemas.StagedOrderAddLineItemActionSchema",
            "addParcelToDelivery": "commercetools.schemas.StagedOrderAddParcelToDeliveryActionSchema",
            "addPayment": "commercetools.schemas.StagedOrderAddPaymentActionSchema",
            "addReturnInfo": "commercetools.schemas.StagedOrderAddReturnInfoActionSchema",
            "addShoppingList": "commercetools.schemas.StagedOrderAddShoppingListActionSchema",
            "changeCustomLineItemMoney": "commercetools.schemas.StagedOrderChangeCustomLineItemMoneyActionSchema",
            "changeCustomLineItemQuantity": "commercetools.schemas.StagedOrderChangeCustomLineItemQuantityActionSchema",
            "changeLineItemQuantity": "commercetools.schemas.StagedOrderChangeLineItemQuantityActionSchema",
            "changeOrderState": "commercetools.schemas.StagedOrderChangeOrderStateActionSchema",
            "changePaymentState": "commercetools.schemas.StagedOrderChangePaymentStateActionSchema",
            "changeShipmentState": "commercetools.schemas.StagedOrderChangeShipmentStateActionSchema",
            "changeTaxCalculationMode": "commercetools.schemas.StagedOrderChangeTaxCalculationModeActionSchema",
            "changeTaxMode": "commercetools.schemas.StagedOrderChangeTaxModeActionSchema",
            "changeTaxRoundingMode": "commercetools.schemas.StagedOrderChangeTaxRoundingModeActionSchema",
            "importCustomLineItemState": "commercetools.schemas.StagedOrderImportCustomLineItemStateActionSchema",
            "importLineItemState": "commercetools.schemas.StagedOrderImportLineItemStateActionSchema",
            "removeCustomLineItem": "commercetools.schemas.StagedOrderRemoveCustomLineItemActionSchema",
            "removeDelivery": "commercetools.schemas.StagedOrderRemoveDeliveryActionSchema",
            "removeDiscountCode": "commercetools.schemas.StagedOrderRemoveDiscountCodeActionSchema",
            "removeItemShippingAddress": "commercetools.schemas.StagedOrderRemoveItemShippingAddressActionSchema",
            "removeLineItem": "commercetools.schemas.StagedOrderRemoveLineItemActionSchema",
            "removeParcelFromDelivery": "commercetools.schemas.StagedOrderRemoveParcelFromDeliveryActionSchema",
            "removePayment": "commercetools.schemas.StagedOrderRemovePaymentActionSchema",
            "setBillingAddress": "commercetools.schemas.StagedOrderSetBillingAddressActionSchema",
            "setCountry": "commercetools.schemas.StagedOrderSetCountryActionSchema",
            "setCustomField": "commercetools.schemas.StagedOrderSetCustomFieldActionSchema",
            "setCustomLineItemCustomField": "commercetools.schemas.StagedOrderSetCustomLineItemCustomFieldActionSchema",
            "setCustomLineItemCustomType": "commercetools.schemas.StagedOrderSetCustomLineItemCustomTypeActionSchema",
            "setCustomLineItemShippingDetails": "commercetools.schemas.StagedOrderSetCustomLineItemShippingDetailsActionSchema",
            "setCustomLineItemTaxAmount": "commercetools.schemas.StagedOrderSetCustomLineItemTaxAmountActionSchema",
            "setCustomLineItemTaxRate": "commercetools.schemas.StagedOrderSetCustomLineItemTaxRateActionSchema",
            "setCustomShippingMethod": "commercetools.schemas.StagedOrderSetCustomShippingMethodActionSchema",
            "setCustomType": "commercetools.schemas.StagedOrderSetCustomTypeActionSchema",
            "setCustomerEmail": "commercetools.schemas.StagedOrderSetCustomerEmailActionSchema",
            "setCustomerGroup": "commercetools.schemas.StagedOrderSetCustomerGroupActionSchema",
            "setCustomerId": "commercetools.schemas.StagedOrderSetCustomerIdActionSchema",
            "setDeliveryAddress": "commercetools.schemas.StagedOrderSetDeliveryAddressActionSchema",
            "setDeliveryItems": "commercetools.schemas.StagedOrderSetDeliveryItemsActionSchema",
            "setLineItemCustomField": "commercetools.schemas.StagedOrderSetLineItemCustomFieldActionSchema",
            "setLineItemCustomType": "commercetools.schemas.StagedOrderSetLineItemCustomTypeActionSchema",
            "setLineItemPrice": "commercetools.schemas.StagedOrderSetLineItemPriceActionSchema",
            "setLineItemShippingDetails": "commercetools.schemas.StagedOrderSetLineItemShippingDetailsActionSchema",
            "setLineItemTaxAmount": "commercetools.schemas.StagedOrderSetLineItemTaxAmountActionSchema",
            "setLineItemTaxRate": "commercetools.schemas.StagedOrderSetLineItemTaxRateActionSchema",
            "setLineItemTotalPrice": "commercetools.schemas.StagedOrderSetLineItemTotalPriceActionSchema",
            "setLocale": "commercetools.schemas.StagedOrderSetLocaleActionSchema",
            "setOrderNumber": "commercetools.schemas.StagedOrderSetOrderNumberActionSchema",
            "setOrderTotalTax": "commercetools.schemas.StagedOrderSetOrderTotalTaxActionSchema",
            "setParcelItems": "commercetools.schemas.StagedOrderSetParcelItemsActionSchema",
            "setParcelMeasurements": "commercetools.schemas.StagedOrderSetParcelMeasurementsActionSchema",
            "setParcelTrackingData": "commercetools.schemas.StagedOrderSetParcelTrackingDataActionSchema",
            "setReturnPaymentState": "commercetools.schemas.StagedOrderSetReturnPaymentStateActionSchema",
            "setReturnShipmentState": "commercetools.schemas.StagedOrderSetReturnShipmentStateActionSchema",
            "setShippingAddress": "commercetools.schemas.StagedOrderSetShippingAddressActionSchema",
            "setShippingAddressAndCustomShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndCustomShippingMethodActionSchema",
            "setShippingAddressAndShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndShippingMethodActionSchema",
            "setShippingMethod": "commercetools.schemas.StagedOrderSetShippingMethodActionSchema",
            "setShippingMethodTaxAmount": "commercetools.schemas.StagedOrderSetShippingMethodTaxAmountActionSchema",
            "setShippingMethodTaxRate": "commercetools.schemas.StagedOrderSetShippingMethodTaxRateActionSchema",
            "setShippingRateInput": "commercetools.schemas.StagedOrderSetShippingRateInputActionSchema",
            "transitionCustomLineItemState": "commercetools.schemas.StagedOrderTransitionCustomLineItemStateActionSchema",
            "transitionLineItemState": "commercetools.schemas.StagedOrderTransitionLineItemStateActionSchema",
            "transitionState": "commercetools.schemas.StagedOrderTransitionStateActionSchema",
            "updateItemShippingAddress": "commercetools.schemas.StagedOrderUpdateItemShippingAddressActionSchema",
            "updateSyncInfo": "commercetools.schemas.StagedOrderUpdateSyncInfoActionSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="stagedActions",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    comment = marshmallow.fields.String(allow_none=True, missing=None)
    dry_run = marshmallow.fields.Bool(allow_none=True, missing=None, data_key="dryRun")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderEditDraft(**data)


class OrderEditResultSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditResult(**data)


class OrderExcerptSchema(marshmallow.Schema):
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxedPrice",
    )
    version = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderExcerpt(**data)


class OrderFromCartDraftSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderFromCartDraft(**data)


class OrderImportDraftSchema(marshmallow.Schema):
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.LineItemImportDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="customLineItems",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, missing=None, data_key="orderState"
    )
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingInfoDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
    )
    completed_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="completedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode"
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderImportDraft(**data)


class PagedQueryResponseSchema(marshmallow.Schema):
    count = marshmallow.fields.Integer(allow_none=True)
    total = marshmallow.fields.Integer(allow_none=True, missing=None)
    offset = marshmallow.fields.Integer(allow_none=True)
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ResourceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PagedQueryResponse(**data)


class ParcelDraftSchema(marshmallow.Schema):
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ParcelDraft(**data)


class ParcelMeasurementsSchema(marshmallow.Schema):
    height_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="heightInMillimeter"
    )
    length_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="lengthInMillimeter"
    )
    width_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="widthInMillimeter"
    )
    weight_in_gram = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="weightInGram"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ParcelMeasurements(**data)


class ParcelSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Parcel(**data)


class PayloadNotIncludedSchema(marshmallow.Schema):
    reason = marshmallow.fields.String(allow_none=True)
    payload_type = marshmallow.fields.String(allow_none=True, data_key="payloadType")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PayloadNotIncluded(**data)


class PaymentDraftSchema(marshmallow.Schema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    interface_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interfaceId"
    )
    amount_planned = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="amountPlanned",
    )
    amount_authorized = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountAuthorized",
    )
    authorized_until = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="authorizedUntil"
    )
    amount_paid = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountPaid",
    )
    amount_refunded = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountRefunded",
    )
    payment_method_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentMethodInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentMethodInfo",
    )
    payment_status = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentStatusSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentStatus",
    )
    transactions = marshmallow.fields.Nested(
        nested="commercetools.schemas.TransactionDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    interface_interactions = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="interfaceInteractions",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentDraft(**data)


class PaymentInfoSchema(marshmallow.Schema):
    payments = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentInfo(**data)


class PaymentMethodInfoSchema(marshmallow.Schema):
    payment_interface = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="paymentInterface"
    )
    method = marshmallow.fields.String(allow_none=True, missing=None)
    name = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentMethodInfo(**data)


class PaymentStatusSchema(marshmallow.Schema):
    interface_code = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interfaceCode"
    )
    interface_text = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interfaceText"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentStatus(**data)


class PriceDraftSchema(marshmallow.Schema):
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    country = marshmallow.fields.String(missing=None)
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tiers = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceTierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PriceDraft(**data)


class PriceFunctionSchema(marshmallow.Schema):
    currency_code = marshmallow.fields.String(data_key="currencyCode")
    function = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PriceFunction(**data)


class PriceSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True, missing=None)
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    country = marshmallow.fields.String(missing=None)
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )
    discounted = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tiers = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceTierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Price(**data)


class PriceTierSchema(marshmallow.Schema):
    minimum_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="minimumQuantity"
    )
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PriceTier(**data)


class ProductCatalogDataSchema(marshmallow.Schema):
    published = marshmallow.fields.Bool(allow_none=True)
    current = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    has_staged_changes = marshmallow.fields.Bool(
        allow_none=True, data_key="hasStagedChanges"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductCatalogData(**data)


class ProductDataSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True)
    categories = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    category_order_hints = CategoryOrderHintsField(
        allow_none=True, missing=None, data_key="categoryOrderHints"
    )
    description = LocalizedStringField(allow_none=True, missing=None)
    slug = LocalizedStringField(allow_none=True)
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    master_variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="masterVariant",
    )
    variants = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    search_keywords = marshmallow.fields.Nested(
        nested="commercetools.schemas.SearchKeywordsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="searchKeywords",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductData(**data)


class ProductDiscountDraftSchema(marshmallow.Schema):
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.ProductDiscountValueAbsoluteSchema",
            "external": "commercetools.schemas.ProductDiscountValueExternalSchema",
            "relative": "commercetools.schemas.ProductDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    predicate = marshmallow.fields.String(allow_none=True)
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDiscountDraft(**data)


class ProductDiscountMatchQuerySchema(marshmallow.Schema):
    product_id = marshmallow.fields.String(allow_none=True, data_key="productId")
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")
    staged = marshmallow.fields.Bool(allow_none=True)
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDiscountMatchQuery(**data)


class ProductDiscountValueSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductDiscountValue(**data)


class ProductDraftSchema(marshmallow.Schema):
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="productType",
    )
    name = LocalizedStringField(allow_none=True)
    slug = LocalizedStringField(allow_none=True)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    categories = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    category_order_hints = CategoryOrderHintsField(
        allow_none=True, missing=None, data_key="categoryOrderHints"
    )
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    master_variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="masterVariant",
    )
    variants = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    search_keywords = marshmallow.fields.Nested(
        nested="commercetools.schemas.SearchKeywordsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="searchKeywords",
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    publish = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDraft(**data)


class ProductTypeDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True)
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeDefinitionDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductTypeDraft(**data)


class ProductVariantAvailabilitySchema(marshmallow.Schema):
    is_on_stock = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="availableQuantity"
    )
    channels = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantChannelAvailabilityMapSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariantAvailability(**data)


class ProductVariantChannelAvailabilityMapSchema(marshmallow.Schema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        pattern=re.compile(""),
        type=marshmallow.fields.Nested(
            nested="commercetools.schemas.ProductVariantChannelAvailabilitySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        data = self.fields["_regex"].postprocess(data)
        return types.ProductVariantChannelAvailabilityMap(**data)

    @marshmallow.pre_load
    def pre_load(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.pre_dump
    def pre_dump(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.post_dump
    def post_dump(self, data):
        data = self.fields["_regex"].postprocess(data)
        return data


class ProductVariantChannelAvailabilitySchema(marshmallow.Schema):
    is_on_stock = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="availableQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariantChannelAvailability(**data)


class ProductVariantDraftSchema(marshmallow.Schema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    images = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    assets = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariantDraft(**data)


class ProductVariantImportDraftSchema(marshmallow.Schema):
    id = marshmallow.fields.Integer(allow_none=True, missing=None)
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    images = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariantImportDraft(**data)


class ProductVariantSchema(marshmallow.Schema):
    id = marshmallow.fields.Integer(allow_none=True)
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    images = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    assets = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    availability = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantAvailabilitySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    is_matching_variant = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isMatchingVariant"
    )
    scoped_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ScopedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="scopedPrice",
    )
    scoped_price_discounted = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="scopedPriceDiscounted"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductVariant(**data)


class ProjectSchema(marshmallow.Schema):
    version = marshmallow.fields.Integer(allow_none=True)
    key = marshmallow.fields.String(allow_none=True)
    name = marshmallow.fields.String(allow_none=True)
    countries = marshmallow.fields.String(many=True)
    currencies = marshmallow.fields.String(many=True)
    languages = marshmallow.fields.String(many=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    trial_until = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="trialUntil"
    )
    messages = marshmallow.fields.Nested(
        nested="commercetools.schemas.MessageConfigurationSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate_input_type = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "CartClassification": "commercetools.schemas.CartClassificationTypeSchema",
            "CartScore": "commercetools.schemas.CartScoreTypeSchema",
            "CartValue": "commercetools.schemas.CartValueTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInputType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Project(**data)


class ReplicaCartDraftSchema(marshmallow.Schema):
    reference = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReplicaCartDraft(**data)


class ResourceIdentifierSchema(marshmallow.Schema):
    type_id = marshmallow_enum.EnumField(
        types.ReferenceTypeId, by_value=True, missing=None, data_key="typeId"
    )
    id = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ResourceIdentifier(**data)


class ResourceSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, data_key="lastModifiedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Resource(**data)


class ReturnInfoSchema(marshmallow.Schema):
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReturnItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="returnTrackingId"
    )
    return_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnInfo(**data)


class ReturnItemDraftSchema(marshmallow.Schema):
    quantity = marshmallow.fields.Integer(allow_none=True)
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    comment = marshmallow.fields.String(allow_none=True, missing=None)
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnItemDraft(**data)


class ReturnItemSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    comment = marshmallow.fields.String(allow_none=True, missing=None)
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.ReturnPaymentState, by_value=True, data_key="paymentState"
    )
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, data_key="lastModifiedAt"
    )
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReturnItem(**data)


class ReviewDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    uniqueness_value = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="uniquenessValue"
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    author_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="authorName"
    )
    title = marshmallow.fields.String(allow_none=True, missing=None)
    text = marshmallow.fields.String(allow_none=True, missing=None)
    target = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ResourceIdentifierSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    rating = marshmallow.fields.Integer(allow_none=True, missing=None)
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReviewDraft(**data)


class ReviewRatingStatisticsSchema(marshmallow.Schema):
    average_rating = marshmallow.fields.Integer(
        allow_none=True, data_key="averageRating"
    )
    highest_rating = marshmallow.fields.Integer(
        allow_none=True, data_key="highestRating"
    )
    lowest_rating = marshmallow.fields.Integer(allow_none=True, data_key="lowestRating")
    count = marshmallow.fields.Integer(allow_none=True)
    ratings_distribution = marshmallow.fields.Dict(
        allow_none=True, data_key="ratingsDistribution"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReviewRatingStatistics(**data)


class ScopedPriceSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    current_value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="currentValue",
    )
    country = marshmallow.fields.String(missing=None)
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )
    discounted = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ScopedPrice(**data)


class SearchKeywordSchema(marshmallow.Schema):
    text = marshmallow.fields.String(allow_none=True)
    suggest_tokenizer = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "custom": "commercetools.schemas.CustomTokenizerSchema",
            "whitespace": "commercetools.schemas.WhitespaceTokenizerSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="suggestTokenizer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SearchKeyword(**data)


class SearchKeywordsSchema(marshmallow.Schema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        pattern=re.compile("^[a-z]{2}(-[A-Z]{2})?$"),
        type=marshmallow.fields.Nested(
            nested="commercetools.schemas.SearchKeywordSchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
            many=True,
        ),
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        data = self.fields["_regex"].postprocess(data)
        return types.SearchKeywords(**data)

    @marshmallow.pre_load
    def pre_load(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.pre_dump
    def pre_dump(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.post_dump
    def post_dump(self, data):
        data = self.fields["_regex"].postprocess(data)
        return data


class ShippingInfoDraftSchema(marshmallow.Schema):
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedItemPriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    deliveries = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="discountedPrice",
    )
    shipping_method_state = marshmallow_enum.EnumField(
        types.ShippingMethodState,
        by_value=True,
        missing=None,
        data_key="shippingMethodState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingInfoDraft(**data)


class ShippingInfoSchema(marshmallow.Schema):
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    deliveries = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    discounted_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedLineItemPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="discountedPrice",
    )
    shipping_method_state = marshmallow_enum.EnumField(
        types.ShippingMethodState, by_value=True, data_key="shippingMethodState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingInfo(**data)


class ShippingMethodDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxCategory",
    )
    zone_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="zoneRates",
    )
    is_default = marshmallow.fields.Bool(allow_none=True, data_key="isDefault")
    predicate = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingMethodDraft(**data)


class ShippingRateDraftSchema(marshmallow.Schema):
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    free_above = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="freeAbove",
    )
    tiers = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "CartClassification": "commercetools.schemas.CartClassificationTierSchema",
            "CartScore": "commercetools.schemas.CartScoreTierSchema",
            "CartValue": "commercetools.schemas.CartValueTierSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingRateDraft(**data)


class ShippingRateInputDraftSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRateInputDraft(**data)


class ShippingRateInputSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRateInput(**data)


class ShippingRateInputTypeSchema(marshmallow.Schema):
    type = marshmallow_enum.EnumField(types.ShippingRateTierType, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRateInputType(**data)


class ShippingRatePriceTierSchema(marshmallow.Schema):
    type = marshmallow_enum.EnumField(types.ShippingRateTierType, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ShippingRatePriceTier(**data)


class ShippingRateSchema(marshmallow.Schema):
    price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    free_above = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="freeAbove",
    )
    is_matching = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isMatching"
    )
    tiers = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "CartClassification": "commercetools.schemas.CartClassificationTierSchema",
            "CartScore": "commercetools.schemas.CartScoreTierSchema",
            "CartValue": "commercetools.schemas.CartValueTierSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingRate(**data)


class ShoppingListDraftSchema(marshmallow.Schema):
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )
    description = LocalizedStringField(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    name = LocalizedStringField(allow_none=True)
    slug = LocalizedStringField(allow_none=True, missing=None)
    text_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.TextLineItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="textLineItems",
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingListDraft(**data)


class ShoppingListLineItemDraftSchema(marshmallow.Schema):
    added_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="addedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingListLineItemDraft(**data)


class ShoppingListLineItemSchema(marshmallow.Schema):
    added_at = marshmallow.fields.DateTime(allow_none=True, data_key="addedAt")
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    deactivated_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="deactivatedAt"
    )
    id = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    product_id = marshmallow.fields.String(allow_none=True, data_key="productId")
    product_slug = LocalizedStringField(
        allow_none=True, missing=None, data_key="productSlug"
    )
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productType",
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingListLineItem(**data)


class StagedOrderUpdateActionSchema(marshmallow.Schema):
    action = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderUpdateAction(**data)


class StateDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    type = marshmallow_enum.EnumField(types.StateTypeEnum, by_value=True)
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    initial = marshmallow.fields.Bool(allow_none=True, missing=None)
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.StateRoleEnum, by_value=True), missing=None
    )
    transitions = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.StateDraft(**data)


class SubRateSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    amount = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SubRate(**data)


class SubscriptionDeliverySchema(marshmallow.Schema):
    project_key = marshmallow.fields.String(allow_none=True, data_key="projectKey")
    notification_type = marshmallow.fields.String(
        allow_none=True, data_key="notificationType"
    )
    resource = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["notification_type"]
        return types.SubscriptionDelivery(**data)


class SubscriptionDraftSchema(marshmallow.Schema):
    changes = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChangeSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "EventGrid": "commercetools.schemas.AzureEventGridDestinationSchema",
            "AzureServiceBus": "commercetools.schemas.AzureServiceBusDestinationSchema",
            "GoogleCloudPubSub": "commercetools.schemas.GoogleCloudPubSubDestinationSchema",
            "IronMQ": "commercetools.schemas.IronMqDestinationSchema",
            "SNS": "commercetools.schemas.SnsDestinationSchema",
            "SQS": "commercetools.schemas.SqsDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)
    messages = marshmallow.fields.Nested(
        nested="commercetools.schemas.MessageSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SubscriptionDraft(**data)


class SuggestTokenizerSchema(marshmallow.Schema):
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.SuggestTokenizer(**data)


class SuggestionResultSchema(marshmallow.Schema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        pattern=re.compile("searchKeywords.[a-z]{2}(-[A-Z]{2})?"),
        type=marshmallow.fields.List(
            marshmallow.fields.Nested(
                nested="commercetools.schemas.SuggestionSchema",
                unknown=marshmallow.EXCLUDE,
                allow_none=True,
            ),
            allow_none=True,
        ),
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        data = self.fields["_regex"].postprocess(data)
        return types.SuggestionResult(**data)

    @marshmallow.pre_load
    def pre_load(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.pre_dump
    def pre_dump(self, data):
        data = self.fields["_regex"].preprocess(data)
        return data

    @marshmallow.post_dump
    def post_dump(self, data):
        data = self.fields["_regex"].postprocess(data)
        return data


class SuggestionSchema(marshmallow.Schema):
    text = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Suggestion(**data)


class SyncInfoSchema(marshmallow.Schema):
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.DateTime(allow_none=True, data_key="syncedAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SyncInfo(**data)


class TaxCategoryDraftSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxCategoryDraft(**data)


class TaxPortionSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True, missing=None)
    rate = marshmallow.fields.Integer(allow_none=True)
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxPortion(**data)


class TaxRateDraftSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    amount = marshmallow.fields.Integer(allow_none=True, missing=None)
    included_in_price = marshmallow.fields.Bool(
        allow_none=True, data_key="includedInPrice"
    )
    country = marshmallow.fields.String()
    state = marshmallow.fields.String(allow_none=True, missing=None)
    sub_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.SubRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="subRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxRateDraft(**data)


class TaxRateSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    amount = marshmallow.fields.Integer(allow_none=True)
    included_in_price = marshmallow.fields.Bool(
        allow_none=True, data_key="includedInPrice"
    )
    country = marshmallow.fields.String()
    state = marshmallow.fields.String(allow_none=True, missing=None)
    sub_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.SubRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="subRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxRate(**data)


class TaxedItemPriceDraftSchema(marshmallow.Schema):
    total_net = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
    )
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedItemPriceDraft(**data)


class TaxedItemPriceSchema(marshmallow.Schema):
    total_net = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
    )
    total_gross = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedItemPrice(**data)


class TaxedPriceSchema(marshmallow.Schema):
    total_net = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalNet",
    )
    total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalGross",
    )
    tax_portions = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="taxPortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxedPrice(**data)


class TextLineItemDraftSchema(marshmallow.Schema):
    added_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="addedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    description = LocalizedStringField(allow_none=True, missing=None)
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TextLineItemDraft(**data)


class TextLineItemSchema(marshmallow.Schema):
    added_at = marshmallow.fields.DateTime(allow_none=True, data_key="addedAt")
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    description = LocalizedStringField(allow_none=True, missing=None)
    id = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TextLineItem(**data)


class TrackingDataSchema(marshmallow.Schema):
    tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="trackingId"
    )
    carrier = marshmallow.fields.String(allow_none=True, missing=None)
    provider = marshmallow.fields.String(allow_none=True, missing=None)
    provider_transaction = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="providerTransaction"
    )
    is_return = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isReturn"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TrackingData(**data)


class TransactionDraftSchema(marshmallow.Schema):
    timestamp = marshmallow.fields.DateTime(allow_none=True, missing=None)
    type = marshmallow_enum.EnumField(types.TransactionType, by_value=True)
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    interaction_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interactionId"
    )
    state = marshmallow_enum.EnumField(
        types.TransactionState, by_value=True, missing=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TransactionDraft(**data)


class TransactionSchema(marshmallow.Schema):
    id = marshmallow.fields.String(allow_none=True)
    timestamp = marshmallow.fields.DateTime(allow_none=True, missing=None)
    type = marshmallow_enum.EnumField(types.TransactionType, by_value=True)
    amount = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    interaction_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interactionId"
    )
    state = marshmallow_enum.EnumField(
        types.TransactionState, by_value=True, missing=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Transaction(**data)


class TypeDraftSchema(marshmallow.Schema):
    key = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    resource_type_ids = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ResourceTypeId, by_value=True),
        data_key="resourceTypeIds",
    )
    field_definitions = marshmallow.fields.Nested(
        nested="commercetools.schemas.FieldDefinitionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="fieldDefinitions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TypeDraft(**data)


class UpdateActionSchema(marshmallow.Schema):
    action = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.UpdateAction(**data)


class UpdateSchema(marshmallow.Schema):
    version = marshmallow.fields.Integer(allow_none=True)
    actions = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.UpdateActionSchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Update(**data)


class VariantValuesSchema(marshmallow.Schema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.VariantValues(**data)


class ZoneDraftSchema(marshmallow.Schema):
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    locations = marshmallow.fields.Nested(
        nested="commercetools.schemas.LocationSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ZoneDraft(**data)


class ZoneRateDraftSchema(marshmallow.Schema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="shippingRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ZoneRateDraft(**data)


class ZoneRateSchema(marshmallow.Schema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="shippingRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ZoneRate(**data)


class AccessDeniedErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.AccessDeniedError(**data)


class AttributeBooleanTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeBooleanType(**data)


class AttributeDateTimeTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeDateTimeType(**data)


class AttributeDateTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeDateType(**data)


class AttributeEnumTypeSchema(AttributeTypeSchema):
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributePlainEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeEnumType(**data)


class AttributeLocalizableTextTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeLocalizableTextType(**data)


class AttributeLocalizedEnumTypeSchema(AttributeTypeSchema):
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeLocalizedEnumType(**data)


class AttributeMoneyTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeMoneyType(**data)


class AttributeNestedTypeSchema(AttributeTypeSchema):
    type_reference = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="typeReference",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeNestedType(**data)


class AttributeNumberTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeNumberType(**data)


class AttributeReferenceTypeSchema(AttributeTypeSchema):
    reference_type_id = marshmallow_enum.EnumField(
        types.ReferenceTypeId, by_value=True, data_key="referenceTypeId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeReferenceType(**data)


class AttributeSetTypeSchema(AttributeTypeSchema):
    element_type = helpers.Discriminator(
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "boolean": "commercetools.schemas.AttributeBooleanTypeSchema",
            "datetime": "commercetools.schemas.AttributeDateTimeTypeSchema",
            "date": "commercetools.schemas.AttributeDateTypeSchema",
            "enum": "commercetools.schemas.AttributeEnumTypeSchema",
            "ltext": "commercetools.schemas.AttributeLocalizableTextTypeSchema",
            "lenum": "commercetools.schemas.AttributeLocalizedEnumTypeSchema",
            "money": "commercetools.schemas.AttributeMoneyTypeSchema",
            "nested": "commercetools.schemas.AttributeNestedTypeSchema",
            "number": "commercetools.schemas.AttributeNumberTypeSchema",
            "reference": "commercetools.schemas.AttributeReferenceTypeSchema",
            "set": "commercetools.schemas.AttributeSetTypeSchema",
            "text": "commercetools.schemas.AttributeTextTypeSchema",
            "time": "commercetools.schemas.AttributeTimeTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="elementType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeSetType(**data)


class AttributeTextTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeTextType(**data)


class AttributeTimeTypeSchema(AttributeTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.AttributeTimeType(**data)


class AzureEventGridDestinationSchema(DestinationSchema):
    uri = marshmallow.fields.String(allow_none=True)
    access_key = marshmallow.fields.String(allow_none=True, data_key="accessKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.AzureEventGridDestination(**data)


class AzureServiceBusDestinationSchema(DestinationSchema):
    connection_string = marshmallow.fields.String(
        allow_none=True, data_key="connectionString"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.AzureServiceBusDestination(**data)


class CartClassificationTierSchema(ShippingRatePriceTierSchema):
    value = marshmallow.fields.String(allow_none=True)
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    is_matching = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isMatching"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartClassificationTier(**data)


class CartClassificationTypeSchema(ShippingRateInputTypeSchema):
    values = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.CustomFieldLocalizedEnumValueSchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartClassificationType(**data)


class CartDiscountCustomLineItemsTargetSchema(CartDiscountTargetSchema):
    predicate = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountCustomLineItemsTarget(**data)


class CartDiscountLineItemsTargetSchema(CartDiscountTargetSchema):
    predicate = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountLineItemsTarget(**data)


class CartDiscountPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDiscountPagedQueryResponse(**data)


class CartDiscountSchema(ResourceSchema):
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.CartDiscountValueAbsoluteSchema",
            "giftLineItem": "commercetools.schemas.CartDiscountValueGiftLineItemSchema",
            "relative": "commercetools.schemas.CartDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    cart_predicate = marshmallow.fields.String(
        allow_none=True, data_key="cartPredicate"
    )
    target = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "customLineItems": "commercetools.schemas.CartDiscountCustomLineItemsTargetSchema",
            "lineItems": "commercetools.schemas.CartDiscountLineItemsTargetSchema",
            "shipping": "commercetools.schemas.CartDiscountShippingCostTargetSchema",
            "multiBuyCustomLineItems": "commercetools.schemas.MultiBuyCustomLineItemsTargetSchema",
            "multiBuyLineItems": "commercetools.schemas.MultiBuyLineItemsTargetSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )
    requires_discount_code = marshmallow.fields.Bool(
        allow_none=True, data_key="requiresDiscountCode"
    )
    references = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    stacking_mode = marshmallow_enum.EnumField(
        types.StackingMode, by_value=True, data_key="stackingMode"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDiscount(**data)


class CartDiscountShippingCostTargetSchema(CartDiscountTargetSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountShippingCostTarget(**data)


class CartDiscountUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountUpdateAction(**data)


class CartDiscountUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeCartPredicate": "commercetools.schemas.CartDiscountChangeCartPredicateActionSchema",
                "changeIsActive": "commercetools.schemas.CartDiscountChangeIsActiveActionSchema",
                "changeName": "commercetools.schemas.CartDiscountChangeNameActionSchema",
                "changeRequiresDiscountCode": "commercetools.schemas.CartDiscountChangeRequiresDiscountCodeActionSchema",
                "changeSortOrder": "commercetools.schemas.CartDiscountChangeSortOrderActionSchema",
                "changeStackingMode": "commercetools.schemas.CartDiscountChangeStackingModeActionSchema",
                "changeTarget": "commercetools.schemas.CartDiscountChangeTargetActionSchema",
                "changeValue": "commercetools.schemas.CartDiscountChangeValueActionSchema",
                "setCustomField": "commercetools.schemas.CartDiscountSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.CartDiscountSetCustomTypeActionSchema",
                "setDescription": "commercetools.schemas.CartDiscountSetDescriptionActionSchema",
                "setValidFrom": "commercetools.schemas.CartDiscountSetValidFromActionSchema",
                "setValidFromAndUntil": "commercetools.schemas.CartDiscountSetValidFromAndUntilActionSchema",
                "setValidUntil": "commercetools.schemas.CartDiscountSetValidUntilActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartDiscountUpdate(**data)


class CartDiscountValueAbsoluteSchema(CartDiscountValueSchema):
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountValueAbsolute(**data)


class CartDiscountValueGiftLineItemSchema(CartDiscountValueSchema):
    product = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountValueGiftLineItem(**data)


class CartDiscountValueRelativeSchema(CartDiscountValueSchema):
    permyriad = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartDiscountValueRelative(**data)


class CartPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartPagedQueryResponse(**data)


class CartSchema(ResourceSchema):
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.LineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="customLineItems",
    )
    total_price = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    cart_state = marshmallow_enum.EnumField(
        types.CartState, by_value=True, data_key="cartState"
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, data_key="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, data_key="taxRoundingMode"
    )
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode, by_value=True, data_key="taxCalculationMode"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    country = marshmallow.fields.String(missing=None)
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
    )
    discount_codes = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="discountCodes",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    payment_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentInfo",
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )
    refused_gifts = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="refusedGifts",
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True)
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas.ClassificationShippingRateInputSchema",
            "Score": "commercetools.schemas.ScoreShippingRateInputSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Cart(**data)


class CartScoreTierSchema(ShippingRatePriceTierSchema):
    score = marshmallow.fields.Integer(allow_none=True)
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    price_function = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceFunctionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="priceFunction",
    )
    is_matching = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isMatching"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartScoreTier(**data)


class CartScoreTypeSchema(ShippingRateInputTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartScoreType(**data)


class CartUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartUpdateAction(**data)


class CartUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addCustomLineItem": "commercetools.schemas.CartAddCustomLineItemActionSchema",
                "addDiscountCode": "commercetools.schemas.CartAddDiscountCodeActionSchema",
                "addItemShippingAddress": "commercetools.schemas.CartAddItemShippingAddressActionSchema",
                "addLineItem": "commercetools.schemas.CartAddLineItemActionSchema",
                "addPayment": "commercetools.schemas.CartAddPaymentActionSchema",
                "addShoppingList": "commercetools.schemas.CartAddShoppingListActionSchema",
                "applyDeltaToCustomLineItemShippingDetailsTargets": "commercetools.schemas.CartApplyDeltaToCustomLineItemShippingDetailsTargetsActionSchema",
                "applyDeltaToLineItemShippingDetailsTargets": "commercetools.schemas.CartApplyDeltaToLineItemShippingDetailsTargetsActionSchema",
                "changeCustomLineItemMoney": "commercetools.schemas.CartChangeCustomLineItemMoneyActionSchema",
                "changeCustomLineItemQuantity": "commercetools.schemas.CartChangeCustomLineItemQuantityActionSchema",
                "changeLineItemQuantity": "commercetools.schemas.CartChangeLineItemQuantityActionSchema",
                "changeTaxCalculationMode": "commercetools.schemas.CartChangeTaxCalculationModeActionSchema",
                "changeTaxMode": "commercetools.schemas.CartChangeTaxModeActionSchema",
                "changeTaxRoundingMode": "commercetools.schemas.CartChangeTaxRoundingModeActionSchema",
                "recalculate": "commercetools.schemas.CartRecalculateActionSchema",
                "removeCustomLineItem": "commercetools.schemas.CartRemoveCustomLineItemActionSchema",
                "removeDiscountCode": "commercetools.schemas.CartRemoveDiscountCodeActionSchema",
                "removeItemShippingAddress": "commercetools.schemas.CartRemoveItemShippingAddressActionSchema",
                "removeLineItem": "commercetools.schemas.CartRemoveLineItemActionSchema",
                "removePayment": "commercetools.schemas.CartRemovePaymentActionSchema",
                "setAnonymousId": "commercetools.schemas.CartSetAnonymousIdActionSchema",
                "setBillingAddress": "commercetools.schemas.CartSetBillingAddressActionSchema",
                "setCartTotalTax": "commercetools.schemas.CartSetCartTotalTaxActionSchema",
                "setCountry": "commercetools.schemas.CartSetCountryActionSchema",
                "setCustomField": "commercetools.schemas.CartSetCustomFieldActionSchema",
                "setCustomLineItemCustomField": "commercetools.schemas.CartSetCustomLineItemCustomFieldActionSchema",
                "setCustomLineItemCustomType": "commercetools.schemas.CartSetCustomLineItemCustomTypeActionSchema",
                "setCustomLineItemShippingDetails": "commercetools.schemas.CartSetCustomLineItemShippingDetailsActionSchema",
                "setCustomLineItemTaxAmount": "commercetools.schemas.CartSetCustomLineItemTaxAmountActionSchema",
                "setCustomLineItemTaxRate": "commercetools.schemas.CartSetCustomLineItemTaxRateActionSchema",
                "setCustomShippingMethod": "commercetools.schemas.CartSetCustomShippingMethodActionSchema",
                "setCustomType": "commercetools.schemas.CartSetCustomTypeActionSchema",
                "setCustomerEmail": "commercetools.schemas.CartSetCustomerEmailActionSchema",
                "setCustomerGroup": "commercetools.schemas.CartSetCustomerGroupActionSchema",
                "setCustomerId": "commercetools.schemas.CartSetCustomerIdActionSchema",
                "setDeleteDaysAfterLastModification": "commercetools.schemas.CartSetDeleteDaysAfterLastModificationActionSchema",
                "setLineItemCustomField": "commercetools.schemas.CartSetLineItemCustomFieldActionSchema",
                "setLineItemCustomType": "commercetools.schemas.CartSetLineItemCustomTypeActionSchema",
                "setLineItemPrice": "commercetools.schemas.CartSetLineItemPriceActionSchema",
                "setLineItemShippingDetails": "commercetools.schemas.CartSetLineItemShippingDetailsActionSchema",
                "setLineItemTaxAmount": "commercetools.schemas.CartSetLineItemTaxAmountActionSchema",
                "setLineItemTaxRate": "commercetools.schemas.CartSetLineItemTaxRateActionSchema",
                "setLineItemTotalPrice": "commercetools.schemas.CartSetLineItemTotalPriceActionSchema",
                "setLocale": "commercetools.schemas.CartSetLocaleActionSchema",
                "setShippingAddress": "commercetools.schemas.CartSetShippingAddressActionSchema",
                "setShippingMethod": "commercetools.schemas.CartSetShippingMethodActionSchema",
                "setShippingMethodTaxAmount": "commercetools.schemas.CartSetShippingMethodTaxAmountActionSchema",
                "setShippingMethodTaxRate": "commercetools.schemas.CartSetShippingMethodTaxRateActionSchema",
                "setShippingRateInput": "commercetools.schemas.CartSetShippingRateInputActionSchema",
                "updateItemShippingAddress": "commercetools.schemas.CartUpdateItemShippingAddressActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CartUpdate(**data)


class CartValueTierSchema(ShippingRatePriceTierSchema):
    minimum_cent_amount = marshmallow.fields.Integer(
        allow_none=True, data_key="minimumCentAmount"
    )
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    is_matching = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="isMatching"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartValueTier(**data)


class CartValueTypeSchema(ShippingRateInputTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CartValueType(**data)


class CategoryCreatedMessageSchema(MessagePayloadSchema):
    category = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategorySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CategoryCreatedMessage(**data)


class CategoryPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategorySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CategoryPagedQueryResponse(**data)


class CategorySchema(ResourceSchema):
    name = LocalizedStringField(allow_none=True)
    slug = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    ancestors = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    parent = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    order_hint = marshmallow.fields.String(allow_none=True, data_key="orderHint")
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    assets = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Category(**data)


class CategorySlugChangedMessageSchema(MessagePayloadSchema):
    slug = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CategorySlugChangedMessage(**data)


class CategoryUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryUpdateAction(**data)


class CategoryUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addAsset": "commercetools.schemas.CategoryAddAssetActionSchema",
                "changeAssetName": "commercetools.schemas.CategoryChangeAssetNameActionSchema",
                "changeAssetOrder": "commercetools.schemas.CategoryChangeAssetOrderActionSchema",
                "changeName": "commercetools.schemas.CategoryChangeNameActionSchema",
                "changeOrderHint": "commercetools.schemas.CategoryChangeOrderHintActionSchema",
                "changeParent": "commercetools.schemas.CategoryChangeParentActionSchema",
                "changeSlug": "commercetools.schemas.CategoryChangeSlugActionSchema",
                "removeAsset": "commercetools.schemas.CategoryRemoveAssetActionSchema",
                "setAssetCustomField": "commercetools.schemas.CategorySetAssetCustomFieldActionSchema",
                "setAssetCustomType": "commercetools.schemas.CategorySetAssetCustomTypeActionSchema",
                "setAssetDescription": "commercetools.schemas.CategorySetAssetDescriptionActionSchema",
                "setAssetKey": "commercetools.schemas.CategorySetAssetKeyActionSchema",
                "setAssetSources": "commercetools.schemas.CategorySetAssetSourcesActionSchema",
                "setAssetTags": "commercetools.schemas.CategorySetAssetTagsActionSchema",
                "setCustomField": "commercetools.schemas.CategorySetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.CategorySetCustomTypeActionSchema",
                "setDescription": "commercetools.schemas.CategorySetDescriptionActionSchema",
                "setExternalId": "commercetools.schemas.CategorySetExternalIdActionSchema",
                "setKey": "commercetools.schemas.CategorySetKeyActionSchema",
                "setMetaDescription": "commercetools.schemas.CategorySetMetaDescriptionActionSchema",
                "setMetaKeywords": "commercetools.schemas.CategorySetMetaKeywordsActionSchema",
                "setMetaTitle": "commercetools.schemas.CategorySetMetaTitleActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CategoryUpdate(**data)


class ChannelPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ChannelPagedQueryResponse(**data)


class ChannelSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True)
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ChannelRoleEnum, by_value=True)
    )
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    review_rating_statistics = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewRatingStatisticsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="reviewRatingStatistics",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    geo_location = marshmallow.fields.Nested(
        nested="commercetools.schemas.GeoJsonPointSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="geoLocation",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Channel(**data)


class ChannelUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelUpdateAction(**data)


class ChannelUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addRoles": "commercetools.schemas.ChannelAddRolesActionSchema",
                "changeDescription": "commercetools.schemas.ChannelChangeDescriptionActionSchema",
                "changeKey": "commercetools.schemas.ChannelChangeKeyActionSchema",
                "changeName": "commercetools.schemas.ChannelChangeNameActionSchema",
                "removeRoles": "commercetools.schemas.ChannelRemoveRolesActionSchema",
                "setAddress": "commercetools.schemas.ChannelSetAddressActionSchema",
                "setCustomField": "commercetools.schemas.ChannelSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.ChannelSetCustomTypeActionSchema",
                "setGeoLocation": "commercetools.schemas.ChannelSetGeoLocationActionSchema",
                "setRoles": "commercetools.schemas.ChannelSetRolesActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ChannelUpdate(**data)


class ClassificationShippingRateInputDraftSchema(ShippingRateInputDraftSchema):
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ClassificationShippingRateInputDraft(**data)


class ClassificationShippingRateInputSchema(ShippingRateInputSchema):
    key = marshmallow.fields.String(allow_none=True)
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ClassificationShippingRateInput(**data)


class ConcurrentModificationErrorSchema(ErrorObjectSchema):
    current_version = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="currentVersion"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.ConcurrentModificationError(**data)


class CustomFieldBooleanTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldBooleanType(**data)


class CustomFieldDateTimeTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldDateTimeType(**data)


class CustomFieldDateTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldDateType(**data)


class CustomFieldEnumTypeSchema(FieldTypeSchema):
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldEnumType(**data)


class CustomFieldLocalizedEnumTypeSchema(FieldTypeSchema):
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldLocalizedEnumType(**data)


class CustomFieldLocalizedStringTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldLocalizedStringType(**data)


class CustomFieldMoneyTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldMoneyType(**data)


class CustomFieldNumberTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldNumberType(**data)


class CustomFieldReferenceTypeSchema(FieldTypeSchema):
    reference_type_id = marshmallow_enum.EnumField(
        types.ReferenceTypeId, by_value=True, data_key="referenceTypeId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldReferenceType(**data)


class CustomFieldSetTypeSchema(FieldTypeSchema):
    element_type = helpers.Discriminator(
        discriminator_field=("name", "name"),
        discriminator_schemas={
            "Boolean": "commercetools.schemas.CustomFieldBooleanTypeSchema",
            "DateTime": "commercetools.schemas.CustomFieldDateTimeTypeSchema",
            "Date": "commercetools.schemas.CustomFieldDateTypeSchema",
            "Enum": "commercetools.schemas.CustomFieldEnumTypeSchema",
            "LocalizedEnum": "commercetools.schemas.CustomFieldLocalizedEnumTypeSchema",
            "LocalizedString": "commercetools.schemas.CustomFieldLocalizedStringTypeSchema",
            "Money": "commercetools.schemas.CustomFieldMoneyTypeSchema",
            "Number": "commercetools.schemas.CustomFieldNumberTypeSchema",
            "Reference": "commercetools.schemas.CustomFieldReferenceTypeSchema",
            "Set": "commercetools.schemas.CustomFieldSetTypeSchema",
            "String": "commercetools.schemas.CustomFieldStringTypeSchema",
            "Time": "commercetools.schemas.CustomFieldTimeTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="elementType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldSetType(**data)


class CustomFieldStringTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldStringType(**data)


class CustomFieldTimeTypeSchema(FieldTypeSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["name"]
        return types.CustomFieldTimeType(**data)


class CustomLineItemStateTransitionMessageSchema(MessagePayloadSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomLineItemStateTransitionMessage(**data)


class CustomObjectPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomObjectSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomObjectPagedQueryResponse(**data)


class CustomObjectSchema(ResourceSchema):
    container = marshmallow.fields.String(allow_none=True)
    key = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomObject(**data)


class CustomTokenizerSchema(SuggestTokenizerSchema):
    inputs = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomTokenizer(**data)


class CustomerAddressAddedMessageSchema(MessagePayloadSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerAddressAddedMessage(**data)


class CustomerAddressChangedMessageSchema(MessagePayloadSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerAddressChangedMessage(**data)


class CustomerAddressRemovedMessageSchema(MessagePayloadSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerAddressRemovedMessage(**data)


class CustomerCompanyNameSetMessageSchema(MessagePayloadSchema):
    company_name = marshmallow.fields.String(allow_none=True, data_key="companyName")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerCompanyNameSetMessage(**data)


class CustomerCreatedMessageSchema(MessagePayloadSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerCreatedMessage(**data)


class CustomerDateOfBirthSetMessageSchema(MessagePayloadSchema):
    date_of_birth = marshmallow.fields.Date(allow_none=True, data_key="dateOfBirth")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerDateOfBirthSetMessage(**data)


class CustomerEmailChangedMessageSchema(MessagePayloadSchema):
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerEmailChangedMessage(**data)


class CustomerEmailVerifiedMessageSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerEmailVerifiedMessage(**data)


class CustomerGroupPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerGroupPagedQueryResponse(**data)


class CustomerGroupSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerGroup(**data)


class CustomerGroupSetMessageSchema(MessagePayloadSchema):
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CustomerGroupSetMessage(**data)


class CustomerGroupUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerGroupUpdateAction(**data)


class CustomerGroupUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeName": "commercetools.schemas.CustomerGroupChangeNameActionSchema",
                "setCustomField": "commercetools.schemas.CustomerGroupSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.CustomerGroupSetCustomTypeActionSchema",
                "setKey": "commercetools.schemas.CustomerGroupSetKeyActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerGroupUpdate(**data)


class CustomerPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerPagedQueryResponse(**data)


class CustomerSchema(ResourceSchema):
    customer_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerNumber"
    )
    email = marshmallow.fields.String(allow_none=True)
    password = marshmallow.fields.String(allow_none=True)
    first_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lastName"
    )
    middle_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="middleName"
    )
    title = marshmallow.fields.String(allow_none=True, missing=None)
    date_of_birth = marshmallow.fields.Date(
        allow_none=True, missing=None, data_key="dateOfBirth"
    )
    company_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="companyName"
    )
    vat_id = marshmallow.fields.String(allow_none=True, missing=None, data_key="vatId")
    addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    default_shipping_address_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="defaultShippingAddressId"
    )
    shipping_address_ids = marshmallow.fields.String(
        allow_none=True, many=True, missing=None, data_key="shippingAddressIds"
    )
    default_billing_address_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="defaultBillingAddressId"
    )
    billing_address_ids = marshmallow.fields.String(
        allow_none=True, many=True, missing=None, data_key="billingAddressIds"
    )
    is_email_verified = marshmallow.fields.Bool(
        allow_none=True, data_key="isEmailVerified"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    salutation = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Customer(**data)


class CustomerUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerUpdateAction(**data)


class CustomerUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addAddress": "commercetools.schemas.CustomerAddAddressActionSchema",
                "addBillingAddressId": "commercetools.schemas.CustomerAddBillingAddressIdActionSchema",
                "addShippingAddressId": "commercetools.schemas.CustomerAddShippingAddressIdActionSchema",
                "changeAddress": "commercetools.schemas.CustomerChangeAddressActionSchema",
                "changeEmail": "commercetools.schemas.CustomerChangeEmailActionSchema",
                "removeAddress": "commercetools.schemas.CustomerRemoveAddressActionSchema",
                "removeBillingAddressId": "commercetools.schemas.CustomerRemoveBillingAddressIdActionSchema",
                "removeShippingAddressId": "commercetools.schemas.CustomerRemoveShippingAddressIdActionSchema",
                "setCompanyName": "commercetools.schemas.CustomerSetCompanyNameActionSchema",
                "setCustomField": "commercetools.schemas.CustomerSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.CustomerSetCustomTypeActionSchema",
                "setCustomerGroup": "commercetools.schemas.CustomerSetCustomerGroupActionSchema",
                "setCustomerNumber": "commercetools.schemas.CustomerSetCustomerNumberActionSchema",
                "setDateOfBirth": "commercetools.schemas.CustomerSetDateOfBirthActionSchema",
                "setDefaultBillingAddress": "commercetools.schemas.CustomerSetDefaultBillingAddressActionSchema",
                "setDefaultShippingAddress": "commercetools.schemas.CustomerSetDefaultShippingAddressActionSchema",
                "setExternalId": "commercetools.schemas.CustomerSetExternalIdActionSchema",
                "setFirstName": "commercetools.schemas.CustomerSetFirstNameActionSchema",
                "setKey": "commercetools.schemas.CustomerSetKeyActionSchema",
                "setLastName": "commercetools.schemas.CustomerSetLastNameActionSchema",
                "setLocale": "commercetools.schemas.CustomerSetLocaleActionSchema",
                "setMiddleName": "commercetools.schemas.CustomerSetMiddleNameActionSchema",
                "setSalutation": "commercetools.schemas.CustomerSetSalutationActionSchema",
                "setTitle": "commercetools.schemas.CustomerSetTitleActionSchema",
                "setVatId": "commercetools.schemas.CustomerSetVatIdActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.CustomerUpdate(**data)


class DeliveryAddedMessageSchema(MessagePayloadSchema):
    delivery = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.DeliveryAddedMessage(**data)


class DeliveryAddressSetMessageSchema(MessagePayloadSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.DeliveryAddressSetMessage(**data)


class DeliveryItemsUpdatedMessageSchema(MessagePayloadSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.DeliveryItemsUpdatedMessage(**data)


class DeliveryRemovedMessageSchema(MessagePayloadSchema):
    delivery = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.DeliveryRemovedMessage(**data)


class DiscountCodeNonApplicableErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DiscountCodeNonApplicableError(**data)


class DiscountCodePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCodePagedQueryResponse(**data)


class DiscountCodeSchema(ResourceSchema):
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    code = marshmallow.fields.String(allow_none=True)
    cart_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="cartDiscounts",
    )
    cart_predicate = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="cartPredicate"
    )
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")
    references = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    max_applications = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplications"
    )
    max_applications_per_customer = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplicationsPerCustomer"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    groups = marshmallow.fields.String(allow_none=True, many=True)
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCode(**data)


class DiscountCodeUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeUpdateAction(**data)


class DiscountCodeUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeCartDiscounts": "commercetools.schemas.DiscountCodeChangeCartDiscountsActionSchema",
                "changeGroups": "commercetools.schemas.DiscountCodeChangeGroupsActionSchema",
                "changeIsActive": "commercetools.schemas.DiscountCodeChangeIsActiveActionSchema",
                "setCartPredicate": "commercetools.schemas.DiscountCodeSetCartPredicateActionSchema",
                "setCustomField": "commercetools.schemas.DiscountCodeSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.DiscountCodeSetCustomTypeActionSchema",
                "setDescription": "commercetools.schemas.DiscountCodeSetDescriptionActionSchema",
                "setMaxApplications": "commercetools.schemas.DiscountCodeSetMaxApplicationsActionSchema",
                "setMaxApplicationsPerCustomer": "commercetools.schemas.DiscountCodeSetMaxApplicationsPerCustomerActionSchema",
                "setName": "commercetools.schemas.DiscountCodeSetNameActionSchema",
                "setValidFrom": "commercetools.schemas.DiscountCodeSetValidFromActionSchema",
                "setValidFromAndUntil": "commercetools.schemas.DiscountCodeSetValidFromAndUntilActionSchema",
                "setValidUntil": "commercetools.schemas.DiscountCodeSetValidUntilActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.DiscountCodeUpdate(**data)


class DuplicateAttributeValueErrorSchema(ErrorObjectSchema):
    attribute = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DuplicateAttributeValueError(**data)


class DuplicateAttributeValuesErrorSchema(ErrorObjectSchema):
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DuplicateAttributeValuesError(**data)


class DuplicateFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True, missing=None)
    duplicate_value = marshmallow.fields.Raw(
        allow_none=True, missing=None, data_key="duplicateValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DuplicateFieldError(**data)


class DuplicatePriceScopeErrorSchema(ErrorObjectSchema):
    conflicting_prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="conflictingPrices",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DuplicatePriceScopeError(**data)


class DuplicateVariantValuesErrorSchema(ErrorObjectSchema):
    variant_values = marshmallow.fields.Nested(
        nested="commercetools.schemas.VariantValuesSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="variantValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.DuplicateVariantValuesError(**data)


class ExtensionAWSLambdaDestinationSchema(ExtensionDestinationSchema):
    arn = marshmallow.fields.String(allow_none=True)
    access_key = marshmallow.fields.String(allow_none=True, data_key="accessKey")
    access_secret = marshmallow.fields.String(allow_none=True, data_key="accessSecret")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionAWSLambdaDestination(**data)


class ExtensionAuthorizationHeaderAuthenticationSchema(
    ExtensionHttpDestinationAuthenticationSchema
):
    header_value = marshmallow.fields.String(allow_none=True, data_key="headerValue")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionAuthorizationHeaderAuthentication(**data)


class ExtensionAzureFunctionsAuthenticationSchema(
    ExtensionHttpDestinationAuthenticationSchema
):
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionAzureFunctionsAuthentication(**data)


class ExtensionHttpDestinationSchema(ExtensionDestinationSchema):
    url = marshmallow.fields.String(allow_none=True)
    authentication = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "AuthorizationHeader": "commercetools.schemas.ExtensionAuthorizationHeaderAuthenticationSchema",
            "AzureFunctions": "commercetools.schemas.ExtensionAzureFunctionsAuthenticationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ExtensionHttpDestination(**data)


class ExtensionPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExtensionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExtensionPagedQueryResponse(**data)


class ExtensionSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "AWSLambda": "commercetools.schemas.ExtensionAWSLambdaDestinationSchema",
            "HTTP": "commercetools.schemas.ExtensionHttpDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    triggers = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExtensionTriggerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Extension(**data)


class ExtensionUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ExtensionUpdateAction(**data)


class ExtensionUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeDestination": "commercetools.schemas.ExtensionChangeDestinationActionSchema",
                "changeTriggers": "commercetools.schemas.ExtensionChangeTriggersActionSchema",
                "setKey": "commercetools.schemas.ExtensionSetKeyActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ExtensionUpdate(**data)


class FilteredFacetResultSchema(FacetResultSchema):
    count = marshmallow.fields.Integer(allow_none=True)
    product_count = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="productCount"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.FilteredFacetResult(**data)


class GeoJsonPointSchema(GeoJsonSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.GeoJsonPoint(**data)


class GoogleCloudPubSubDestinationSchema(DestinationSchema):
    project_id = marshmallow.fields.String(allow_none=True, data_key="projectId")
    topic = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.GoogleCloudPubSubDestination(**data)


class InsufficientScopeErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InsufficientScopeError(**data)


class InvalidCredentialsErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidCredentialsError(**data)


class InvalidCurrentPasswordErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidCurrentPasswordError(**data)


class InvalidFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True)
    invalid_value = marshmallow.fields.Raw(allow_none=True, data_key="invalidValue")
    allowed_values = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        missing=None,
        data_key="allowedValues",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidFieldError(**data)


class InvalidInputErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidInputError(**data)


class InvalidItemShippingDetailsErrorSchema(ErrorObjectSchema):
    subject = marshmallow.fields.String(allow_none=True)
    item_id = marshmallow.fields.String(allow_none=True, data_key="itemId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidItemShippingDetailsError(**data)


class InvalidOperationErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidOperationError(**data)


class InvalidSubjectErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidSubjectError(**data)


class InvalidTokenErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.InvalidTokenError(**data)


class InventoryEntryDeletedMessageSchema(MessagePayloadSchema):
    sku = marshmallow.fields.String(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.InventoryEntryDeletedMessage(**data)


class InventoryEntrySchema(ResourceSchema):
    sku = marshmallow.fields.String(allow_none=True)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, data_key="quantityOnStock"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="availableQuantity"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays"
    )
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryEntry(**data)


class InventoryPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.InventoryEntrySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryPagedQueryResponse(**data)


class InventoryUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryUpdateAction(**data)


class InventoryUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addQuantity": "commercetools.schemas.InventoryAddQuantityActionSchema",
                "changeQuantity": "commercetools.schemas.InventoryChangeQuantityActionSchema",
                "removeQuantity": "commercetools.schemas.InventoryRemoveQuantityActionSchema",
                "setCustomField": "commercetools.schemas.InventorySetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.InventorySetCustomTypeActionSchema",
                "setExpectedDelivery": "commercetools.schemas.InventorySetExpectedDeliveryActionSchema",
                "setRestockableInDays": "commercetools.schemas.InventorySetRestockableInDaysActionSchema",
                "setSupplyChannel": "commercetools.schemas.InventorySetSupplyChannelActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.InventoryUpdate(**data)


class IronMqDestinationSchema(DestinationSchema):
    uri = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.IronMqDestination(**data)


class LineItemStateTransitionMessageSchema(MessagePayloadSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    transition_date = marshmallow.fields.DateTime(
        allow_none=True, data_key="transitionDate"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.LineItemStateTransitionMessage(**data)


class MessageContextSchema(ResourceSchema):
    sequence_number = marshmallow.fields.Integer(
        allow_none=True, data_key="sequenceNumber"
    )
    resource = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    resource_version = marshmallow.fields.Integer(
        allow_none=True, data_key="resourceVersion"
    )
    type = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MessageContext(**data)


class MessageDeliverySchema(SubscriptionDeliverySchema):
    id = marshmallow.fields.String(allow_none=True)
    version = marshmallow.fields.Integer(allow_none=True)
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, data_key="lastModifiedAt"
    )
    sequence_number = marshmallow.fields.Integer(
        allow_none=True, data_key="sequenceNumber"
    )
    resource_version = marshmallow.fields.Integer(
        allow_none=True, data_key="resourceVersion"
    )
    payload_not_included = marshmallow.fields.Nested(
        nested="commercetools.schemas.PayloadNotIncludedSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="payloadNotIncluded",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["notification_type"]
        return types.MessageDelivery(**data)


class MessagePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.MessageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.MessagePagedQueryResponse(**data)


class MultiBuyCustomLineItemsTargetSchema(CartDiscountTargetSchema):
    predicate = marshmallow.fields.String(allow_none=True)
    trigger_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="triggerQuantity"
    )
    discounted_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="discountedQuantity"
    )
    max_occurrence = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxOccurrence"
    )
    selection_mode = marshmallow_enum.EnumField(
        types.SelectionMode, by_value=True, data_key="selectionMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.MultiBuyCustomLineItemsTarget(**data)


class MultiBuyLineItemsTargetSchema(CartDiscountTargetSchema):
    predicate = marshmallow.fields.String(allow_none=True)
    trigger_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="triggerQuantity"
    )
    discounted_quantity = marshmallow.fields.Integer(
        allow_none=True, data_key="discountedQuantity"
    )
    max_occurrence = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxOccurrence"
    )
    selection_mode = marshmallow_enum.EnumField(
        types.SelectionMode, by_value=True, data_key="selectionMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.MultiBuyLineItemsTarget(**data)


class OrderBillingAddressSetMessageSchema(MessagePayloadSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderBillingAddressSetMessage(**data)


class OrderCreatedMessageSchema(MessagePayloadSchema):
    order = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderCreatedMessage(**data)


class OrderCustomerEmailSetMessageSchema(MessagePayloadSchema):
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderCustomerEmailSetMessage(**data)


class OrderCustomerSetMessageSchema(MessagePayloadSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    old_customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="oldCustomer",
    )
    old_customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="oldCustomerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderCustomerSetMessage(**data)


class OrderDeletedMessageSchema(MessagePayloadSchema):
    order = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderDeletedMessage(**data)


class OrderEditAppliedMessageSchema(MessagePayloadSchema):
    edit = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderEditReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    result = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderEditAppliedSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditAppliedMessage(**data)


class OrderEditAppliedSchema(OrderEditResultSchema):
    applied_at = marshmallow.fields.DateTime(allow_none=True, data_key="appliedAt")
    excerpt_before_edit = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderExcerptSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="excerptBeforeEdit",
    )
    excerpt_after_edit = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderExcerptSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="excerptAfterEdit",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditApplied(**data)


class OrderEditNotProcessedSchema(OrderEditResultSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditNotProcessed(**data)


class OrderEditPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderEditSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderEditPagedQueryResponse(**data)


class OrderEditPreviewFailureSchema(OrderEditResultSchema):
    errors = helpers.Discriminator(
        discriminator_field=("code", "code"),
        discriminator_schemas={
            "access_denied": "commercetools.schemas.AccessDeniedErrorSchema",
            "ConcurrentModification": "commercetools.schemas.ConcurrentModificationErrorSchema",
            "DiscountCodeNonApplicable": "commercetools.schemas.DiscountCodeNonApplicableErrorSchema",
            "DuplicateAttributeValue": "commercetools.schemas.DuplicateAttributeValueErrorSchema",
            "DuplicateAttributeValues": "commercetools.schemas.DuplicateAttributeValuesErrorSchema",
            "DuplicateField": "commercetools.schemas.DuplicateFieldErrorSchema",
            "DuplicatePriceScope": "commercetools.schemas.DuplicatePriceScopeErrorSchema",
            "DuplicateVariantValues": "commercetools.schemas.DuplicateVariantValuesErrorSchema",
            "insufficient_scope": "commercetools.schemas.InsufficientScopeErrorSchema",
            "InvalidCredentials": "commercetools.schemas.InvalidCredentialsErrorSchema",
            "InvalidCurrentPassword": "commercetools.schemas.InvalidCurrentPasswordErrorSchema",
            "InvalidField": "commercetools.schemas.InvalidFieldErrorSchema",
            "InvalidInput": "commercetools.schemas.InvalidInputErrorSchema",
            "InvalidItemShippingDetails": "commercetools.schemas.InvalidItemShippingDetailsErrorSchema",
            "InvalidOperation": "commercetools.schemas.InvalidOperationErrorSchema",
            "InvalidSubject": "commercetools.schemas.InvalidSubjectErrorSchema",
            "invalid_token": "commercetools.schemas.InvalidTokenErrorSchema",
            "OutOfStock": "commercetools.schemas.OutOfStockErrorSchema",
            "PriceChanged": "commercetools.schemas.PriceChangedErrorSchema",
            "RequiredField": "commercetools.schemas.RequiredFieldErrorSchema",
            "ResourceNotFound": "commercetools.schemas.ResourceNotFoundErrorSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditPreviewFailure(**data)


class OrderEditPreviewSuccessSchema(OrderEditResultSchema):
    preview = marshmallow.fields.Nested(
        nested="commercetools.schemas.StagedOrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    message_payloads = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "CategoryCreated": "commercetools.schemas.CategoryCreatedMessageSchema",
            "CategorySlugChanged": "commercetools.schemas.CategorySlugChangedMessageSchema",
            "CustomLineItemStateTransition": "commercetools.schemas.CustomLineItemStateTransitionMessageSchema",
            "CustomerAddressAdded": "commercetools.schemas.CustomerAddressAddedMessageSchema",
            "CustomerAddressChanged": "commercetools.schemas.CustomerAddressChangedMessageSchema",
            "CustomerAddressRemoved": "commercetools.schemas.CustomerAddressRemovedMessageSchema",
            "CustomerCompanyNameSet": "commercetools.schemas.CustomerCompanyNameSetMessageSchema",
            "CustomerCreated": "commercetools.schemas.CustomerCreatedMessageSchema",
            "CustomerDateOfBirthSet": "commercetools.schemas.CustomerDateOfBirthSetMessageSchema",
            "CustomerEmailChanged": "commercetools.schemas.CustomerEmailChangedMessageSchema",
            "CustomerEmailVerified": "commercetools.schemas.CustomerEmailVerifiedMessageSchema",
            "CustomerGroupSet": "commercetools.schemas.CustomerGroupSetMessageSchema",
            "DeliveryAdded": "commercetools.schemas.DeliveryAddedMessageSchema",
            "DeliveryAddressSet": "commercetools.schemas.DeliveryAddressSetMessageSchema",
            "DeliveryItemsUpdated": "commercetools.schemas.DeliveryItemsUpdatedMessageSchema",
            "DeliveryRemoved": "commercetools.schemas.DeliveryRemovedMessageSchema",
            "InventoryEntryDeleted": "commercetools.schemas.InventoryEntryDeletedMessageSchema",
            "LineItemStateTransition": "commercetools.schemas.LineItemStateTransitionMessageSchema",
            "OrderBillingAddressSet": "commercetools.schemas.OrderBillingAddressSetMessageSchema",
            "OrderCreated": "commercetools.schemas.OrderCreatedMessageSchema",
            "OrderCustomerEmailSet": "commercetools.schemas.OrderCustomerEmailSetMessageSchema",
            "OrderCustomerSet": "commercetools.schemas.OrderCustomerSetMessageSchema",
            "OrderDeleted": "commercetools.schemas.OrderDeletedMessageSchema",
            "OrderEditApplied": "commercetools.schemas.OrderEditAppliedMessageSchema",
            "OrderImported": "commercetools.schemas.OrderImportedMessageSchema",
            "OrderPaymentStateChanged": "commercetools.schemas.OrderPaymentChangedMessageSchema",
            "ReturnInfoAdded": "commercetools.schemas.OrderReturnInfoAddedMessageSchema",
            "OrderReturnShipmentStateChanged": "commercetools.schemas.OrderReturnShipmentStateChangedMessageSchema",
            "OrderShipmentStateChanged": "commercetools.schemas.OrderShipmentStateChangedMessageSchema",
            "OrderShippingAddressSet": "commercetools.schemas.OrderShippingAddressSetMessageSchema",
            "OrderStateChanged": "commercetools.schemas.OrderStateChangedMessageSchema",
            "OrderStateTransition": "commercetools.schemas.OrderStateTransitionMessageSchema",
            "ParcelAddedToDelivery": "commercetools.schemas.ParcelAddedToDeliveryMessageSchema",
            "ParcelItemsUpdated": "commercetools.schemas.ParcelItemsUpdatedMessageSchema",
            "ParcelMeasurementsUpdated": "commercetools.schemas.ParcelMeasurementsUpdatedMessageSchema",
            "ParcelRemovedFromDelivery": "commercetools.schemas.ParcelRemovedFromDeliveryMessageSchema",
            "ParcelTrackingDataUpdated": "commercetools.schemas.ParcelTrackingDataUpdatedMessageSchema",
            "PaymentCreated": "commercetools.schemas.PaymentCreatedMessageSchema",
            "PaymentInteractionAdded": "commercetools.schemas.PaymentInteractionAddedMessageSchema",
            "PaymentStatusInterfaceCodeSet": "commercetools.schemas.PaymentStatusInterfaceCodeSetMessageSchema",
            "PaymentStatusStateTransition": "commercetools.schemas.PaymentStatusStateTransitionMessageSchema",
            "PaymentTransactionAdded": "commercetools.schemas.PaymentTransactionAddedMessageSchema",
            "PaymentTransactionStateChanged": "commercetools.schemas.PaymentTransactionStateChangedMessageSchema",
            "ProductCreated": "commercetools.schemas.ProductCreatedMessageSchema",
            "ProductDeleted": "commercetools.schemas.ProductDeletedMessageSchema",
            "ProductImageAdded": "commercetools.schemas.ProductImageAddedMessageSchema",
            "ProductPublished": "commercetools.schemas.ProductPublishedMessageSchema",
            "ProductRevertedStagedChanges": "commercetools.schemas.ProductRevertedStagedChangesMessageSchema",
            "ProductSlugChanged": "commercetools.schemas.ProductSlugChangedMessageSchema",
            "ProductStateTransition": "commercetools.schemas.ProductStateTransitionMessageSchema",
            "ProductUnpublished": "commercetools.schemas.ProductUnpublishedMessageSchema",
            "ProductVariantDeleted": "commercetools.schemas.ProductVariantDeletedMessageSchema",
            "ReviewCreated": "commercetools.schemas.ReviewCreatedMessageSchema",
            "ReviewRatingSet": "commercetools.schemas.ReviewRatingSetMessageSchema",
            "ReviewStateTransition": "commercetools.schemas.ReviewStateTransitionMessageSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="messagePayloads",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderEditPreviewSuccess(**data)


class OrderEditSchema(ResourceSchema):
    created_at = marshmallow.fields.DateTime(allow_none=True, data_key="createdAt")
    last_modified_at = marshmallow.fields.DateTime(
        allow_none=True, data_key="lastModifiedAt"
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)
    resource = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged_actions = helpers.Discriminator(
        discriminator_field=("action", "action"),
        discriminator_schemas={
            "addCustomLineItem": "commercetools.schemas.StagedOrderAddCustomLineItemActionSchema",
            "addDelivery": "commercetools.schemas.StagedOrderAddDeliveryActionSchema",
            "addDiscountCode": "commercetools.schemas.StagedOrderAddDiscountCodeActionSchema",
            "addItemShippingAddress": "commercetools.schemas.StagedOrderAddItemShippingAddressActionSchema",
            "addLineItem": "commercetools.schemas.StagedOrderAddLineItemActionSchema",
            "addParcelToDelivery": "commercetools.schemas.StagedOrderAddParcelToDeliveryActionSchema",
            "addPayment": "commercetools.schemas.StagedOrderAddPaymentActionSchema",
            "addReturnInfo": "commercetools.schemas.StagedOrderAddReturnInfoActionSchema",
            "addShoppingList": "commercetools.schemas.StagedOrderAddShoppingListActionSchema",
            "changeCustomLineItemMoney": "commercetools.schemas.StagedOrderChangeCustomLineItemMoneyActionSchema",
            "changeCustomLineItemQuantity": "commercetools.schemas.StagedOrderChangeCustomLineItemQuantityActionSchema",
            "changeLineItemQuantity": "commercetools.schemas.StagedOrderChangeLineItemQuantityActionSchema",
            "changeOrderState": "commercetools.schemas.StagedOrderChangeOrderStateActionSchema",
            "changePaymentState": "commercetools.schemas.StagedOrderChangePaymentStateActionSchema",
            "changeShipmentState": "commercetools.schemas.StagedOrderChangeShipmentStateActionSchema",
            "changeTaxCalculationMode": "commercetools.schemas.StagedOrderChangeTaxCalculationModeActionSchema",
            "changeTaxMode": "commercetools.schemas.StagedOrderChangeTaxModeActionSchema",
            "changeTaxRoundingMode": "commercetools.schemas.StagedOrderChangeTaxRoundingModeActionSchema",
            "importCustomLineItemState": "commercetools.schemas.StagedOrderImportCustomLineItemStateActionSchema",
            "importLineItemState": "commercetools.schemas.StagedOrderImportLineItemStateActionSchema",
            "removeCustomLineItem": "commercetools.schemas.StagedOrderRemoveCustomLineItemActionSchema",
            "removeDelivery": "commercetools.schemas.StagedOrderRemoveDeliveryActionSchema",
            "removeDiscountCode": "commercetools.schemas.StagedOrderRemoveDiscountCodeActionSchema",
            "removeItemShippingAddress": "commercetools.schemas.StagedOrderRemoveItemShippingAddressActionSchema",
            "removeLineItem": "commercetools.schemas.StagedOrderRemoveLineItemActionSchema",
            "removeParcelFromDelivery": "commercetools.schemas.StagedOrderRemoveParcelFromDeliveryActionSchema",
            "removePayment": "commercetools.schemas.StagedOrderRemovePaymentActionSchema",
            "setBillingAddress": "commercetools.schemas.StagedOrderSetBillingAddressActionSchema",
            "setCountry": "commercetools.schemas.StagedOrderSetCountryActionSchema",
            "setCustomField": "commercetools.schemas.StagedOrderSetCustomFieldActionSchema",
            "setCustomLineItemCustomField": "commercetools.schemas.StagedOrderSetCustomLineItemCustomFieldActionSchema",
            "setCustomLineItemCustomType": "commercetools.schemas.StagedOrderSetCustomLineItemCustomTypeActionSchema",
            "setCustomLineItemShippingDetails": "commercetools.schemas.StagedOrderSetCustomLineItemShippingDetailsActionSchema",
            "setCustomLineItemTaxAmount": "commercetools.schemas.StagedOrderSetCustomLineItemTaxAmountActionSchema",
            "setCustomLineItemTaxRate": "commercetools.schemas.StagedOrderSetCustomLineItemTaxRateActionSchema",
            "setCustomShippingMethod": "commercetools.schemas.StagedOrderSetCustomShippingMethodActionSchema",
            "setCustomType": "commercetools.schemas.StagedOrderSetCustomTypeActionSchema",
            "setCustomerEmail": "commercetools.schemas.StagedOrderSetCustomerEmailActionSchema",
            "setCustomerGroup": "commercetools.schemas.StagedOrderSetCustomerGroupActionSchema",
            "setCustomerId": "commercetools.schemas.StagedOrderSetCustomerIdActionSchema",
            "setDeliveryAddress": "commercetools.schemas.StagedOrderSetDeliveryAddressActionSchema",
            "setDeliveryItems": "commercetools.schemas.StagedOrderSetDeliveryItemsActionSchema",
            "setLineItemCustomField": "commercetools.schemas.StagedOrderSetLineItemCustomFieldActionSchema",
            "setLineItemCustomType": "commercetools.schemas.StagedOrderSetLineItemCustomTypeActionSchema",
            "setLineItemPrice": "commercetools.schemas.StagedOrderSetLineItemPriceActionSchema",
            "setLineItemShippingDetails": "commercetools.schemas.StagedOrderSetLineItemShippingDetailsActionSchema",
            "setLineItemTaxAmount": "commercetools.schemas.StagedOrderSetLineItemTaxAmountActionSchema",
            "setLineItemTaxRate": "commercetools.schemas.StagedOrderSetLineItemTaxRateActionSchema",
            "setLineItemTotalPrice": "commercetools.schemas.StagedOrderSetLineItemTotalPriceActionSchema",
            "setLocale": "commercetools.schemas.StagedOrderSetLocaleActionSchema",
            "setOrderNumber": "commercetools.schemas.StagedOrderSetOrderNumberActionSchema",
            "setOrderTotalTax": "commercetools.schemas.StagedOrderSetOrderTotalTaxActionSchema",
            "setParcelItems": "commercetools.schemas.StagedOrderSetParcelItemsActionSchema",
            "setParcelMeasurements": "commercetools.schemas.StagedOrderSetParcelMeasurementsActionSchema",
            "setParcelTrackingData": "commercetools.schemas.StagedOrderSetParcelTrackingDataActionSchema",
            "setReturnPaymentState": "commercetools.schemas.StagedOrderSetReturnPaymentStateActionSchema",
            "setReturnShipmentState": "commercetools.schemas.StagedOrderSetReturnShipmentStateActionSchema",
            "setShippingAddress": "commercetools.schemas.StagedOrderSetShippingAddressActionSchema",
            "setShippingAddressAndCustomShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndCustomShippingMethodActionSchema",
            "setShippingAddressAndShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndShippingMethodActionSchema",
            "setShippingMethod": "commercetools.schemas.StagedOrderSetShippingMethodActionSchema",
            "setShippingMethodTaxAmount": "commercetools.schemas.StagedOrderSetShippingMethodTaxAmountActionSchema",
            "setShippingMethodTaxRate": "commercetools.schemas.StagedOrderSetShippingMethodTaxRateActionSchema",
            "setShippingRateInput": "commercetools.schemas.StagedOrderSetShippingRateInputActionSchema",
            "transitionCustomLineItemState": "commercetools.schemas.StagedOrderTransitionCustomLineItemStateActionSchema",
            "transitionLineItemState": "commercetools.schemas.StagedOrderTransitionLineItemStateActionSchema",
            "transitionState": "commercetools.schemas.StagedOrderTransitionStateActionSchema",
            "updateItemShippingAddress": "commercetools.schemas.StagedOrderUpdateItemShippingAddressActionSchema",
            "updateSyncInfo": "commercetools.schemas.StagedOrderUpdateSyncInfoActionSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="stagedActions",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    result = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Applied": "commercetools.schemas.OrderEditAppliedSchema",
            "NotProcessed": "commercetools.schemas.OrderEditNotProcessedSchema",
            "PreviewFailure": "commercetools.schemas.OrderEditPreviewFailureSchema",
            "PreviewSuccess": "commercetools.schemas.OrderEditPreviewSuccessSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    comment = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderEdit(**data)


class OrderEditUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditUpdateAction(**data)


class OrderEditUpdateSchema(UpdateSchema):
    actions = helpers.Discriminator(
        discriminator_field=("action", "action"),
        discriminator_schemas={
            "addStagedAction": "commercetools.schemas.OrderEditAddStagedActionActionSchema",
            "setComment": "commercetools.schemas.OrderEditSetCommentActionSchema",
            "setCustomField": "commercetools.schemas.OrderEditSetCustomFieldActionSchema",
            "setCustomType": "commercetools.schemas.OrderEditSetCustomTypeActionSchema",
            "setKey": "commercetools.schemas.OrderEditSetKeyActionSchema",
            "setStagedActions": "commercetools.schemas.OrderEditSetStagedActionsActionSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    dry_run = marshmallow.fields.Bool(allow_none=True, data_key="dryRun")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderEditUpdate(**data)


class OrderImportedMessageSchema(MessagePayloadSchema):
    order = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderImportedMessage(**data)


class OrderPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderPagedQueryResponse(**data)


class OrderPaymentChangedMessageSchema(MessagePayloadSchema):
    payment_state = marshmallow.fields.String(allow_none=True, data_key="paymentState")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderPaymentChangedMessage(**data)


class OrderReturnInfoAddedMessageSchema(MessagePayloadSchema):
    return_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReturnInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="returnInfo",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderReturnInfoAddedMessage(**data)


class OrderReturnShipmentStateChangedMessageSchema(MessagePayloadSchema):
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    return_shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="returnShipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderReturnShipmentStateChangedMessage(**data)


class OrderSchema(ResourceSchema):
    completed_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="completedAt"
    )
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )
    customer_email = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerEmail"
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.LineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="lineItems",
    )
    custom_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="customLineItems",
    )
    total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="totalPrice",
    )
    taxed_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxedPrice",
    )
    shipping_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingAddress",
    )
    billing_address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="billingAddress",
    )
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, missing=None, data_key="taxMode"
    )
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, missing=None, data_key="taxRoundingMode"
    )
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )
    country = marshmallow.fields.String(allow_none=True, missing=None)
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, data_key="orderState"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )
    shipping_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingInfo",
    )
    sync_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.SyncInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="syncInfo",
    )
    return_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReturnInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="returnInfo",
    )
    discount_codes = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="discountCodes",
    )
    last_message_sequence_number = marshmallow.fields.Integer(
        allow_none=True, data_key="lastMessageSequenceNumber"
    )
    cart = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    payment_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="paymentInfo",
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    inventory_mode = marshmallow_enum.EnumField(
        types.InventoryMode, by_value=True, missing=None, data_key="inventoryMode"
    )
    origin = marshmallow_enum.EnumField(types.CartOrigin, by_value=True)
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode,
        by_value=True,
        missing=None,
        data_key="taxCalculationMode",
    )
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas.ClassificationShippingRateInputSchema",
            "Score": "commercetools.schemas.ScoreShippingRateInputSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )
    item_shipping_addresses = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="itemShippingAddresses",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Order(**data)


class OrderShipmentStateChangedMessageSchema(MessagePayloadSchema):
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderShipmentStateChangedMessage(**data)


class OrderShippingAddressSetMessageSchema(MessagePayloadSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderShippingAddressSetMessage(**data)


class OrderStateChangedMessageSchema(MessagePayloadSchema):
    order_state = marshmallow.fields.String(allow_none=True, data_key="orderState")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderStateChangedMessage(**data)


class OrderStateTransitionMessageSchema(MessagePayloadSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.OrderStateTransitionMessage(**data)


class OrderUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateAction(**data)


class OrderUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addDelivery": "commercetools.schemas.OrderAddDeliveryActionSchema",
                "addItemShippingAddress": "commercetools.schemas.OrderAddItemShippingAddressActionSchema",
                "addParcelToDelivery": "commercetools.schemas.OrderAddParcelToDeliveryActionSchema",
                "addPayment": "commercetools.schemas.OrderAddPaymentActionSchema",
                "addReturnInfo": "commercetools.schemas.OrderAddReturnInfoActionSchema",
                "changeOrderState": "commercetools.schemas.OrderChangeOrderStateActionSchema",
                "changePaymentState": "commercetools.schemas.OrderChangePaymentStateActionSchema",
                "changeShipmentState": "commercetools.schemas.OrderChangeShipmentStateActionSchema",
                "importCustomLineItemState": "commercetools.schemas.OrderImportCustomLineItemStateActionSchema",
                "importLineItemState": "commercetools.schemas.OrderImportLineItemStateActionSchema",
                "removeDelivery": "commercetools.schemas.OrderRemoveDeliveryActionSchema",
                "removeItemShippingAddress": "commercetools.schemas.OrderRemoveItemShippingAddressActionSchema",
                "removeParcelFromDelivery": "commercetools.schemas.OrderRemoveParcelFromDeliveryActionSchema",
                "removePayment": "commercetools.schemas.OrderRemovePaymentActionSchema",
                "setBillingAddress": "commercetools.schemas.OrderSetBillingAddressActionSchema",
                "setCustomField": "commercetools.schemas.OrderSetCustomFieldActionSchema",
                "setCustomLineItemCustomField": "commercetools.schemas.OrderSetCustomLineItemCustomFieldActionSchema",
                "setCustomLineItemCustomType": "commercetools.schemas.OrderSetCustomLineItemCustomTypeActionSchema",
                "setCustomLineItemShippingDetails": "commercetools.schemas.OrderSetCustomLineItemShippingDetailsActionSchema",
                "setCustomType": "commercetools.schemas.OrderSetCustomTypeActionSchema",
                "setCustomerEmail": "commercetools.schemas.OrderSetCustomerEmailActionSchema",
                "setCustomerId": "commercetools.schemas.OrderSetCustomerIdActionSchema",
                "setDeliveryAddress": "commercetools.schemas.OrderSetDeliveryAddressActionSchema",
                "setDeliveryItems": "commercetools.schemas.OrderSetDeliveryItemsActionSchema",
                "setLineItemCustomField": "commercetools.schemas.OrderSetLineItemCustomFieldActionSchema",
                "setLineItemCustomType": "commercetools.schemas.OrderSetLineItemCustomTypeActionSchema",
                "setLineItemShippingDetails": "commercetools.schemas.OrderSetLineItemShippingDetailsActionSchema",
                "setLocale": "commercetools.schemas.OrderSetLocaleActionSchema",
                "setOrderNumber": "commercetools.schemas.OrderSetOrderNumberActionSchema",
                "setParcelItems": "commercetools.schemas.OrderSetParcelItemsActionSchema",
                "setParcelMeasurements": "commercetools.schemas.OrderSetParcelMeasurementsActionSchema",
                "setParcelTrackingData": "commercetools.schemas.OrderSetParcelTrackingDataActionSchema",
                "setReturnPaymentState": "commercetools.schemas.OrderSetReturnPaymentStateActionSchema",
                "setReturnShipmentState": "commercetools.schemas.OrderSetReturnShipmentStateActionSchema",
                "setShippingAddress": "commercetools.schemas.OrderSetShippingAddressActionSchema",
                "transitionCustomLineItemState": "commercetools.schemas.OrderTransitionCustomLineItemStateActionSchema",
                "transitionLineItemState": "commercetools.schemas.OrderTransitionLineItemStateActionSchema",
                "transitionState": "commercetools.schemas.OrderTransitionStateActionSchema",
                "updateItemShippingAddress": "commercetools.schemas.OrderUpdateItemShippingAddressActionSchema",
                "updateSyncInfo": "commercetools.schemas.OrderUpdateSyncInfoActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.OrderUpdate(**data)


class OutOfStockErrorSchema(ErrorObjectSchema):
    line_items = marshmallow.fields.String(
        allow_none=True, many=True, data_key="lineItems"
    )
    skus = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.OutOfStockError(**data)


class ParcelAddedToDeliveryMessageSchema(MessagePayloadSchema):
    delivery = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliverySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    parcel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ParcelAddedToDeliveryMessage(**data)


class ParcelItemsUpdatedMessageSchema(MessagePayloadSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    delivery_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="deliveryId"
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ParcelItemsUpdatedMessage(**data)


class ParcelMeasurementsUpdatedMessageSchema(MessagePayloadSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ParcelMeasurementsUpdatedMessage(**data)


class ParcelRemovedFromDeliveryMessageSchema(MessagePayloadSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    parcel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ParcelRemovedFromDeliveryMessage(**data)


class ParcelTrackingDataUpdatedMessageSchema(MessagePayloadSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ParcelTrackingDataUpdatedMessage(**data)


class PaymentCreatedMessageSchema(MessagePayloadSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentCreatedMessage(**data)


class PaymentInteractionAddedMessageSchema(MessagePayloadSchema):
    interaction = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentInteractionAddedMessage(**data)


class PaymentPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentPagedQueryResponse(**data)


class PaymentSchema(ResourceSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    interface_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interfaceId"
    )
    amount_planned = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="amountPlanned",
    )
    amount_authorized = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountAuthorized",
    )
    authorized_until = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="authorizedUntil"
    )
    amount_paid = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountPaid",
    )
    amount_refunded = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "centPrecision": "commercetools.schemas.CentPrecisionMoneySchema",
            "highPrecision": "commercetools.schemas.HighPrecisionMoneySchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="amountRefunded",
    )
    payment_method_info = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentMethodInfoSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="paymentMethodInfo",
    )
    payment_status = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentStatusSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="paymentStatus",
    )
    transactions = marshmallow.fields.Nested(
        nested="commercetools.schemas.TransactionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    interface_interactions = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="interfaceInteractions",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Payment(**data)


class PaymentStatusInterfaceCodeSetMessageSchema(MessagePayloadSchema):
    payment_id = marshmallow.fields.String(allow_none=True, data_key="paymentId")
    interface_code = marshmallow.fields.String(
        allow_none=True, data_key="interfaceCode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentStatusInterfaceCodeSetMessage(**data)


class PaymentStatusStateTransitionMessageSchema(MessagePayloadSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentStatusStateTransitionMessage(**data)


class PaymentTransactionAddedMessageSchema(MessagePayloadSchema):
    transaction = marshmallow.fields.Nested(
        nested="commercetools.schemas.TransactionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentTransactionAddedMessage(**data)


class PaymentTransactionStateChangedMessageSchema(MessagePayloadSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, data_key="transactionId"
    )
    state = marshmallow_enum.EnumField(types.TransactionState, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.PaymentTransactionStateChangedMessage(**data)


class PaymentUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentUpdateAction(**data)


class PaymentUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addInterfaceInteraction": "commercetools.schemas.PaymentAddInterfaceInteractionActionSchema",
                "addTransaction": "commercetools.schemas.PaymentAddTransactionActionSchema",
                "changeAmountPlanned": "commercetools.schemas.PaymentChangeAmountPlannedActionSchema",
                "changeTransactionInteractionId": "commercetools.schemas.PaymentChangeTransactionInteractionIdActionSchema",
                "changeTransactionState": "commercetools.schemas.PaymentChangeTransactionStateActionSchema",
                "changeTransactionTimestamp": "commercetools.schemas.PaymentChangeTransactionTimestampActionSchema",
                "setAmountPaid": "commercetools.schemas.PaymentSetAmountPaidActionSchema",
                "setAmountRefunded": "commercetools.schemas.PaymentSetAmountRefundedActionSchema",
                "setAnonymousId": "commercetools.schemas.PaymentSetAnonymousIdActionSchema",
                "setAuthorization": "commercetools.schemas.PaymentSetAuthorizationActionSchema",
                "setCustomField": "commercetools.schemas.PaymentSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.PaymentSetCustomTypeActionSchema",
                "setCustomer": "commercetools.schemas.PaymentSetCustomerActionSchema",
                "setExternalId": "commercetools.schemas.PaymentSetExternalIdActionSchema",
                "setInterfaceId": "commercetools.schemas.PaymentSetInterfaceIdActionSchema",
                "setKey": "commercetools.schemas.PaymentSetKeyActionSchema",
                "setMethodInfoInterface": "commercetools.schemas.PaymentSetMethodInfoInterfaceActionSchema",
                "setMethodInfoMethod": "commercetools.schemas.PaymentSetMethodInfoMethodActionSchema",
                "setMethodInfoName": "commercetools.schemas.PaymentSetMethodInfoNameActionSchema",
                "setStatusInterfaceCode": "commercetools.schemas.PaymentSetStatusInterfaceCodeActionSchema",
                "setStatusInterfaceText": "commercetools.schemas.PaymentSetStatusInterfaceTextActionSchema",
                "transitionState": "commercetools.schemas.PaymentTransitionStateActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.PaymentUpdate(**data)


class PriceChangedErrorSchema(ErrorObjectSchema):
    line_items = marshmallow.fields.String(
        allow_none=True, many=True, data_key="lineItems"
    )
    shipping = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.PriceChangedError(**data)


class ProductCreatedMessageSchema(MessagePayloadSchema):
    product_projection = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductProjectionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductCreatedMessage(**data)


class ProductDeletedMessageSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        data_key="removedImageUrls",
    )
    current_projection = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductProjectionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="currentProjection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductDeletedMessage(**data)


class ProductDiscountPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductDiscountSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDiscountPagedQueryResponse(**data)


class ProductDiscountSchema(ResourceSchema):
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.ProductDiscountValueAbsoluteSchema",
            "external": "commercetools.schemas.ProductDiscountValueExternalSchema",
            "relative": "commercetools.schemas.ProductDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    predicate = marshmallow.fields.String(allow_none=True)
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")
    references = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDiscount(**data)


class ProductDiscountUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountUpdateAction(**data)


class ProductDiscountUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeIsActive": "commercetools.schemas.ProductDiscountChangeIsActiveActionSchema",
                "changeName": "commercetools.schemas.ProductDiscountChangeNameActionSchema",
                "changePredicate": "commercetools.schemas.ProductDiscountChangePredicateActionSchema",
                "changeSortOrder": "commercetools.schemas.ProductDiscountChangeSortOrderActionSchema",
                "changeValue": "commercetools.schemas.ProductDiscountChangeValueActionSchema",
                "setDescription": "commercetools.schemas.ProductDiscountSetDescriptionActionSchema",
                "setValidFrom": "commercetools.schemas.ProductDiscountSetValidFromActionSchema",
                "setValidFromAndUntil": "commercetools.schemas.ProductDiscountSetValidFromAndUntilActionSchema",
                "setValidUntil": "commercetools.schemas.ProductDiscountSetValidUntilActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductDiscountUpdate(**data)


class ProductDiscountValueAbsoluteSchema(ProductDiscountValueSchema):
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductDiscountValueAbsolute(**data)


class ProductDiscountValueExternalSchema(ProductDiscountValueSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductDiscountValueExternal(**data)


class ProductDiscountValueRelativeSchema(ProductDiscountValueSchema):
    permyriad = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductDiscountValueRelative(**data)


class ProductImageAddedMessageSchema(MessagePayloadSchema):
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")
    image = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductImageAddedMessage(**data)


class ProductPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductPagedQueryResponse(**data)


class ProductProjectionPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductProjectionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductProjectionPagedQueryResponse(**data)


class ProductProjectionPagedSearchResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductProjectionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    facets = marshmallow.fields.Nested(
        nested="commercetools.schemas.FacetResultsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductProjectionPagedSearchResponse(**data)


class ProductProjectionSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productType",
    )
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    slug = LocalizedStringField(allow_none=True)
    categories = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    category_order_hints = CategoryOrderHintsField(
        allow_none=True, missing=None, data_key="categoryOrderHints"
    )
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    search_keywords = marshmallow.fields.Nested(
        nested="commercetools.schemas.SearchKeywordsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="searchKeywords",
    )
    has_staged_changes = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="hasStagedChanges"
    )
    published = marshmallow.fields.Bool(allow_none=True, missing=None)
    master_variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="masterVariant",
    )
    variants = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    review_rating_statistics = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewRatingStatisticsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="reviewRatingStatistics",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductProjection(**data)


class ProductPublishedMessageSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        data_key="removedImageUrls",
    )
    product_projection = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductProjectionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productProjection",
    )
    scope = marshmallow_enum.EnumField(types.ProductPublishScope, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductPublishedMessage(**data)


class ProductRevertedStagedChangesMessageSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        data_key="removedImageUrls",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductRevertedStagedChangesMessage(**data)


class ProductSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    product_type = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="productType",
    )
    master_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductCatalogDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="masterData",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    review_rating_statistics = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewRatingStatisticsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="reviewRatingStatistics",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Product(**data)


class ProductSlugChangedMessageSchema(MessagePayloadSchema):
    slug = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductSlugChangedMessage(**data)


class ProductStateTransitionMessageSchema(MessagePayloadSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductStateTransitionMessage(**data)


class ProductTypePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductTypePagedQueryResponse(**data)


class ProductTypeSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True)
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeDefinitionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductType(**data)


class ProductTypeUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeUpdateAction(**data)


class ProductTypeUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addAttributeDefinition": "commercetools.schemas.ProductTypeAddAttributeDefinitionActionSchema",
                "addLocalizedEnumValue": "commercetools.schemas.ProductTypeAddLocalizedEnumValueActionSchema",
                "addPlainEnumValue": "commercetools.schemas.ProductTypeAddPlainEnumValueActionSchema",
                "changeAttributeConstraint": "commercetools.schemas.ProductTypeChangeAttributeConstraintActionSchema",
                "changeAttributeName": "commercetools.schemas.ProductTypeChangeAttributeNameActionSchema",
                "changeAttributeOrder": "commercetools.schemas.ProductTypeChangeAttributeOrderActionSchema",
                "changeDescription": "commercetools.schemas.ProductTypeChangeDescriptionActionSchema",
                "changeEnumKey": "commercetools.schemas.ProductTypeChangeEnumKeyActionSchema",
                "changeInputHint": "commercetools.schemas.ProductTypeChangeInputHintActionSchema",
                "changeIsSearchable": "commercetools.schemas.ProductTypeChangeIsSearchableActionSchema",
                "changeLabel": "commercetools.schemas.ProductTypeChangeLabelActionSchema",
                "changeLocalizedEnumValueLabel": "commercetools.schemas.ProductTypeChangeLocalizedEnumValueLabelActionSchema",
                "changeLocalizedEnumValueOrder": "commercetools.schemas.ProductTypeChangeLocalizedEnumValueOrderActionSchema",
                "changeName": "commercetools.schemas.ProductTypeChangeNameActionSchema",
                "changePlainEnumValueLabel": "commercetools.schemas.ProductTypeChangePlainEnumValueLabelActionSchema",
                "changePlainEnumValueOrder": "commercetools.schemas.ProductTypeChangePlainEnumValueOrderActionSchema",
                "removeAttributeDefinition": "commercetools.schemas.ProductTypeRemoveAttributeDefinitionActionSchema",
                "removeEnumValues": "commercetools.schemas.ProductTypeRemoveEnumValuesActionSchema",
                "setInputTip": "commercetools.schemas.ProductTypeSetInputTipActionSchema",
                "setKey": "commercetools.schemas.ProductTypeSetKeyActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductTypeUpdate(**data)


class ProductUnpublishedMessageSchema(MessagePayloadSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductUnpublishedMessage(**data)


class ProductUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductUpdateAction(**data)


class ProductUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addAsset": "commercetools.schemas.ProductAddAssetActionSchema",
                "addExternalImage": "commercetools.schemas.ProductAddExternalImageActionSchema",
                "addPrice": "commercetools.schemas.ProductAddPriceActionSchema",
                "addToCategory": "commercetools.schemas.ProductAddToCategoryActionSchema",
                "addVariant": "commercetools.schemas.ProductAddVariantActionSchema",
                "changeAssetName": "commercetools.schemas.ProductChangeAssetNameActionSchema",
                "changeAssetOrder": "commercetools.schemas.ProductChangeAssetOrderActionSchema",
                "changeMasterVariant": "commercetools.schemas.ProductChangeMasterVariantActionSchema",
                "changeName": "commercetools.schemas.ProductChangeNameActionSchema",
                "changePrice": "commercetools.schemas.ProductChangePriceActionSchema",
                "changeSlug": "commercetools.schemas.ProductChangeSlugActionSchema",
                "legacySetSku": "commercetools.schemas.ProductLegacySetSkuActionSchema",
                "moveImageToPosition": "commercetools.schemas.ProductMoveImageToPositionActionSchema",
                "publish": "commercetools.schemas.ProductPublishActionSchema",
                "removeAsset": "commercetools.schemas.ProductRemoveAssetActionSchema",
                "removeFromCategory": "commercetools.schemas.ProductRemoveFromCategoryActionSchema",
                "removeImage": "commercetools.schemas.ProductRemoveImageActionSchema",
                "removePrice": "commercetools.schemas.ProductRemovePriceActionSchema",
                "removeVariant": "commercetools.schemas.ProductRemoveVariantActionSchema",
                "revertStagedChanges": "commercetools.schemas.ProductRevertStagedChangesActionSchema",
                "revertStagedVariantChanges": "commercetools.schemas.ProductRevertStagedVariantChangesActionSchema",
                "setAssetCustomField": "commercetools.schemas.ProductSetAssetCustomFieldActionSchema",
                "setAssetCustomType": "commercetools.schemas.ProductSetAssetCustomTypeActionSchema",
                "setAssetDescription": "commercetools.schemas.ProductSetAssetDescriptionActionSchema",
                "setAssetKey": "commercetools.schemas.ProductSetAssetKeyActionSchema",
                "setAssetSources": "commercetools.schemas.ProductSetAssetSourcesActionSchema",
                "setAssetTags": "commercetools.schemas.ProductSetAssetTagsActionSchema",
                "setAttribute": "commercetools.schemas.ProductSetAttributeActionSchema",
                "setAttributeInAllVariants": "commercetools.schemas.ProductSetAttributeInAllVariantsActionSchema",
                "setCategoryOrderHint": "commercetools.schemas.ProductSetCategoryOrderHintActionSchema",
                "setDescription": "commercetools.schemas.ProductSetDescriptionActionSchema",
                "setDiscountedPrice": "commercetools.schemas.ProductSetDiscountedPriceActionSchema",
                "setImageLabel": "commercetools.schemas.ProductSetImageLabelActionSchema",
                "setKey": "commercetools.schemas.ProductSetKeyActionSchema",
                "setMetaDescription": "commercetools.schemas.ProductSetMetaDescriptionActionSchema",
                "setMetaKeywords": "commercetools.schemas.ProductSetMetaKeywordsActionSchema",
                "setMetaTitle": "commercetools.schemas.ProductSetMetaTitleActionSchema",
                "setPrices": "commercetools.schemas.ProductSetPricesActionSchema",
                "setProductPriceCustomField": "commercetools.schemas.ProductSetProductPriceCustomFieldActionSchema",
                "setProductPriceCustomType": "commercetools.schemas.ProductSetProductPriceCustomTypeActionSchema",
                "setProductVariantKey": "commercetools.schemas.ProductSetProductVariantKeyActionSchema",
                "setSearchKeywords": "commercetools.schemas.ProductSetSearchKeywordsActionSchema",
                "setSku": "commercetools.schemas.ProductSetSkuActionSchema",
                "setTaxCategory": "commercetools.schemas.ProductSetTaxCategoryActionSchema",
                "transitionState": "commercetools.schemas.ProductTransitionStateActionSchema",
                "unpublish": "commercetools.schemas.ProductUnpublishActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProductUpdate(**data)


class ProductVariantDeletedMessageSchema(MessagePayloadSchema):
    removed_image_urls = marshmallow.fields.List(
        marshmallow.fields.Nested(
            nested="commercetools.schemas.anySchema",
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
        data_key="removedImageUrls",
    )
    variant = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductVariantSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ProductVariantDeletedMessage(**data)


class ProjectUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectUpdateAction(**data)


class ProjectUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeCountries": "commercetools.schemas.ProjectChangeCountriesActionSchema",
                "changeCurrencies": "commercetools.schemas.ProjectChangeCurrenciesActionSchema",
                "changeLanguages": "commercetools.schemas.ProjectChangeLanguagesActionSchema",
                "changeMessagesEnabled": "commercetools.schemas.ProjectChangeMessagesEnabledActionSchema",
                "changeName": "commercetools.schemas.ProjectChangeNameActionSchema",
                "setShippingRateInputType": "commercetools.schemas.ProjectSetShippingRateInputTypeActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ProjectUpdate(**data)


class RangeFacetResultSchema(FacetResultSchema):
    ranges = marshmallow.fields.Nested(
        nested="commercetools.schemas.FacetResultRangeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.RangeFacetResult(**data)


class ReferenceSchema(ResourceIdentifierSchema):
    type_id = marshmallow_enum.EnumField(
        types.ReferenceTypeId, by_value=True, missing=None, data_key="typeId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.Reference(**data)


class RequiredFieldErrorSchema(ErrorObjectSchema):
    field = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.RequiredFieldError(**data)


class ResourceCreatedDeliverySchema(SubscriptionDeliverySchema):
    version = marshmallow.fields.Integer(allow_none=True)
    modified_at = marshmallow.fields.DateTime(allow_none=True, data_key="modifiedAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["notification_type"]
        return types.ResourceCreatedDelivery(**data)


class ResourceDeletedDeliverySchema(SubscriptionDeliverySchema):
    version = marshmallow.fields.Integer(allow_none=True)
    modified_at = marshmallow.fields.DateTime(allow_none=True, data_key="modifiedAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["notification_type"]
        return types.ResourceDeletedDelivery(**data)


class ResourceNotFoundErrorSchema(ErrorObjectSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["code"]
        return types.ResourceNotFoundError(**data)


class ResourceUpdatedDeliverySchema(SubscriptionDeliverySchema):
    version = marshmallow.fields.Integer(allow_none=True)
    old_version = marshmallow.fields.Integer(allow_none=True, data_key="oldVersion")
    modified_at = marshmallow.fields.DateTime(allow_none=True, data_key="modifiedAt")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["notification_type"]
        return types.ResourceUpdatedDelivery(**data)


class ReviewCreatedMessageSchema(MessagePayloadSchema):
    review = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ReviewCreatedMessage(**data)


class ReviewPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReviewPagedQueryResponse(**data)


class ReviewRatingSetMessageSchema(MessagePayloadSchema):
    old_rating = marshmallow.fields.Integer(allow_none=True, data_key="oldRating")
    new_rating = marshmallow.fields.Integer(allow_none=True, data_key="newRating")
    included_in_statistics = marshmallow.fields.Bool(
        allow_none=True, data_key="includedInStatistics"
    )
    target = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ReviewRatingSetMessage(**data)


class ReviewSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    uniqueness_value = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="uniquenessValue"
    )
    locale = marshmallow.fields.String(allow_none=True, missing=None)
    author_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="authorName"
    )
    title = marshmallow.fields.String(allow_none=True, missing=None)
    text = marshmallow.fields.String(allow_none=True, missing=None)
    target = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    included_in_statistics = marshmallow.fields.Bool(
        allow_none=True, data_key="includedInStatistics"
    )
    rating = marshmallow.fields.Integer(allow_none=True, missing=None)
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Review(**data)


class ReviewStateTransitionMessageSchema(MessagePayloadSchema):
    old_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="oldState",
    )
    new_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="newState",
    )
    old_included_in_statistics = marshmallow.fields.Bool(
        allow_none=True, data_key="oldIncludedInStatistics"
    )
    new_included_in_statistics = marshmallow.fields.Bool(
        allow_none=True, data_key="newIncludedInStatistics"
    )
    target = helpers.Discriminator(
        discriminator_field=("typeId", "type_id"),
        discriminator_schemas={
            "cart-discount": "commercetools.schemas.CartDiscountReferenceSchema",
            "cart": "commercetools.schemas.CartReferenceSchema",
            "category": "commercetools.schemas.CategoryReferenceSchema",
            "channel": "commercetools.schemas.ChannelReferenceSchema",
            "key-value-document": "commercetools.schemas.CustomObjectReferenceSchema",
            "customer-group": "commercetools.schemas.CustomerGroupReferenceSchema",
            "customer": "commercetools.schemas.CustomerReferenceSchema",
            "discount-code": "commercetools.schemas.DiscountCodeReferenceSchema",
            "inventory-entry": "commercetools.schemas.InventoryEntryReferenceSchema",
            "order-edit": "commercetools.schemas.OrderEditReferenceSchema",
            "order": "commercetools.schemas.OrderReferenceSchema",
            "payment": "commercetools.schemas.PaymentReferenceSchema",
            "product-discount": "commercetools.schemas.ProductDiscountReferenceSchema",
            "product-type": "commercetools.schemas.ProductTypeReferenceSchema",
            "product": "commercetools.schemas.ProductReferenceSchema",
            "review": "commercetools.schemas.ReviewReferenceSchema",
            "shipping-method": "commercetools.schemas.ShippingMethodReferenceSchema",
            "shopping-list": "commercetools.schemas.ShoppingListReferenceSchema",
            "state": "commercetools.schemas.StateReferenceSchema",
            "tax-category": "commercetools.schemas.TaxCategoryReferenceSchema",
            "type": "commercetools.schemas.TypeReferenceSchema",
            "zone": "commercetools.schemas.ZoneReferenceSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ReviewStateTransitionMessage(**data)


class ReviewUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewUpdateAction(**data)


class ReviewUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "setAuthorName": "commercetools.schemas.ReviewSetAuthorNameActionSchema",
                "setCustomField": "commercetools.schemas.ReviewSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.ReviewSetCustomTypeActionSchema",
                "setCustomer": "commercetools.schemas.ReviewSetCustomerActionSchema",
                "setKey": "commercetools.schemas.ReviewSetKeyActionSchema",
                "setLocale": "commercetools.schemas.ReviewSetLocaleActionSchema",
                "setRating": "commercetools.schemas.ReviewSetRatingActionSchema",
                "setTarget": "commercetools.schemas.ReviewSetTargetActionSchema",
                "setText": "commercetools.schemas.ReviewSetTextActionSchema",
                "setTitle": "commercetools.schemas.ReviewSetTitleActionSchema",
                "transitionState": "commercetools.schemas.ReviewTransitionStateActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ReviewUpdate(**data)


class ScoreShippingRateInputDraftSchema(ShippingRateInputDraftSchema):
    score = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ScoreShippingRateInputDraft(**data)


class ScoreShippingRateInputSchema(ShippingRateInputSchema):
    score = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.ScoreShippingRateInput(**data)


class ShippingMethodPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingMethodPagedQueryResponse(**data)


class ShippingMethodSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxCategory",
    )
    zone_rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="zoneRates",
    )
    is_default = marshmallow.fields.Bool(allow_none=True, data_key="isDefault")
    predicate = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingMethod(**data)


class ShippingMethodUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodUpdateAction(**data)


class ShippingMethodUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addShippingRate": "commercetools.schemas.ShippingMethodAddShippingRateActionSchema",
                "addZone": "commercetools.schemas.ShippingMethodAddZoneActionSchema",
                "changeIsDefault": "commercetools.schemas.ShippingMethodChangeIsDefaultActionSchema",
                "changeName": "commercetools.schemas.ShippingMethodChangeNameActionSchema",
                "changeTaxCategory": "commercetools.schemas.ShippingMethodChangeTaxCategoryActionSchema",
                "removeShippingRate": "commercetools.schemas.ShippingMethodRemoveShippingRateActionSchema",
                "removeZone": "commercetools.schemas.ShippingMethodRemoveZoneActionSchema",
                "setDescription": "commercetools.schemas.ShippingMethodSetDescriptionActionSchema",
                "setKey": "commercetools.schemas.ShippingMethodSetKeyActionSchema",
                "setPredicate": "commercetools.schemas.ShippingMethodSetPredicateActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShippingMethodUpdate(**data)


class ShoppingListPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingListPagedQueryResponse(**data)


class ShoppingListSchema(ResourceSchema):
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )
    description = LocalizedStringField(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="lineItems",
    )
    name = LocalizedStringField(allow_none=True)
    slug = LocalizedStringField(allow_none=True, missing=None)
    text_line_items = marshmallow.fields.Nested(
        nested="commercetools.schemas.TextLineItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="textLineItems",
    )
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingList(**data)


class ShoppingListUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListUpdateAction(**data)


class ShoppingListUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addLineItem": "commercetools.schemas.ShoppingListAddLineItemActionSchema",
                "addTextLineItem": "commercetools.schemas.ShoppingListAddTextLineItemActionSchema",
                "changeLineItemQuantity": "commercetools.schemas.ShoppingListChangeLineItemQuantityActionSchema",
                "changeLineItemsOrder": "commercetools.schemas.ShoppingListChangeLineItemsOrderActionSchema",
                "changeName": "commercetools.schemas.ShoppingListChangeNameActionSchema",
                "changeTextLineItemName": "commercetools.schemas.ShoppingListChangeTextLineItemNameActionSchema",
                "changeTextLineItemQuantity": "commercetools.schemas.ShoppingListChangeTextLineItemQuantityActionSchema",
                "changeTextLineItemsOrder": "commercetools.schemas.ShoppingListChangeTextLineItemsOrderActionSchema",
                "removeLineItem": "commercetools.schemas.ShoppingListRemoveLineItemActionSchema",
                "removeTextLineItem": "commercetools.schemas.ShoppingListRemoveTextLineItemActionSchema",
                "setAnonymousId": "commercetools.schemas.ShoppingListSetAnonymousIdActionSchema",
                "setCustomField": "commercetools.schemas.ShoppingListSetCustomFieldActionSchema",
                "setCustomType": "commercetools.schemas.ShoppingListSetCustomTypeActionSchema",
                "setCustomer": "commercetools.schemas.ShoppingListSetCustomerActionSchema",
                "setDeleteDaysAfterLastModification": "commercetools.schemas.ShoppingListSetDeleteDaysAfterLastModificationActionSchema",
                "setDescription": "commercetools.schemas.ShoppingListSetDescriptionActionSchema",
                "setKey": "commercetools.schemas.ShoppingListSetKeyActionSchema",
                "setLineItemCustomField": "commercetools.schemas.ShoppingListSetLineItemCustomFieldActionSchema",
                "setLineItemCustomType": "commercetools.schemas.ShoppingListSetLineItemCustomTypeActionSchema",
                "setSlug": "commercetools.schemas.ShoppingListSetSlugActionSchema",
                "setTextLineItemCustomField": "commercetools.schemas.ShoppingListSetTextLineItemCustomFieldActionSchema",
                "setTextLineItemCustomType": "commercetools.schemas.ShoppingListSetTextLineItemCustomTypeActionSchema",
                "setTextLineItemDescription": "commercetools.schemas.ShoppingListSetTextLineItemDescriptionActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ShoppingListUpdate(**data)


class SnsDestinationSchema(DestinationSchema):
    access_key = marshmallow.fields.String(allow_none=True, data_key="accessKey")
    access_secret = marshmallow.fields.String(allow_none=True, data_key="accessSecret")
    topic_arn = marshmallow.fields.String(allow_none=True, data_key="topicArn")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.SnsDestination(**data)


class SqsDestinationSchema(DestinationSchema):
    access_key = marshmallow.fields.String(allow_none=True, data_key="accessKey")
    access_secret = marshmallow.fields.String(allow_none=True, data_key="accessSecret")
    queue_url = marshmallow.fields.String(allow_none=True, data_key="queueURL")
    region = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.SqsDestination(**data)


class StagedOrderAddCustomLineItemActionSchema(StagedOrderUpdateActionSchema):
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    slug = marshmallow.fields.String(allow_none=True)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddCustomLineItemAction(**data)


class StagedOrderAddDeliveryActionSchema(StagedOrderUpdateActionSchema):
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    parcels = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddDeliveryAction(**data)


class StagedOrderAddDiscountCodeActionSchema(StagedOrderUpdateActionSchema):
    code = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddDiscountCodeAction(**data)


class StagedOrderAddItemShippingAddressActionSchema(StagedOrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddItemShippingAddressAction(**data)


class StagedOrderAddLineItemActionSchema(StagedOrderUpdateActionSchema):
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddLineItemAction(**data)


class StagedOrderAddParcelToDeliveryActionSchema(StagedOrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddParcelToDeliveryAction(**data)


class StagedOrderAddPaymentActionSchema(StagedOrderUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddPaymentAction(**data)


class StagedOrderAddReturnInfoActionSchema(StagedOrderUpdateActionSchema):
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="returnTrackingId"
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReturnItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    return_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddReturnInfoAction(**data)


class StagedOrderAddShoppingListActionSchema(StagedOrderUpdateActionSchema):
    shopping_list = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shoppingList",
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderAddShoppingListAction(**data)


class StagedOrderChangeCustomLineItemMoneyActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeCustomLineItemMoneyAction(**data)


class StagedOrderChangeCustomLineItemQuantityActionSchema(
    StagedOrderUpdateActionSchema
):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeCustomLineItemQuantityAction(**data)


class StagedOrderChangeLineItemQuantityActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeLineItemQuantityAction(**data)


class StagedOrderChangeOrderStateActionSchema(StagedOrderUpdateActionSchema):
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, data_key="orderState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeOrderStateAction(**data)


class StagedOrderChangePaymentStateActionSchema(StagedOrderUpdateActionSchema):
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangePaymentStateAction(**data)


class StagedOrderChangeShipmentStateActionSchema(StagedOrderUpdateActionSchema):
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeShipmentStateAction(**data)


class StagedOrderChangeTaxCalculationModeActionSchema(StagedOrderUpdateActionSchema):
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode, by_value=True, data_key="taxCalculationMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeTaxCalculationModeAction(**data)


class StagedOrderChangeTaxModeActionSchema(StagedOrderUpdateActionSchema):
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeTaxModeAction(**data)


class StagedOrderChangeTaxRoundingModeActionSchema(StagedOrderUpdateActionSchema):
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, data_key="taxRoundingMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderChangeTaxRoundingModeAction(**data)


class StagedOrderImportCustomLineItemStateActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderImportCustomLineItemStateAction(**data)


class StagedOrderImportLineItemStateActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderImportLineItemStateAction(**data)


class StagedOrderRemoveCustomLineItemActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveCustomLineItemAction(**data)


class StagedOrderRemoveDeliveryActionSchema(StagedOrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveDeliveryAction(**data)


class StagedOrderRemoveDiscountCodeActionSchema(StagedOrderUpdateActionSchema):
    discount_code = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveDiscountCodeAction(**data)


class StagedOrderRemoveItemShippingAddressActionSchema(StagedOrderUpdateActionSchema):
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveItemShippingAddressAction(**data)


class StagedOrderRemoveLineItemActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )
    shipping_details_to_remove = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetailsToRemove",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveLineItemAction(**data)


class StagedOrderRemoveParcelFromDeliveryActionSchema(StagedOrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemoveParcelFromDeliveryAction(**data)


class StagedOrderRemovePaymentActionSchema(StagedOrderUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderRemovePaymentAction(**data)


class StagedOrderSetBillingAddressActionSchema(StagedOrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetBillingAddressAction(**data)


class StagedOrderSetCountryActionSchema(StagedOrderUpdateActionSchema):
    country = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCountryAction(**data)


class StagedOrderSetCustomFieldActionSchema(StagedOrderUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomFieldAction(**data)


class StagedOrderSetCustomLineItemCustomFieldActionSchema(
    StagedOrderUpdateActionSchema
):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomLineItemCustomFieldAction(**data)


class StagedOrderSetCustomLineItemCustomTypeActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomLineItemCustomTypeAction(**data)


class StagedOrderSetCustomLineItemShippingDetailsActionSchema(
    StagedOrderUpdateActionSchema
):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomLineItemShippingDetailsAction(**data)


class StagedOrderSetCustomLineItemTaxAmountActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomLineItemTaxAmountAction(**data)


class StagedOrderSetCustomLineItemTaxRateActionSchema(StagedOrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomLineItemTaxRateAction(**data)


class StagedOrderSetCustomShippingMethodActionSchema(StagedOrderUpdateActionSchema):
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomShippingMethodAction(**data)


class StagedOrderSetCustomTypeActionSchema(StagedOrderUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomTypeAction(**data)


class StagedOrderSetCustomerEmailActionSchema(StagedOrderUpdateActionSchema):
    email = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomerEmailAction(**data)


class StagedOrderSetCustomerGroupActionSchema(StagedOrderUpdateActionSchema):
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomerGroupAction(**data)


class StagedOrderSetCustomerIdActionSchema(StagedOrderUpdateActionSchema):
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetCustomerIdAction(**data)


class StagedOrderSetDeliveryAddressActionSchema(StagedOrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetDeliveryAddressAction(**data)


class StagedOrderSetDeliveryItemsActionSchema(StagedOrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetDeliveryItemsAction(**data)


class StagedOrderSetLineItemCustomFieldActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemCustomFieldAction(**data)


class StagedOrderSetLineItemCustomTypeActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemCustomTypeAction(**data)


class StagedOrderSetLineItemPriceActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemPriceAction(**data)


class StagedOrderSetLineItemShippingDetailsActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemShippingDetailsAction(**data)


class StagedOrderSetLineItemTaxAmountActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemTaxAmountAction(**data)


class StagedOrderSetLineItemTaxRateActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemTaxRateAction(**data)


class StagedOrderSetLineItemTotalPriceActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLineItemTotalPriceAction(**data)


class StagedOrderSetLocaleActionSchema(StagedOrderUpdateActionSchema):
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetLocaleAction(**data)


class StagedOrderSetOrderNumberActionSchema(StagedOrderUpdateActionSchema):
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetOrderNumberAction(**data)


class StagedOrderSetOrderTotalTaxActionSchema(StagedOrderUpdateActionSchema):
    external_total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="externalTotalGross",
    )
    external_tax_portions = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="externalTaxPortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetOrderTotalTaxAction(**data)


class StagedOrderSetParcelItemsActionSchema(StagedOrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetParcelItemsAction(**data)


class StagedOrderSetParcelMeasurementsActionSchema(StagedOrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetParcelMeasurementsAction(**data)


class StagedOrderSetParcelTrackingDataActionSchema(StagedOrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetParcelTrackingDataAction(**data)


class StagedOrderSetReturnPaymentStateActionSchema(StagedOrderUpdateActionSchema):
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    payment_state = marshmallow_enum.EnumField(
        types.ReturnPaymentState, by_value=True, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetReturnPaymentStateAction(**data)


class StagedOrderSetReturnShipmentStateActionSchema(StagedOrderUpdateActionSchema):
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetReturnShipmentStateAction(**data)


class StagedOrderSetShippingAddressActionSchema(StagedOrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingAddressAction(**data)


class StagedOrderSetShippingAddressAndCustomShippingMethodActionSchema(
    StagedOrderUpdateActionSchema
):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingAddressAndCustomShippingMethodAction(**data)


class StagedOrderSetShippingAddressAndShippingMethodActionSchema(
    StagedOrderUpdateActionSchema
):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingAddressAndShippingMethodAction(**data)


class StagedOrderSetShippingMethodActionSchema(StagedOrderUpdateActionSchema):
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingMethodAction(**data)


class StagedOrderSetShippingMethodTaxAmountActionSchema(StagedOrderUpdateActionSchema):
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingMethodTaxAmountAction(**data)


class StagedOrderSetShippingMethodTaxRateActionSchema(StagedOrderUpdateActionSchema):
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingMethodTaxRateAction(**data)


class StagedOrderSetShippingRateInputActionSchema(StagedOrderUpdateActionSchema):
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas.ClassificationShippingRateInputDraftSchema",
            "Score": "commercetools.schemas.ScoreShippingRateInputDraftSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderSetShippingRateInputAction(**data)


class StagedOrderTransitionCustomLineItemStateActionSchema(
    StagedOrderUpdateActionSchema
):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderTransitionCustomLineItemStateAction(**data)


class StagedOrderTransitionLineItemStateActionSchema(StagedOrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderTransitionLineItemStateAction(**data)


class StagedOrderTransitionStateActionSchema(StagedOrderUpdateActionSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderTransitionStateAction(**data)


class StagedOrderUpdateItemShippingAddressActionSchema(StagedOrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderUpdateItemShippingAddressAction(**data)


class StagedOrderUpdateSyncInfoActionSchema(StagedOrderUpdateActionSchema):
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="syncedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StagedOrderUpdateSyncInfoAction(**data)


class StatePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.StatePagedQueryResponse(**data)


class StateSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True)
    type = marshmallow_enum.EnumField(types.StateTypeEnum, by_value=True)
    name = LocalizedStringField(allow_none=True, missing=None)
    description = LocalizedStringField(allow_none=True, missing=None)
    initial = marshmallow.fields.Bool(allow_none=True)
    built_in = marshmallow.fields.Bool(allow_none=True, data_key="builtIn")
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.StateRoleEnum, by_value=True), missing=None
    )
    transitions = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.State(**data)


class StateUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateUpdateAction(**data)


class StateUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addRoles": "commercetools.schemas.StateAddRolesActionSchema",
                "changeInitial": "commercetools.schemas.StateChangeInitialActionSchema",
                "changeKey": "commercetools.schemas.StateChangeKeyActionSchema",
                "changeType": "commercetools.schemas.StateChangeTypeActionSchema",
                "removeRoles": "commercetools.schemas.StateRemoveRolesActionSchema",
                "setDescription": "commercetools.schemas.StateSetDescriptionActionSchema",
                "setName": "commercetools.schemas.StateSetNameActionSchema",
                "setRoles": "commercetools.schemas.StateSetRolesActionSchema",
                "setTransitions": "commercetools.schemas.StateSetTransitionsActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.StateUpdate(**data)


class SubscriptionPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.SubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SubscriptionPagedQueryResponse(**data)


class SubscriptionSchema(ResourceSchema):
    changes = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChangeSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "EventGrid": "commercetools.schemas.AzureEventGridDestinationSchema",
            "AzureServiceBus": "commercetools.schemas.AzureServiceBusDestinationSchema",
            "GoogleCloudPubSub": "commercetools.schemas.GoogleCloudPubSubDestinationSchema",
            "IronMQ": "commercetools.schemas.IronMqDestinationSchema",
            "SNS": "commercetools.schemas.SnsDestinationSchema",
            "SQS": "commercetools.schemas.SqsDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)
    messages = marshmallow.fields.Nested(
        nested="commercetools.schemas.MessageSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Subscription(**data)


class SubscriptionUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.SubscriptionUpdateAction(**data)


class SubscriptionUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "changeDestination": "commercetools.schemas.SubscriptionChangeDestinationActionSchema",
                "setChanges": "commercetools.schemas.SubscriptionSetChangesActionSchema",
                "setKey": "commercetools.schemas.SubscriptionSetKeyActionSchema",
                "setMessages": "commercetools.schemas.SubscriptionSetMessagesActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.SubscriptionUpdate(**data)


class TaxCategoryPagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategorySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxCategoryPagedQueryResponse(**data)


class TaxCategorySchema(ResourceSchema):
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    rates = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxCategory(**data)


class TaxCategoryUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategoryUpdateAction(**data)


class TaxCategoryUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addTaxRate": "commercetools.schemas.TaxCategoryAddTaxRateActionSchema",
                "changeName": "commercetools.schemas.TaxCategoryChangeNameActionSchema",
                "removeTaxRate": "commercetools.schemas.TaxCategoryRemoveTaxRateActionSchema",
                "replaceTaxRate": "commercetools.schemas.TaxCategoryReplaceTaxRateActionSchema",
                "setDescription": "commercetools.schemas.TaxCategorySetDescriptionActionSchema",
                "setKey": "commercetools.schemas.TaxCategorySetKeyActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TaxCategoryUpdate(**data)


class TermFacetResultSchema(FacetResultSchema):
    data_type = marshmallow_enum.EnumField(
        types.TermFacetResultType, by_value=True, data_key="dataType"
    )
    missing = marshmallow.fields.Integer(allow_none=True)
    total = marshmallow.fields.Integer(allow_none=True)
    other = marshmallow.fields.Integer(allow_none=True)
    terms = marshmallow.fields.Nested(
        nested="commercetools.schemas.FacetResultTermSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.TermFacetResult(**data)


class TypePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TypePagedQueryResponse(**data)


class TypeSchema(ResourceSchema):
    key = marshmallow.fields.String(allow_none=True)
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    resource_type_ids = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ResourceTypeId, by_value=True),
        data_key="resourceTypeIds",
    )
    field_definitions = marshmallow.fields.Nested(
        nested="commercetools.schemas.FieldDefinitionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="fieldDefinitions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Type(**data)


class TypeUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeUpdateAction(**data)


class TypeUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addEnumValue": "commercetools.schemas.TypeAddEnumValueActionSchema",
                "addFieldDefinition": "commercetools.schemas.TypeAddFieldDefinitionActionSchema",
                "addLocalizedEnumValue": "commercetools.schemas.TypeAddLocalizedEnumValueActionSchema",
                "changeEnumValueOrder": "commercetools.schemas.TypeChangeEnumValueOrderActionSchema",
                "changeFieldDefinitionLabel": "commercetools.schemas.TypeChangeFieldDefinitionLabelActionSchema",
                "changeFieldDefinitionOrder": "commercetools.schemas.TypeChangeFieldDefinitionOrderActionSchema",
                "changeKey": "commercetools.schemas.TypeChangeKeyActionSchema",
                "changeLabel": "commercetools.schemas.TypeChangeLabelActionSchema",
                "changeLocalizedEnumValueOrder": "commercetools.schemas.TypeChangeLocalizedEnumValueOrderActionSchema",
                "changeName": "commercetools.schemas.TypeChangeNameActionSchema",
                "removeFieldDefinition": "commercetools.schemas.TypeRemoveFieldDefinitionActionSchema",
                "setDescription": "commercetools.schemas.TypeSetDescriptionActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.TypeUpdate(**data)


class TypedMoneySchema(MoneySchema):
    type = marshmallow_enum.EnumField(types.MoneyType, by_value=True)
    fraction_digits = marshmallow.fields.Integer(
        allow_none=True, data_key="fractionDigits"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.TypedMoney(**data)


class WhitespaceTokenizerSchema(SuggestTokenizerSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.WhitespaceTokenizer(**data)


class ZonePagedQueryResponseSchema(PagedQueryResponseSchema):
    results = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ZonePagedQueryResponse(**data)


class ZoneSchema(ResourceSchema):
    name = marshmallow.fields.String(allow_none=True)
    description = marshmallow.fields.String(allow_none=True, missing=None)
    locations = marshmallow.fields.Nested(
        nested="commercetools.schemas.LocationSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Zone(**data)


class ZoneUpdateActionSchema(UpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ZoneUpdateAction(**data)


class ZoneUpdateSchema(UpdateSchema):
    actions = marshmallow.fields.List(
        helpers.Discriminator(
            discriminator_field=("action", "action"),
            discriminator_schemas={
                "addLocation": "commercetools.schemas.ZoneAddLocationActionSchema",
                "changeName": "commercetools.schemas.ZoneChangeNameActionSchema",
                "removeLocation": "commercetools.schemas.ZoneRemoveLocationActionSchema",
                "setDescription": "commercetools.schemas.ZoneSetDescriptionActionSchema",
            },
            unknown=marshmallow.EXCLUDE,
            allow_none=True,
        ),
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.ZoneUpdate(**data)


class CartAddCustomLineItemActionSchema(CartUpdateActionSchema):
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    name = LocalizedStringField(allow_none=True)
    quantity = marshmallow.fields.Integer(allow_none=True)
    slug = marshmallow.fields.String(allow_none=True)
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddCustomLineItemAction(**data)


class CartAddDiscountCodeActionSchema(CartUpdateActionSchema):
    code = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddDiscountCodeAction(**data)


class CartAddItemShippingAddressActionSchema(CartUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddItemShippingAddressAction(**data)


class CartAddLineItemActionSchema(CartUpdateActionSchema):
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddLineItemAction(**data)


class CartAddPaymentActionSchema(CartUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddPaymentAction(**data)


class CartAddShoppingListActionSchema(CartUpdateActionSchema):
    shopping_list = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shoppingList",
    )
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )
    distribution_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartAddShoppingListAction(**data)


class CartApplyDeltaToCustomLineItemShippingDetailsTargetsActionSchema(
    CartUpdateActionSchema
):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    targets_delta = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="targetsDelta",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartApplyDeltaToCustomLineItemShippingDetailsTargetsAction(**data)


class CartApplyDeltaToLineItemShippingDetailsTargetsActionSchema(
    CartUpdateActionSchema
):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    targets_delta = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingTargetSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="targetsDelta",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartApplyDeltaToLineItemShippingDetailsTargetsAction(**data)


class CartChangeCustomLineItemMoneyActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    money = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeCustomLineItemMoneyAction(**data)


class CartChangeCustomLineItemQuantityActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeCustomLineItemQuantityAction(**data)


class CartChangeLineItemQuantityActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeLineItemQuantityAction(**data)


class CartChangeTaxCalculationModeActionSchema(CartUpdateActionSchema):
    tax_calculation_mode = marshmallow_enum.EnumField(
        types.TaxCalculationMode, by_value=True, data_key="taxCalculationMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxCalculationModeAction(**data)


class CartChangeTaxModeActionSchema(CartUpdateActionSchema):
    tax_mode = marshmallow_enum.EnumField(
        types.TaxMode, by_value=True, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxModeAction(**data)


class CartChangeTaxRoundingModeActionSchema(CartUpdateActionSchema):
    tax_rounding_mode = marshmallow_enum.EnumField(
        types.RoundingMode, by_value=True, data_key="taxRoundingMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartChangeTaxRoundingModeAction(**data)


class CartDiscountChangeCartPredicateActionSchema(CartDiscountUpdateActionSchema):
    cart_predicate = marshmallow.fields.String(
        allow_none=True, data_key="cartPredicate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeCartPredicateAction(**data)


class CartDiscountChangeIsActiveActionSchema(CartDiscountUpdateActionSchema):
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeIsActiveAction(**data)


class CartDiscountChangeNameActionSchema(CartDiscountUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeNameAction(**data)


class CartDiscountChangeRequiresDiscountCodeActionSchema(
    CartDiscountUpdateActionSchema
):
    requires_discount_code = marshmallow.fields.Bool(
        allow_none=True, data_key="requiresDiscountCode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeRequiresDiscountCodeAction(**data)


class CartDiscountChangeSortOrderActionSchema(CartDiscountUpdateActionSchema):
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeSortOrderAction(**data)


class CartDiscountChangeStackingModeActionSchema(CartDiscountUpdateActionSchema):
    stacking_mode = marshmallow_enum.EnumField(
        types.StackingMode, by_value=True, data_key="stackingMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeStackingModeAction(**data)


class CartDiscountChangeTargetActionSchema(CartDiscountUpdateActionSchema):
    target = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "customLineItems": "commercetools.schemas.CartDiscountCustomLineItemsTargetSchema",
            "lineItems": "commercetools.schemas.CartDiscountLineItemsTargetSchema",
            "shipping": "commercetools.schemas.CartDiscountShippingCostTargetSchema",
            "multiBuyCustomLineItems": "commercetools.schemas.MultiBuyCustomLineItemsTargetSchema",
            "multiBuyLineItems": "commercetools.schemas.MultiBuyLineItemsTargetSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeTargetAction(**data)


class CartDiscountChangeValueActionSchema(CartDiscountUpdateActionSchema):
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.CartDiscountValueAbsoluteSchema",
            "giftLineItem": "commercetools.schemas.CartDiscountValueGiftLineItemSchema",
            "relative": "commercetools.schemas.CartDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountChangeValueAction(**data)


class CartDiscountReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CartDiscountReference(**data)


class CartDiscountSetCustomFieldActionSchema(CartDiscountUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetCustomFieldAction(**data)


class CartDiscountSetCustomTypeActionSchema(CartDiscountUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = marshmallow.fields.Dict(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetCustomTypeAction(**data)


class CartDiscountSetDescriptionActionSchema(CartDiscountUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetDescriptionAction(**data)


class CartDiscountSetValidFromActionSchema(CartDiscountUpdateActionSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetValidFromAction(**data)


class CartDiscountSetValidFromAndUntilActionSchema(CartDiscountUpdateActionSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetValidFromAndUntilAction(**data)


class CartDiscountSetValidUntilActionSchema(CartDiscountUpdateActionSchema):
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartDiscountSetValidUntilAction(**data)


class CartRecalculateActionSchema(CartUpdateActionSchema):
    update_product_data = marshmallow.fields.Bool(
        allow_none=True, missing=None, data_key="updateProductData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRecalculateAction(**data)


class CartReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CartReference(**data)


class CartRemoveCustomLineItemActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveCustomLineItemAction(**data)


class CartRemoveDiscountCodeActionSchema(CartUpdateActionSchema):
    discount_code = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="discountCode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveDiscountCodeAction(**data)


class CartRemoveItemShippingAddressActionSchema(CartUpdateActionSchema):
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveItemShippingAddressAction(**data)


class CartRemoveLineItemActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )
    shipping_details_to_remove = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetailsToRemove",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemoveLineItemAction(**data)


class CartRemovePaymentActionSchema(CartUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartRemovePaymentAction(**data)


class CartSetAnonymousIdActionSchema(CartUpdateActionSchema):
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetAnonymousIdAction(**data)


class CartSetBillingAddressActionSchema(CartUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetBillingAddressAction(**data)


class CartSetCartTotalTaxActionSchema(CartUpdateActionSchema):
    external_total_gross = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="externalTotalGross",
    )
    external_tax_portions = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxPortionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
        data_key="externalTaxPortions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCartTotalTaxAction(**data)


class CartSetCountryActionSchema(CartUpdateActionSchema):
    country = marshmallow.fields.String(missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCountryAction(**data)


class CartSetCustomFieldActionSchema(CartUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomFieldAction(**data)


class CartSetCustomLineItemCustomFieldActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemCustomFieldAction(**data)


class CartSetCustomLineItemCustomTypeActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemCustomTypeAction(**data)


class CartSetCustomLineItemShippingDetailsActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemShippingDetailsAction(**data)


class CartSetCustomLineItemTaxAmountActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemTaxAmountAction(**data)


class CartSetCustomLineItemTaxRateActionSchema(CartUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomLineItemTaxRateAction(**data)


class CartSetCustomShippingMethodActionSchema(CartUpdateActionSchema):
    shipping_method_name = marshmallow.fields.String(
        allow_none=True, data_key="shippingMethodName"
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomShippingMethodAction(**data)


class CartSetCustomTypeActionSchema(CartUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomTypeAction(**data)


class CartSetCustomerEmailActionSchema(CartUpdateActionSchema):
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerEmailAction(**data)


class CartSetCustomerGroupActionSchema(CartUpdateActionSchema):
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerGroupAction(**data)


class CartSetCustomerIdActionSchema(CartUpdateActionSchema):
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetCustomerIdAction(**data)


class CartSetDeleteDaysAfterLastModificationActionSchema(CartUpdateActionSchema):
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetDeleteDaysAfterLastModificationAction(**data)


class CartSetLineItemCustomFieldActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemCustomFieldAction(**data)


class CartSetLineItemCustomTypeActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemCustomTypeAction(**data)


class CartSetLineItemPriceActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemPriceAction(**data)


class CartSetLineItemShippingDetailsActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemShippingDetailsAction(**data)


class CartSetLineItemTaxAmountActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTaxAmountAction(**data)


class CartSetLineItemTaxRateActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTaxRateAction(**data)


class CartSetLineItemTotalPriceActionSchema(CartUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    external_total_price = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalLineItemTotalPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTotalPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLineItemTotalPriceAction(**data)


class CartSetLocaleActionSchema(CartUpdateActionSchema):
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetLocaleAction(**data)


class CartSetShippingAddressActionSchema(CartUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingAddressAction(**data)


class CartSetShippingMethodActionSchema(CartUpdateActionSchema):
    shipping_method = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingMethod",
    )
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodAction(**data)


class CartSetShippingMethodTaxAmountActionSchema(CartUpdateActionSchema):
    external_tax_amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxAmountDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodTaxAmountAction(**data)


class CartSetShippingMethodTaxRateActionSchema(CartUpdateActionSchema):
    external_tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExternalTaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="externalTaxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingMethodTaxRateAction(**data)


class CartSetShippingRateInputActionSchema(CartUpdateActionSchema):
    shipping_rate_input = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "Classification": "commercetools.schemas.ClassificationShippingRateInputDraftSchema",
            "Score": "commercetools.schemas.ScoreShippingRateInputDraftSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInput",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartSetShippingRateInputAction(**data)


class CartUpdateItemShippingAddressActionSchema(CartUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CartUpdateItemShippingAddressAction(**data)


class CategoryAddAssetActionSchema(CategoryUpdateActionSchema):
    asset = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    position = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryAddAssetAction(**data)


class CategoryChangeAssetNameActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeAssetNameAction(**data)


class CategoryChangeAssetOrderActionSchema(CategoryUpdateActionSchema):
    asset_order = marshmallow.fields.String(
        allow_none=True, many=True, data_key="assetOrder"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeAssetOrderAction(**data)


class CategoryChangeNameActionSchema(CategoryUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeNameAction(**data)


class CategoryChangeOrderHintActionSchema(CategoryUpdateActionSchema):
    order_hint = marshmallow.fields.String(allow_none=True, data_key="orderHint")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeOrderHintAction(**data)


class CategoryChangeParentActionSchema(CategoryUpdateActionSchema):
    parent = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeParentAction(**data)


class CategoryChangeSlugActionSchema(CategoryUpdateActionSchema):
    slug = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryChangeSlugAction(**data)


class CategoryReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategorySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CategoryReference(**data)


class CategoryRemoveAssetActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategoryRemoveAssetAction(**data)


class CategorySetAssetCustomFieldActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetCustomFieldAction(**data)


class CategorySetAssetCustomTypeActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    fields = marshmallow.fields.Dict(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetCustomTypeAction(**data)


class CategorySetAssetDescriptionActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetDescriptionAction(**data)


class CategorySetAssetKeyActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(allow_none=True, data_key="assetId")
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetKeyAction(**data)


class CategorySetAssetSourcesActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    sources = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSourceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetSourcesAction(**data)


class CategorySetAssetTagsActionSchema(CategoryUpdateActionSchema):
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    tags = marshmallow.fields.String(allow_none=True, many=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetAssetTagsAction(**data)


class CategorySetCustomFieldActionSchema(CategoryUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetCustomFieldAction(**data)


class CategorySetCustomTypeActionSchema(CategoryUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetCustomTypeAction(**data)


class CategorySetDescriptionActionSchema(CategoryUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetDescriptionAction(**data)


class CategorySetExternalIdActionSchema(CategoryUpdateActionSchema):
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetExternalIdAction(**data)


class CategorySetKeyActionSchema(CategoryUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetKeyAction(**data)


class CategorySetMetaDescriptionActionSchema(CategoryUpdateActionSchema):
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetMetaDescriptionAction(**data)


class CategorySetMetaKeywordsActionSchema(CategoryUpdateActionSchema):
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetMetaKeywordsAction(**data)


class CategorySetMetaTitleActionSchema(CategoryUpdateActionSchema):
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CategorySetMetaTitleAction(**data)


class CentPrecisionMoneySchema(TypedMoneySchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.CentPrecisionMoney(**data)


class ChannelAddRolesActionSchema(ChannelUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ChannelRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelAddRolesAction(**data)


class ChannelChangeDescriptionActionSchema(ChannelUpdateActionSchema):
    description = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelChangeDescriptionAction(**data)


class ChannelChangeKeyActionSchema(ChannelUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelChangeKeyAction(**data)


class ChannelChangeNameActionSchema(ChannelUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelChangeNameAction(**data)


class ChannelReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ChannelReference(**data)


class ChannelRemoveRolesActionSchema(ChannelUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ChannelRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelRemoveRolesAction(**data)


class ChannelSetAddressActionSchema(ChannelUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelSetAddressAction(**data)


class ChannelSetCustomFieldActionSchema(ChannelUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelSetCustomFieldAction(**data)


class ChannelSetCustomTypeActionSchema(ChannelUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelSetCustomTypeAction(**data)


class ChannelSetGeoLocationActionSchema(ChannelUpdateActionSchema):
    geo_location = marshmallow.fields.Nested(
        nested="commercetools.schemas.GeoJsonPointSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="geoLocation",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelSetGeoLocationAction(**data)


class ChannelSetRolesActionSchema(ChannelUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.ChannelRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ChannelSetRolesAction(**data)


class CustomObjectReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomObjectSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CustomObjectReference(**data)


class CustomerAddAddressActionSchema(CustomerUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerAddAddressAction(**data)


class CustomerAddBillingAddressIdActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerAddBillingAddressIdAction(**data)


class CustomerAddShippingAddressIdActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerAddShippingAddressIdAction(**data)


class CustomerChangeAddressActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerChangeAddressAction(**data)


class CustomerChangeEmailActionSchema(CustomerUpdateActionSchema):
    email = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerChangeEmailAction(**data)


class CustomerGroupChangeNameActionSchema(CustomerGroupUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerGroupChangeNameAction(**data)


class CustomerGroupReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CustomerGroupReference(**data)


class CustomerGroupSetCustomFieldActionSchema(CustomerGroupUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerGroupSetCustomFieldAction(**data)


class CustomerGroupSetCustomTypeActionSchema(CustomerGroupUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerGroupSetCustomTypeAction(**data)


class CustomerGroupSetKeyActionSchema(CustomerGroupUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerGroupSetKeyAction(**data)


class CustomerReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.CustomerReference(**data)


class CustomerRemoveAddressActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerRemoveAddressAction(**data)


class CustomerRemoveBillingAddressIdActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerRemoveBillingAddressIdAction(**data)


class CustomerRemoveShippingAddressIdActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(allow_none=True, data_key="addressId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerRemoveShippingAddressIdAction(**data)


class CustomerSetCompanyNameActionSchema(CustomerUpdateActionSchema):
    company_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="companyName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetCompanyNameAction(**data)


class CustomerSetCustomFieldActionSchema(CustomerUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetCustomFieldAction(**data)


class CustomerSetCustomTypeActionSchema(CustomerUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetCustomTypeAction(**data)


class CustomerSetCustomerGroupActionSchema(CustomerUpdateActionSchema):
    customer_group = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerGroupReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="customerGroup",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetCustomerGroupAction(**data)


class CustomerSetCustomerNumberActionSchema(CustomerUpdateActionSchema):
    customer_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetCustomerNumberAction(**data)


class CustomerSetDateOfBirthActionSchema(CustomerUpdateActionSchema):
    date_of_birth = marshmallow.fields.Date(
        allow_none=True, missing=None, data_key="dateOfBirth"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetDateOfBirthAction(**data)


class CustomerSetDefaultBillingAddressActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="addressId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetDefaultBillingAddressAction(**data)


class CustomerSetDefaultShippingAddressActionSchema(CustomerUpdateActionSchema):
    address_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="addressId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetDefaultShippingAddressAction(**data)


class CustomerSetExternalIdActionSchema(CustomerUpdateActionSchema):
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetExternalIdAction(**data)


class CustomerSetFirstNameActionSchema(CustomerUpdateActionSchema):
    first_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="firstName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetFirstNameAction(**data)


class CustomerSetKeyActionSchema(CustomerUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetKeyAction(**data)


class CustomerSetLastNameActionSchema(CustomerUpdateActionSchema):
    last_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="lastName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetLastNameAction(**data)


class CustomerSetLocaleActionSchema(CustomerUpdateActionSchema):
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetLocaleAction(**data)


class CustomerSetMiddleNameActionSchema(CustomerUpdateActionSchema):
    middle_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="middleName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetMiddleNameAction(**data)


class CustomerSetSalutationActionSchema(CustomerUpdateActionSchema):
    salutation = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetSalutationAction(**data)


class CustomerSetTitleActionSchema(CustomerUpdateActionSchema):
    title = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetTitleAction(**data)


class CustomerSetVatIdActionSchema(CustomerUpdateActionSchema):
    vat_id = marshmallow.fields.String(allow_none=True, missing=None, data_key="vatId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.CustomerSetVatIdAction(**data)


class DiscountCodeChangeCartDiscountsActionSchema(DiscountCodeUpdateActionSchema):
    cart_discounts = marshmallow.fields.Nested(
        nested="commercetools.schemas.CartDiscountReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="cartDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeChangeCartDiscountsAction(**data)


class DiscountCodeChangeGroupsActionSchema(DiscountCodeUpdateActionSchema):
    groups = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeChangeGroupsAction(**data)


class DiscountCodeChangeIsActiveActionSchema(DiscountCodeUpdateActionSchema):
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeChangeIsActiveAction(**data)


class DiscountCodeReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountCodeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.DiscountCodeReference(**data)


class DiscountCodeSetCartPredicateActionSchema(DiscountCodeUpdateActionSchema):
    cart_predicate = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="cartPredicate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetCartPredicateAction(**data)


class DiscountCodeSetCustomFieldActionSchema(DiscountCodeUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetCustomFieldAction(**data)


class DiscountCodeSetCustomTypeActionSchema(DiscountCodeUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetCustomTypeAction(**data)


class DiscountCodeSetDescriptionActionSchema(DiscountCodeUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetDescriptionAction(**data)


class DiscountCodeSetMaxApplicationsActionSchema(DiscountCodeUpdateActionSchema):
    max_applications = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplications"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetMaxApplicationsAction(**data)


class DiscountCodeSetMaxApplicationsPerCustomerActionSchema(
    DiscountCodeUpdateActionSchema
):
    max_applications_per_customer = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="maxApplicationsPerCustomer"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetMaxApplicationsPerCustomerAction(**data)


class DiscountCodeSetNameActionSchema(DiscountCodeUpdateActionSchema):
    name = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetNameAction(**data)


class DiscountCodeSetValidFromActionSchema(DiscountCodeUpdateActionSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetValidFromAction(**data)


class DiscountCodeSetValidFromAndUntilActionSchema(DiscountCodeUpdateActionSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetValidFromAndUntilAction(**data)


class DiscountCodeSetValidUntilActionSchema(DiscountCodeUpdateActionSchema):
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.DiscountCodeSetValidUntilAction(**data)


class ExtensionChangeDestinationActionSchema(ExtensionUpdateActionSchema):
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "AWSLambda": "commercetools.schemas.ExtensionAWSLambdaDestinationSchema",
            "HTTP": "commercetools.schemas.ExtensionHttpDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ExtensionChangeDestinationAction(**data)


class ExtensionChangeTriggersActionSchema(ExtensionUpdateActionSchema):
    triggers = marshmallow.fields.Nested(
        nested="commercetools.schemas.ExtensionTriggerSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ExtensionChangeTriggersAction(**data)


class ExtensionSetKeyActionSchema(ExtensionUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ExtensionSetKeyAction(**data)


class HighPrecisionMoneySchema(TypedMoneySchema):
    precise_amount = marshmallow.fields.Integer(
        allow_none=True, data_key="preciseAmount"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type"]
        return types.HighPrecisionMoney(**data)


class InventoryAddQuantityActionSchema(InventoryUpdateActionSchema):
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryAddQuantityAction(**data)


class InventoryChangeQuantityActionSchema(InventoryUpdateActionSchema):
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryChangeQuantityAction(**data)


class InventoryEntryReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.InventoryEntrySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.InventoryEntryReference(**data)


class InventoryRemoveQuantityActionSchema(InventoryUpdateActionSchema):
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventoryRemoveQuantityAction(**data)


class InventorySetCustomFieldActionSchema(InventoryUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetCustomFieldAction(**data)


class InventorySetCustomTypeActionSchema(InventoryUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetCustomTypeAction(**data)


class InventorySetExpectedDeliveryActionSchema(InventoryUpdateActionSchema):
    expected_delivery = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="expectedDelivery"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetExpectedDeliveryAction(**data)


class InventorySetRestockableInDaysActionSchema(InventoryUpdateActionSchema):
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="restockableInDays"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetRestockableInDaysAction(**data)


class InventorySetSupplyChannelActionSchema(InventoryUpdateActionSchema):
    supply_channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="supplyChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.InventorySetSupplyChannelAction(**data)


class MessageSchema(MessageContextSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.Message(**data)


class OrderAddDeliveryActionSchema(OrderUpdateActionSchema):
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    parcels = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddDeliveryAction(**data)


class OrderAddItemShippingAddressActionSchema(OrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddItemShippingAddressAction(**data)


class OrderAddParcelToDeliveryActionSchema(OrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddParcelToDeliveryAction(**data)


class OrderAddPaymentActionSchema(OrderUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddPaymentAction(**data)


class OrderAddReturnInfoActionSchema(OrderUpdateActionSchema):
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="returnTrackingId"
    )
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReturnItemDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    return_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderAddReturnInfoAction(**data)


class OrderChangeOrderStateActionSchema(OrderUpdateActionSchema):
    order_state = marshmallow_enum.EnumField(
        types.OrderState, by_value=True, data_key="orderState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangeOrderStateAction(**data)


class OrderChangePaymentStateActionSchema(OrderUpdateActionSchema):
    payment_state = marshmallow_enum.EnumField(
        types.PaymentState, by_value=True, missing=None, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangePaymentStateAction(**data)


class OrderChangeShipmentStateActionSchema(OrderUpdateActionSchema):
    shipment_state = marshmallow_enum.EnumField(
        types.ShipmentState, by_value=True, missing=None, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderChangeShipmentStateAction(**data)


class OrderEditAddStagedActionActionSchema(OrderEditUpdateActionSchema):
    staged_action = helpers.Discriminator(
        discriminator_field=("action", "action"),
        discriminator_schemas={
            "addCustomLineItem": "commercetools.schemas.StagedOrderAddCustomLineItemActionSchema",
            "addDelivery": "commercetools.schemas.StagedOrderAddDeliveryActionSchema",
            "addDiscountCode": "commercetools.schemas.StagedOrderAddDiscountCodeActionSchema",
            "addItemShippingAddress": "commercetools.schemas.StagedOrderAddItemShippingAddressActionSchema",
            "addLineItem": "commercetools.schemas.StagedOrderAddLineItemActionSchema",
            "addParcelToDelivery": "commercetools.schemas.StagedOrderAddParcelToDeliveryActionSchema",
            "addPayment": "commercetools.schemas.StagedOrderAddPaymentActionSchema",
            "addReturnInfo": "commercetools.schemas.StagedOrderAddReturnInfoActionSchema",
            "addShoppingList": "commercetools.schemas.StagedOrderAddShoppingListActionSchema",
            "changeCustomLineItemMoney": "commercetools.schemas.StagedOrderChangeCustomLineItemMoneyActionSchema",
            "changeCustomLineItemQuantity": "commercetools.schemas.StagedOrderChangeCustomLineItemQuantityActionSchema",
            "changeLineItemQuantity": "commercetools.schemas.StagedOrderChangeLineItemQuantityActionSchema",
            "changeOrderState": "commercetools.schemas.StagedOrderChangeOrderStateActionSchema",
            "changePaymentState": "commercetools.schemas.StagedOrderChangePaymentStateActionSchema",
            "changeShipmentState": "commercetools.schemas.StagedOrderChangeShipmentStateActionSchema",
            "changeTaxCalculationMode": "commercetools.schemas.StagedOrderChangeTaxCalculationModeActionSchema",
            "changeTaxMode": "commercetools.schemas.StagedOrderChangeTaxModeActionSchema",
            "changeTaxRoundingMode": "commercetools.schemas.StagedOrderChangeTaxRoundingModeActionSchema",
            "importCustomLineItemState": "commercetools.schemas.StagedOrderImportCustomLineItemStateActionSchema",
            "importLineItemState": "commercetools.schemas.StagedOrderImportLineItemStateActionSchema",
            "removeCustomLineItem": "commercetools.schemas.StagedOrderRemoveCustomLineItemActionSchema",
            "removeDelivery": "commercetools.schemas.StagedOrderRemoveDeliveryActionSchema",
            "removeDiscountCode": "commercetools.schemas.StagedOrderRemoveDiscountCodeActionSchema",
            "removeItemShippingAddress": "commercetools.schemas.StagedOrderRemoveItemShippingAddressActionSchema",
            "removeLineItem": "commercetools.schemas.StagedOrderRemoveLineItemActionSchema",
            "removeParcelFromDelivery": "commercetools.schemas.StagedOrderRemoveParcelFromDeliveryActionSchema",
            "removePayment": "commercetools.schemas.StagedOrderRemovePaymentActionSchema",
            "setBillingAddress": "commercetools.schemas.StagedOrderSetBillingAddressActionSchema",
            "setCountry": "commercetools.schemas.StagedOrderSetCountryActionSchema",
            "setCustomField": "commercetools.schemas.StagedOrderSetCustomFieldActionSchema",
            "setCustomLineItemCustomField": "commercetools.schemas.StagedOrderSetCustomLineItemCustomFieldActionSchema",
            "setCustomLineItemCustomType": "commercetools.schemas.StagedOrderSetCustomLineItemCustomTypeActionSchema",
            "setCustomLineItemShippingDetails": "commercetools.schemas.StagedOrderSetCustomLineItemShippingDetailsActionSchema",
            "setCustomLineItemTaxAmount": "commercetools.schemas.StagedOrderSetCustomLineItemTaxAmountActionSchema",
            "setCustomLineItemTaxRate": "commercetools.schemas.StagedOrderSetCustomLineItemTaxRateActionSchema",
            "setCustomShippingMethod": "commercetools.schemas.StagedOrderSetCustomShippingMethodActionSchema",
            "setCustomType": "commercetools.schemas.StagedOrderSetCustomTypeActionSchema",
            "setCustomerEmail": "commercetools.schemas.StagedOrderSetCustomerEmailActionSchema",
            "setCustomerGroup": "commercetools.schemas.StagedOrderSetCustomerGroupActionSchema",
            "setCustomerId": "commercetools.schemas.StagedOrderSetCustomerIdActionSchema",
            "setDeliveryAddress": "commercetools.schemas.StagedOrderSetDeliveryAddressActionSchema",
            "setDeliveryItems": "commercetools.schemas.StagedOrderSetDeliveryItemsActionSchema",
            "setLineItemCustomField": "commercetools.schemas.StagedOrderSetLineItemCustomFieldActionSchema",
            "setLineItemCustomType": "commercetools.schemas.StagedOrderSetLineItemCustomTypeActionSchema",
            "setLineItemPrice": "commercetools.schemas.StagedOrderSetLineItemPriceActionSchema",
            "setLineItemShippingDetails": "commercetools.schemas.StagedOrderSetLineItemShippingDetailsActionSchema",
            "setLineItemTaxAmount": "commercetools.schemas.StagedOrderSetLineItemTaxAmountActionSchema",
            "setLineItemTaxRate": "commercetools.schemas.StagedOrderSetLineItemTaxRateActionSchema",
            "setLineItemTotalPrice": "commercetools.schemas.StagedOrderSetLineItemTotalPriceActionSchema",
            "setLocale": "commercetools.schemas.StagedOrderSetLocaleActionSchema",
            "setOrderNumber": "commercetools.schemas.StagedOrderSetOrderNumberActionSchema",
            "setOrderTotalTax": "commercetools.schemas.StagedOrderSetOrderTotalTaxActionSchema",
            "setParcelItems": "commercetools.schemas.StagedOrderSetParcelItemsActionSchema",
            "setParcelMeasurements": "commercetools.schemas.StagedOrderSetParcelMeasurementsActionSchema",
            "setParcelTrackingData": "commercetools.schemas.StagedOrderSetParcelTrackingDataActionSchema",
            "setReturnPaymentState": "commercetools.schemas.StagedOrderSetReturnPaymentStateActionSchema",
            "setReturnShipmentState": "commercetools.schemas.StagedOrderSetReturnShipmentStateActionSchema",
            "setShippingAddress": "commercetools.schemas.StagedOrderSetShippingAddressActionSchema",
            "setShippingAddressAndCustomShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndCustomShippingMethodActionSchema",
            "setShippingAddressAndShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndShippingMethodActionSchema",
            "setShippingMethod": "commercetools.schemas.StagedOrderSetShippingMethodActionSchema",
            "setShippingMethodTaxAmount": "commercetools.schemas.StagedOrderSetShippingMethodTaxAmountActionSchema",
            "setShippingMethodTaxRate": "commercetools.schemas.StagedOrderSetShippingMethodTaxRateActionSchema",
            "setShippingRateInput": "commercetools.schemas.StagedOrderSetShippingRateInputActionSchema",
            "transitionCustomLineItemState": "commercetools.schemas.StagedOrderTransitionCustomLineItemStateActionSchema",
            "transitionLineItemState": "commercetools.schemas.StagedOrderTransitionLineItemStateActionSchema",
            "transitionState": "commercetools.schemas.StagedOrderTransitionStateActionSchema",
            "updateItemShippingAddress": "commercetools.schemas.StagedOrderUpdateItemShippingAddressActionSchema",
            "updateSyncInfo": "commercetools.schemas.StagedOrderUpdateSyncInfoActionSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="stagedAction",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditAddStagedActionAction(**data)


class OrderEditReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderEditSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.OrderEditReference(**data)


class OrderEditSetCommentActionSchema(OrderEditUpdateActionSchema):
    comment = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditSetCommentAction(**data)


class OrderEditSetCustomFieldActionSchema(OrderEditUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditSetCustomFieldAction(**data)


class OrderEditSetCustomTypeActionSchema(OrderEditUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = marshmallow.fields.Dict(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditSetCustomTypeAction(**data)


class OrderEditSetKeyActionSchema(OrderEditUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditSetKeyAction(**data)


class OrderEditSetStagedActionsActionSchema(OrderEditUpdateActionSchema):
    staged_actions = helpers.Discriminator(
        discriminator_field=("action", "action"),
        discriminator_schemas={
            "addCustomLineItem": "commercetools.schemas.StagedOrderAddCustomLineItemActionSchema",
            "addDelivery": "commercetools.schemas.StagedOrderAddDeliveryActionSchema",
            "addDiscountCode": "commercetools.schemas.StagedOrderAddDiscountCodeActionSchema",
            "addItemShippingAddress": "commercetools.schemas.StagedOrderAddItemShippingAddressActionSchema",
            "addLineItem": "commercetools.schemas.StagedOrderAddLineItemActionSchema",
            "addParcelToDelivery": "commercetools.schemas.StagedOrderAddParcelToDeliveryActionSchema",
            "addPayment": "commercetools.schemas.StagedOrderAddPaymentActionSchema",
            "addReturnInfo": "commercetools.schemas.StagedOrderAddReturnInfoActionSchema",
            "addShoppingList": "commercetools.schemas.StagedOrderAddShoppingListActionSchema",
            "changeCustomLineItemMoney": "commercetools.schemas.StagedOrderChangeCustomLineItemMoneyActionSchema",
            "changeCustomLineItemQuantity": "commercetools.schemas.StagedOrderChangeCustomLineItemQuantityActionSchema",
            "changeLineItemQuantity": "commercetools.schemas.StagedOrderChangeLineItemQuantityActionSchema",
            "changeOrderState": "commercetools.schemas.StagedOrderChangeOrderStateActionSchema",
            "changePaymentState": "commercetools.schemas.StagedOrderChangePaymentStateActionSchema",
            "changeShipmentState": "commercetools.schemas.StagedOrderChangeShipmentStateActionSchema",
            "changeTaxCalculationMode": "commercetools.schemas.StagedOrderChangeTaxCalculationModeActionSchema",
            "changeTaxMode": "commercetools.schemas.StagedOrderChangeTaxModeActionSchema",
            "changeTaxRoundingMode": "commercetools.schemas.StagedOrderChangeTaxRoundingModeActionSchema",
            "importCustomLineItemState": "commercetools.schemas.StagedOrderImportCustomLineItemStateActionSchema",
            "importLineItemState": "commercetools.schemas.StagedOrderImportLineItemStateActionSchema",
            "removeCustomLineItem": "commercetools.schemas.StagedOrderRemoveCustomLineItemActionSchema",
            "removeDelivery": "commercetools.schemas.StagedOrderRemoveDeliveryActionSchema",
            "removeDiscountCode": "commercetools.schemas.StagedOrderRemoveDiscountCodeActionSchema",
            "removeItemShippingAddress": "commercetools.schemas.StagedOrderRemoveItemShippingAddressActionSchema",
            "removeLineItem": "commercetools.schemas.StagedOrderRemoveLineItemActionSchema",
            "removeParcelFromDelivery": "commercetools.schemas.StagedOrderRemoveParcelFromDeliveryActionSchema",
            "removePayment": "commercetools.schemas.StagedOrderRemovePaymentActionSchema",
            "setBillingAddress": "commercetools.schemas.StagedOrderSetBillingAddressActionSchema",
            "setCountry": "commercetools.schemas.StagedOrderSetCountryActionSchema",
            "setCustomField": "commercetools.schemas.StagedOrderSetCustomFieldActionSchema",
            "setCustomLineItemCustomField": "commercetools.schemas.StagedOrderSetCustomLineItemCustomFieldActionSchema",
            "setCustomLineItemCustomType": "commercetools.schemas.StagedOrderSetCustomLineItemCustomTypeActionSchema",
            "setCustomLineItemShippingDetails": "commercetools.schemas.StagedOrderSetCustomLineItemShippingDetailsActionSchema",
            "setCustomLineItemTaxAmount": "commercetools.schemas.StagedOrderSetCustomLineItemTaxAmountActionSchema",
            "setCustomLineItemTaxRate": "commercetools.schemas.StagedOrderSetCustomLineItemTaxRateActionSchema",
            "setCustomShippingMethod": "commercetools.schemas.StagedOrderSetCustomShippingMethodActionSchema",
            "setCustomType": "commercetools.schemas.StagedOrderSetCustomTypeActionSchema",
            "setCustomerEmail": "commercetools.schemas.StagedOrderSetCustomerEmailActionSchema",
            "setCustomerGroup": "commercetools.schemas.StagedOrderSetCustomerGroupActionSchema",
            "setCustomerId": "commercetools.schemas.StagedOrderSetCustomerIdActionSchema",
            "setDeliveryAddress": "commercetools.schemas.StagedOrderSetDeliveryAddressActionSchema",
            "setDeliveryItems": "commercetools.schemas.StagedOrderSetDeliveryItemsActionSchema",
            "setLineItemCustomField": "commercetools.schemas.StagedOrderSetLineItemCustomFieldActionSchema",
            "setLineItemCustomType": "commercetools.schemas.StagedOrderSetLineItemCustomTypeActionSchema",
            "setLineItemPrice": "commercetools.schemas.StagedOrderSetLineItemPriceActionSchema",
            "setLineItemShippingDetails": "commercetools.schemas.StagedOrderSetLineItemShippingDetailsActionSchema",
            "setLineItemTaxAmount": "commercetools.schemas.StagedOrderSetLineItemTaxAmountActionSchema",
            "setLineItemTaxRate": "commercetools.schemas.StagedOrderSetLineItemTaxRateActionSchema",
            "setLineItemTotalPrice": "commercetools.schemas.StagedOrderSetLineItemTotalPriceActionSchema",
            "setLocale": "commercetools.schemas.StagedOrderSetLocaleActionSchema",
            "setOrderNumber": "commercetools.schemas.StagedOrderSetOrderNumberActionSchema",
            "setOrderTotalTax": "commercetools.schemas.StagedOrderSetOrderTotalTaxActionSchema",
            "setParcelItems": "commercetools.schemas.StagedOrderSetParcelItemsActionSchema",
            "setParcelMeasurements": "commercetools.schemas.StagedOrderSetParcelMeasurementsActionSchema",
            "setParcelTrackingData": "commercetools.schemas.StagedOrderSetParcelTrackingDataActionSchema",
            "setReturnPaymentState": "commercetools.schemas.StagedOrderSetReturnPaymentStateActionSchema",
            "setReturnShipmentState": "commercetools.schemas.StagedOrderSetReturnShipmentStateActionSchema",
            "setShippingAddress": "commercetools.schemas.StagedOrderSetShippingAddressActionSchema",
            "setShippingAddressAndCustomShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndCustomShippingMethodActionSchema",
            "setShippingAddressAndShippingMethod": "commercetools.schemas.StagedOrderSetShippingAddressAndShippingMethodActionSchema",
            "setShippingMethod": "commercetools.schemas.StagedOrderSetShippingMethodActionSchema",
            "setShippingMethodTaxAmount": "commercetools.schemas.StagedOrderSetShippingMethodTaxAmountActionSchema",
            "setShippingMethodTaxRate": "commercetools.schemas.StagedOrderSetShippingMethodTaxRateActionSchema",
            "setShippingRateInput": "commercetools.schemas.StagedOrderSetShippingRateInputActionSchema",
            "transitionCustomLineItemState": "commercetools.schemas.StagedOrderTransitionCustomLineItemStateActionSchema",
            "transitionLineItemState": "commercetools.schemas.StagedOrderTransitionLineItemStateActionSchema",
            "transitionState": "commercetools.schemas.StagedOrderTransitionStateActionSchema",
            "updateItemShippingAddress": "commercetools.schemas.StagedOrderUpdateItemShippingAddressActionSchema",
            "updateSyncInfo": "commercetools.schemas.StagedOrderUpdateSyncInfoActionSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        data_key="stagedActions",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderEditSetStagedActionsAction(**data)


class OrderImportCustomLineItemStateActionSchema(OrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderImportCustomLineItemStateAction(**data)


class OrderImportLineItemStateActionSchema(OrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemStateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderImportLineItemStateAction(**data)


class OrderReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.OrderSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.OrderReference(**data)


class OrderRemoveDeliveryActionSchema(OrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveDeliveryAction(**data)


class OrderRemoveItemShippingAddressActionSchema(OrderUpdateActionSchema):
    address_key = marshmallow.fields.String(allow_none=True, data_key="addressKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveItemShippingAddressAction(**data)


class OrderRemoveParcelFromDeliveryActionSchema(OrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemoveParcelFromDeliveryAction(**data)


class OrderRemovePaymentActionSchema(OrderUpdateActionSchema):
    payment = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderRemovePaymentAction(**data)


class OrderSetBillingAddressActionSchema(OrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetBillingAddressAction(**data)


class OrderSetCustomFieldActionSchema(OrderUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomFieldAction(**data)


class OrderSetCustomLineItemCustomFieldActionSchema(OrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemCustomFieldAction(**data)


class OrderSetCustomLineItemCustomTypeActionSchema(OrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemCustomTypeAction(**data)


class OrderSetCustomLineItemShippingDetailsActionSchema(OrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomLineItemShippingDetailsAction(**data)


class OrderSetCustomTypeActionSchema(OrderUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomTypeAction(**data)


class OrderSetCustomerEmailActionSchema(OrderUpdateActionSchema):
    email = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomerEmailAction(**data)


class OrderSetCustomerIdActionSchema(OrderUpdateActionSchema):
    customer_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="customerId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetCustomerIdAction(**data)


class OrderSetDeliveryAddressActionSchema(OrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetDeliveryAddressAction(**data)


class OrderSetDeliveryItemsActionSchema(OrderUpdateActionSchema):
    delivery_id = marshmallow.fields.String(allow_none=True, data_key="deliveryId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetDeliveryItemsAction(**data)


class OrderSetLineItemCustomFieldActionSchema(OrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemCustomFieldAction(**data)


class OrderSetLineItemCustomTypeActionSchema(OrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemCustomTypeAction(**data)


class OrderSetLineItemShippingDetailsActionSchema(OrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    shipping_details = marshmallow.fields.Nested(
        nested="commercetools.schemas.ItemShippingDetailsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingDetails",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLineItemShippingDetailsAction(**data)


class OrderSetLocaleActionSchema(OrderUpdateActionSchema):
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetLocaleAction(**data)


class OrderSetOrderNumberActionSchema(OrderUpdateActionSchema):
    order_number = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetOrderNumberAction(**data)


class OrderSetParcelItemsActionSchema(OrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    items = marshmallow.fields.Nested(
        nested="commercetools.schemas.DeliveryItemSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelItemsAction(**data)


class OrderSetParcelMeasurementsActionSchema(OrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    measurements = marshmallow.fields.Nested(
        nested="commercetools.schemas.ParcelMeasurementsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelMeasurementsAction(**data)


class OrderSetParcelTrackingDataActionSchema(OrderUpdateActionSchema):
    parcel_id = marshmallow.fields.String(allow_none=True, data_key="parcelId")
    tracking_data = marshmallow.fields.Nested(
        nested="commercetools.schemas.TrackingDataSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="trackingData",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetParcelTrackingDataAction(**data)


class OrderSetReturnPaymentStateActionSchema(OrderUpdateActionSchema):
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    payment_state = marshmallow_enum.EnumField(
        types.ReturnPaymentState, by_value=True, data_key="paymentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetReturnPaymentStateAction(**data)


class OrderSetReturnShipmentStateActionSchema(OrderUpdateActionSchema):
    return_item_id = marshmallow.fields.String(allow_none=True, data_key="returnItemId")
    shipment_state = marshmallow_enum.EnumField(
        types.ReturnShipmentState, by_value=True, data_key="shipmentState"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetReturnShipmentStateAction(**data)


class OrderSetShippingAddressActionSchema(OrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderSetShippingAddressAction(**data)


class OrderTransitionCustomLineItemStateActionSchema(OrderUpdateActionSchema):
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="customLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionCustomLineItemStateAction(**data)


class OrderTransitionLineItemStateActionSchema(OrderUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)
    from_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fromState",
    )
    to_state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="toState",
    )
    actual_transition_date = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="actualTransitionDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionLineItemStateAction(**data)


class OrderTransitionStateActionSchema(OrderUpdateActionSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderTransitionStateAction(**data)


class OrderUpdateItemShippingAddressActionSchema(OrderUpdateActionSchema):
    address = marshmallow.fields.Nested(
        nested="commercetools.schemas.AddressSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateItemShippingAddressAction(**data)


class OrderUpdateSyncInfoActionSchema(OrderUpdateActionSchema):
    channel = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChannelReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="syncedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.OrderUpdateSyncInfoAction(**data)


class PaymentAddInterfaceInteractionActionSchema(PaymentUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentAddInterfaceInteractionAction(**data)


class PaymentAddTransactionActionSchema(PaymentUpdateActionSchema):
    transaction = marshmallow.fields.Nested(
        nested="commercetools.schemas.TransactionDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentAddTransactionAction(**data)


class PaymentChangeAmountPlannedActionSchema(PaymentUpdateActionSchema):
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentChangeAmountPlannedAction(**data)


class PaymentChangeTransactionInteractionIdActionSchema(PaymentUpdateActionSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, data_key="transactionId"
    )
    interaction_id = marshmallow.fields.String(
        allow_none=True, data_key="interactionId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentChangeTransactionInteractionIdAction(**data)


class PaymentChangeTransactionStateActionSchema(PaymentUpdateActionSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, data_key="transactionId"
    )
    state = marshmallow_enum.EnumField(types.TransactionState, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentChangeTransactionStateAction(**data)


class PaymentChangeTransactionTimestampActionSchema(PaymentUpdateActionSchema):
    transaction_id = marshmallow.fields.String(
        allow_none=True, data_key="transactionId"
    )
    timestamp = marshmallow.fields.DateTime(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentChangeTransactionTimestampAction(**data)


class PaymentReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.PaymentSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.PaymentReference(**data)


class PaymentSetAmountPaidActionSchema(PaymentUpdateActionSchema):
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetAmountPaidAction(**data)


class PaymentSetAmountRefundedActionSchema(PaymentUpdateActionSchema):
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetAmountRefundedAction(**data)


class PaymentSetAnonymousIdActionSchema(PaymentUpdateActionSchema):
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetAnonymousIdAction(**data)


class PaymentSetAuthorizationActionSchema(PaymentUpdateActionSchema):
    amount = marshmallow.fields.Nested(
        nested="commercetools.schemas.MoneySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    until = marshmallow.fields.DateTime(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetAuthorizationAction(**data)


class PaymentSetCustomFieldActionSchema(PaymentUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetCustomFieldAction(**data)


class PaymentSetCustomTypeActionSchema(PaymentUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetCustomTypeAction(**data)


class PaymentSetCustomerActionSchema(PaymentUpdateActionSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetCustomerAction(**data)


class PaymentSetExternalIdActionSchema(PaymentUpdateActionSchema):
    external_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="externalId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetExternalIdAction(**data)


class PaymentSetInterfaceIdActionSchema(PaymentUpdateActionSchema):
    interface_id = marshmallow.fields.String(allow_none=True, data_key="interfaceId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetInterfaceIdAction(**data)


class PaymentSetKeyActionSchema(PaymentUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetKeyAction(**data)


class PaymentSetMethodInfoInterfaceActionSchema(PaymentUpdateActionSchema):
    interface = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetMethodInfoInterfaceAction(**data)


class PaymentSetMethodInfoMethodActionSchema(PaymentUpdateActionSchema):
    method = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetMethodInfoMethodAction(**data)


class PaymentSetMethodInfoNameActionSchema(PaymentUpdateActionSchema):
    name = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetMethodInfoNameAction(**data)


class PaymentSetStatusInterfaceCodeActionSchema(PaymentUpdateActionSchema):
    interface_code = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="interfaceCode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetStatusInterfaceCodeAction(**data)


class PaymentSetStatusInterfaceTextActionSchema(PaymentUpdateActionSchema):
    interface_text = marshmallow.fields.String(
        allow_none=True, data_key="interfaceText"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentSetStatusInterfaceTextAction(**data)


class PaymentTransitionStateActionSchema(PaymentUpdateActionSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.PaymentTransitionStateAction(**data)


class ProductAddAssetActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    position = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductAddAssetAction(**data)


class ProductAddExternalImageActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    image = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductAddExternalImageAction(**data)


class ProductAddPriceActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductAddPriceAction(**data)


class ProductAddToCategoryActionSchema(ProductUpdateActionSchema):
    category = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    order_hint = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderHint"
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductAddToCategoryAction(**data)


class ProductAddVariantActionSchema(ProductUpdateActionSchema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    images = marshmallow.fields.Nested(
        nested="commercetools.schemas.ImageSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductAddVariantAction(**data)


class ProductChangeAssetNameActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangeAssetNameAction(**data)


class ProductChangeAssetOrderActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_order = marshmallow.fields.String(
        allow_none=True, many=True, data_key="assetOrder"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangeAssetOrderAction(**data)


class ProductChangeMasterVariantActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangeMasterVariantAction(**data)


class ProductChangeNameActionSchema(ProductUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangeNameAction(**data)


class ProductChangePriceActionSchema(ProductUpdateActionSchema):
    price_id = marshmallow.fields.String(allow_none=True, data_key="priceId")
    price = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangePriceAction(**data)


class ProductChangeSlugActionSchema(ProductUpdateActionSchema):
    slug = LocalizedStringField(allow_none=True)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductChangeSlugAction(**data)


class ProductDiscountChangeIsActiveActionSchema(ProductDiscountUpdateActionSchema):
    is_active = marshmallow.fields.Bool(allow_none=True, data_key="isActive")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountChangeIsActiveAction(**data)


class ProductDiscountChangeNameActionSchema(ProductDiscountUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountChangeNameAction(**data)


class ProductDiscountChangePredicateActionSchema(ProductDiscountUpdateActionSchema):
    predicate = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountChangePredicateAction(**data)


class ProductDiscountChangeSortOrderActionSchema(ProductDiscountUpdateActionSchema):
    sort_order = marshmallow.fields.String(allow_none=True, data_key="sortOrder")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountChangeSortOrderAction(**data)


class ProductDiscountChangeValueActionSchema(ProductDiscountUpdateActionSchema):
    value = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": "commercetools.schemas.ProductDiscountValueAbsoluteSchema",
            "external": "commercetools.schemas.ProductDiscountValueExternalSchema",
            "relative": "commercetools.schemas.ProductDiscountValueRelativeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountChangeValueAction(**data)


class ProductDiscountReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductDiscountSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ProductDiscountReference(**data)


class ProductDiscountSetDescriptionActionSchema(ProductDiscountUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountSetDescriptionAction(**data)


class ProductDiscountSetValidFromActionSchema(ProductDiscountUpdateActionSchema):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountSetValidFromAction(**data)


class ProductDiscountSetValidFromAndUntilActionSchema(
    ProductDiscountUpdateActionSchema
):
    valid_from = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountSetValidFromAndUntilAction(**data)


class ProductDiscountSetValidUntilActionSchema(ProductDiscountUpdateActionSchema):
    valid_until = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductDiscountSetValidUntilAction(**data)


class ProductLegacySetSkuActionSchema(ProductUpdateActionSchema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductLegacySetSkuAction(**data)


class ProductMoveImageToPositionActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    image_url = marshmallow.fields.String(allow_none=True, data_key="imageUrl")
    position = marshmallow.fields.Integer(allow_none=True)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductMoveImageToPositionAction(**data)


class ProductPublishActionSchema(ProductUpdateActionSchema):
    scope = marshmallow_enum.EnumField(
        types.ProductPublishScope, by_value=True, missing=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductPublishAction(**data)


class ProductReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ProductReference(**data)


class ProductRemoveAssetActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRemoveAssetAction(**data)


class ProductRemoveFromCategoryActionSchema(ProductUpdateActionSchema):
    category = marshmallow.fields.Nested(
        nested="commercetools.schemas.CategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRemoveFromCategoryAction(**data)


class ProductRemoveImageActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    image_url = marshmallow.fields.String(allow_none=True, data_key="imageUrl")
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRemoveImageAction(**data)


class ProductRemovePriceActionSchema(ProductUpdateActionSchema):
    price_id = marshmallow.fields.String(allow_none=True, data_key="priceId")
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRemovePriceAction(**data)


class ProductRemoveVariantActionSchema(ProductUpdateActionSchema):
    id = marshmallow.fields.Integer(allow_none=True, missing=None)
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRemoveVariantAction(**data)


class ProductRevertStagedChangesActionSchema(ProductUpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRevertStagedChangesAction(**data)


class ProductRevertStagedVariantChangesActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductRevertStagedVariantChangesAction(**data)


class ProductSetAssetCustomFieldActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetCustomFieldAction(**data)


class ProductSetAssetCustomTypeActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    fields = marshmallow.fields.Dict(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetCustomTypeAction(**data)


class ProductSetAssetDescriptionActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetDescriptionAction(**data)


class ProductSetAssetKeyActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(allow_none=True, data_key="assetId")
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetKeyAction(**data)


class ProductSetAssetSourcesActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    sources = marshmallow.fields.Nested(
        nested="commercetools.schemas.AssetSourceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetSourcesAction(**data)


class ProductSetAssetTagsActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    asset_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetId"
    )
    asset_key = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="assetKey"
    )
    tags = marshmallow.fields.String(allow_none=True, many=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAssetTagsAction(**data)


class ProductSetAttributeActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAttributeAction(**data)


class ProductSetAttributeInAllVariantsActionSchema(ProductUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetAttributeInAllVariantsAction(**data)


class ProductSetCategoryOrderHintActionSchema(ProductUpdateActionSchema):
    category_id = marshmallow.fields.String(allow_none=True, data_key="categoryId")
    order_hint = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="orderHint"
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetCategoryOrderHintAction(**data)


class ProductSetDescriptionActionSchema(ProductUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetDescriptionAction(**data)


class ProductSetDiscountedPriceActionSchema(ProductUpdateActionSchema):
    price_id = marshmallow.fields.String(allow_none=True, data_key="priceId")
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    discounted = marshmallow.fields.Nested(
        nested="commercetools.schemas.DiscountedPriceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetDiscountedPriceAction(**data)


class ProductSetImageLabelActionSchema(ProductUpdateActionSchema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    image_url = marshmallow.fields.String(allow_none=True, data_key="imageUrl")
    label = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetImageLabelAction(**data)


class ProductSetKeyActionSchema(ProductUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetKeyAction(**data)


class ProductSetMetaDescriptionActionSchema(ProductUpdateActionSchema):
    meta_description = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaDescription"
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetMetaDescriptionAction(**data)


class ProductSetMetaKeywordsActionSchema(ProductUpdateActionSchema):
    meta_keywords = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaKeywords"
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetMetaKeywordsAction(**data)


class ProductSetMetaTitleActionSchema(ProductUpdateActionSchema):
    meta_title = LocalizedStringField(
        allow_none=True, missing=None, data_key="metaTitle"
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetMetaTitleAction(**data)


class ProductSetPricesActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    prices = marshmallow.fields.Nested(
        nested="commercetools.schemas.PriceDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetPricesAction(**data)


class ProductSetProductPriceCustomFieldActionSchema(ProductUpdateActionSchema):
    price_id = marshmallow.fields.String(allow_none=True, data_key="priceId")
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetProductPriceCustomFieldAction(**data)


class ProductSetProductPriceCustomTypeActionSchema(ProductUpdateActionSchema):
    price_id = marshmallow.fields.String(allow_none=True, data_key="priceId")
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetProductPriceCustomTypeAction(**data)


class ProductSetProductVariantKeyActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    key = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetProductVariantKeyAction(**data)


class ProductSetSearchKeywordsActionSchema(ProductUpdateActionSchema):
    search_keywords = marshmallow.fields.Nested(
        nested="commercetools.schemas.SearchKeywordsSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="searchKeywords",
    )
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetSearchKeywordsAction(**data)


class ProductSetSkuActionSchema(ProductUpdateActionSchema):
    variant_id = marshmallow.fields.Integer(allow_none=True, data_key="variantId")
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    staged = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetSkuAction(**data)


class ProductSetTaxCategoryActionSchema(ProductUpdateActionSchema):
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="taxCategory",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductSetTaxCategoryAction(**data)


class ProductTransitionStateActionSchema(ProductUpdateActionSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTransitionStateAction(**data)


class ProductTypeAddAttributeDefinitionActionSchema(ProductTypeUpdateActionSchema):
    attribute = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeDefinitionDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeAddAttributeDefinitionAction(**data)


class ProductTypeAddLocalizedEnumValueActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeAddLocalizedEnumValueAction(**data)


class ProductTypeAddPlainEnumValueActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributePlainEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeAddPlainEnumValueAction(**data)


class ProductTypeChangeAttributeConstraintActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    new_value = marshmallow_enum.EnumField(
        types.AttributeConstraintEnumDraft, by_value=True, data_key="newValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeAttributeConstraintAction(**data)


class ProductTypeChangeAttributeNameActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    new_attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="newAttributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeAttributeNameAction(**data)


class ProductTypeChangeAttributeOrderActionSchema(ProductTypeUpdateActionSchema):
    attributes = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeDefinitionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeAttributeOrderAction(**data)


class ProductTypeChangeDescriptionActionSchema(ProductTypeUpdateActionSchema):
    description = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeDescriptionAction(**data)


class ProductTypeChangeEnumKeyActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    key = marshmallow.fields.String(allow_none=True)
    new_key = marshmallow.fields.String(allow_none=True, data_key="newKey")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeEnumKeyAction(**data)


class ProductTypeChangeInputHintActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    new_value = marshmallow_enum.EnumField(
        types.TextInputHint, by_value=True, data_key="newValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeInputHintAction(**data)


class ProductTypeChangeIsSearchableActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    is_searchable = marshmallow.fields.Bool(allow_none=True, data_key="isSearchable")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeIsSearchableAction(**data)


class ProductTypeChangeLabelActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeLabelAction(**data)


class ProductTypeChangeLocalizedEnumValueLabelActionSchema(
    ProductTypeUpdateActionSchema
):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    new_value = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="newValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeLocalizedEnumValueLabelAction(**data)


class ProductTypeChangeLocalizedEnumValueOrderActionSchema(
    ProductTypeUpdateActionSchema
):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributeLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeLocalizedEnumValueOrderAction(**data)


class ProductTypeChangeNameActionSchema(ProductTypeUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangeNameAction(**data)


class ProductTypeChangePlainEnumValueLabelActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    new_value = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributePlainEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="newValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangePlainEnumValueLabelAction(**data)


class ProductTypeChangePlainEnumValueOrderActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    values = marshmallow.fields.Nested(
        nested="commercetools.schemas.AttributePlainEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeChangePlainEnumValueOrderAction(**data)


class ProductTypeReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductTypeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ProductTypeReference(**data)


class ProductTypeRemoveAttributeDefinitionActionSchema(ProductTypeUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeRemoveAttributeDefinitionAction(**data)


class ProductTypeRemoveEnumValuesActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    keys = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeRemoveEnumValuesAction(**data)


class ProductTypeSetInputTipActionSchema(ProductTypeUpdateActionSchema):
    attribute_name = marshmallow.fields.String(
        allow_none=True, data_key="attributeName"
    )
    input_tip = LocalizedStringField(allow_none=True, missing=None, data_key="inputTip")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeSetInputTipAction(**data)


class ProductTypeSetKeyActionSchema(ProductTypeUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductTypeSetKeyAction(**data)


class ProductUnpublishActionSchema(ProductUpdateActionSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProductUnpublishAction(**data)


class ProjectChangeCountriesActionSchema(ProjectUpdateActionSchema):
    countries = marshmallow.fields.String(many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectChangeCountriesAction(**data)


class ProjectChangeCurrenciesActionSchema(ProjectUpdateActionSchema):
    currencies = marshmallow.fields.String(many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectChangeCurrenciesAction(**data)


class ProjectChangeLanguagesActionSchema(ProjectUpdateActionSchema):
    languages = marshmallow.fields.String(many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectChangeLanguagesAction(**data)


class ProjectChangeMessagesEnabledActionSchema(ProjectUpdateActionSchema):
    messages_enabled = marshmallow.fields.Bool(
        allow_none=True, data_key="messagesEnabled"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectChangeMessagesEnabledAction(**data)


class ProjectChangeNameActionSchema(ProjectUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectChangeNameAction(**data)


class ProjectSetShippingRateInputTypeActionSchema(ProjectUpdateActionSchema):
    shipping_rate_input_type = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "CartClassification": "commercetools.schemas.CartClassificationTypeSchema",
            "CartScore": "commercetools.schemas.CartScoreTypeSchema",
            "CartValue": "commercetools.schemas.CartValueTypeSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
        data_key="shippingRateInputType",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ProjectSetShippingRateInputTypeAction(**data)


class ReviewReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ReviewSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ReviewReference(**data)


class ReviewSetAuthorNameActionSchema(ReviewUpdateActionSchema):
    author_name = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="authorName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetAuthorNameAction(**data)


class ReviewSetCustomFieldActionSchema(ReviewUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetCustomFieldAction(**data)


class ReviewSetCustomTypeActionSchema(ReviewUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetCustomTypeAction(**data)


class ReviewSetCustomerActionSchema(ReviewUpdateActionSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetCustomerAction(**data)


class ReviewSetKeyActionSchema(ReviewUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetKeyAction(**data)


class ReviewSetLocaleActionSchema(ReviewUpdateActionSchema):
    locale = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetLocaleAction(**data)


class ReviewSetRatingActionSchema(ReviewUpdateActionSchema):
    rating = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetRatingAction(**data)


class ReviewSetTargetActionSchema(ReviewUpdateActionSchema):
    target = marshmallow.fields.Nested(
        nested="commercetools.schemas.ProductReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetTargetAction(**data)


class ReviewSetTextActionSchema(ReviewUpdateActionSchema):
    text = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetTextAction(**data)


class ReviewSetTitleActionSchema(ReviewUpdateActionSchema):
    title = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewSetTitleAction(**data)


class ReviewTransitionStateActionSchema(ReviewUpdateActionSchema):
    state = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    force = marshmallow.fields.Bool(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ReviewTransitionStateAction(**data)


class ShippingMethodAddShippingRateActionSchema(ShippingMethodUpdateActionSchema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodAddShippingRateAction(**data)


class ShippingMethodAddZoneActionSchema(ShippingMethodUpdateActionSchema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodAddZoneAction(**data)


class ShippingMethodChangeIsDefaultActionSchema(ShippingMethodUpdateActionSchema):
    is_default = marshmallow.fields.Bool(allow_none=True, data_key="isDefault")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodChangeIsDefaultAction(**data)


class ShippingMethodChangeNameActionSchema(ShippingMethodUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodChangeNameAction(**data)


class ShippingMethodChangeTaxCategoryActionSchema(ShippingMethodUpdateActionSchema):
    tax_category = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategoryReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxCategory",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodChangeTaxCategoryAction(**data)


class ShippingMethodReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingMethodSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ShippingMethodReference(**data)


class ShippingMethodRemoveShippingRateActionSchema(ShippingMethodUpdateActionSchema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )
    shipping_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShippingRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="shippingRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodRemoveShippingRateAction(**data)


class ShippingMethodRemoveZoneActionSchema(ShippingMethodUpdateActionSchema):
    zone = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodRemoveZoneAction(**data)


class ShippingMethodSetDescriptionActionSchema(ShippingMethodUpdateActionSchema):
    description = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodSetDescriptionAction(**data)


class ShippingMethodSetKeyActionSchema(ShippingMethodUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodSetKeyAction(**data)


class ShippingMethodSetPredicateActionSchema(ShippingMethodUpdateActionSchema):
    predicate = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShippingMethodSetPredicateAction(**data)


class ShoppingListAddLineItemActionSchema(ShoppingListUpdateActionSchema):
    sku = marshmallow.fields.String(allow_none=True, missing=None)
    product_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="productId"
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="variantId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    added_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="addedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListAddLineItemAction(**data)


class ShoppingListAddTextLineItemActionSchema(ShoppingListUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)
    description = LocalizedStringField(allow_none=True, missing=None)
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)
    added_at = marshmallow.fields.DateTime(
        allow_none=True, missing=None, data_key="addedAt"
    )
    custom = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldsDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListAddTextLineItemAction(**data)


class ShoppingListChangeLineItemQuantityActionSchema(ShoppingListUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeLineItemQuantityAction(**data)


class ShoppingListChangeLineItemsOrderActionSchema(ShoppingListUpdateActionSchema):
    line_item_order = marshmallow.fields.String(
        allow_none=True, many=True, data_key="lineItemOrder"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeLineItemsOrderAction(**data)


class ShoppingListChangeNameActionSchema(ShoppingListUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeNameAction(**data)


class ShoppingListChangeTextLineItemNameActionSchema(ShoppingListUpdateActionSchema):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeTextLineItemNameAction(**data)


class ShoppingListChangeTextLineItemQuantityActionSchema(
    ShoppingListUpdateActionSchema
):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeTextLineItemQuantityAction(**data)


class ShoppingListChangeTextLineItemsOrderActionSchema(ShoppingListUpdateActionSchema):
    text_line_item_order = marshmallow.fields.String(
        allow_none=True, many=True, data_key="textLineItemOrder"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListChangeTextLineItemsOrderAction(**data)


class ShoppingListReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ShoppingListSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ShoppingListReference(**data)


class ShoppingListRemoveLineItemActionSchema(ShoppingListUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListRemoveLineItemAction(**data)


class ShoppingListRemoveTextLineItemActionSchema(ShoppingListUpdateActionSchema):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListRemoveTextLineItemAction(**data)


class ShoppingListSetAnonymousIdActionSchema(ShoppingListUpdateActionSchema):
    anonymous_id = marshmallow.fields.String(
        allow_none=True, missing=None, data_key="anonymousId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetAnonymousIdAction(**data)


class ShoppingListSetCustomFieldActionSchema(ShoppingListUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetCustomFieldAction(**data)


class ShoppingListSetCustomTypeActionSchema(ShoppingListUpdateActionSchema):
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetCustomTypeAction(**data)


class ShoppingListSetCustomerActionSchema(ShoppingListUpdateActionSchema):
    customer = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomerReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetCustomerAction(**data)


class ShoppingListSetDeleteDaysAfterLastModificationActionSchema(
    ShoppingListUpdateActionSchema
):
    delete_days_after_last_modification = marshmallow.fields.Integer(
        allow_none=True, missing=None, data_key="deleteDaysAfterLastModification"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetDeleteDaysAfterLastModificationAction(**data)


class ShoppingListSetDescriptionActionSchema(ShoppingListUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetDescriptionAction(**data)


class ShoppingListSetKeyActionSchema(ShoppingListUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetKeyAction(**data)


class ShoppingListSetLineItemCustomFieldActionSchema(ShoppingListUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetLineItemCustomFieldAction(**data)


class ShoppingListSetLineItemCustomTypeActionSchema(ShoppingListUpdateActionSchema):
    line_item_id = marshmallow.fields.String(allow_none=True, data_key="lineItemId")
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetLineItemCustomTypeAction(**data)


class ShoppingListSetSlugActionSchema(ShoppingListUpdateActionSchema):
    slug = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetSlugAction(**data)


class ShoppingListSetTextLineItemCustomFieldActionSchema(
    ShoppingListUpdateActionSchema
):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    name = marshmallow.fields.String(allow_none=True)
    value = marshmallow.fields.Raw(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetTextLineItemCustomFieldAction(**data)


class ShoppingListSetTextLineItemCustomTypeActionSchema(ShoppingListUpdateActionSchema):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    type = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )
    fields = FieldContainerField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetTextLineItemCustomTypeAction(**data)


class ShoppingListSetTextLineItemDescriptionActionSchema(
    ShoppingListUpdateActionSchema
):
    text_line_item_id = marshmallow.fields.String(
        allow_none=True, data_key="textLineItemId"
    )
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ShoppingListSetTextLineItemDescriptionAction(**data)


class StagedOrderSchema(OrderSchema):
    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        return types.StagedOrder(**data)


class StateAddRolesActionSchema(StateUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.StateRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateAddRolesAction(**data)


class StateChangeInitialActionSchema(StateUpdateActionSchema):
    initial = marshmallow.fields.Bool(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateChangeInitialAction(**data)


class StateChangeKeyActionSchema(StateUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateChangeKeyAction(**data)


class StateChangeTypeActionSchema(StateUpdateActionSchema):
    type = marshmallow_enum.EnumField(types.StateTypeEnum, by_value=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateChangeTypeAction(**data)


class StateReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.StateReference(**data)


class StateRemoveRolesActionSchema(StateUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.StateRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateRemoveRolesAction(**data)


class StateSetDescriptionActionSchema(StateUpdateActionSchema):
    description = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateSetDescriptionAction(**data)


class StateSetNameActionSchema(StateUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateSetNameAction(**data)


class StateSetRolesActionSchema(StateUpdateActionSchema):
    roles = marshmallow.fields.List(
        marshmallow_enum.EnumField(types.StateRoleEnum, by_value=True)
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateSetRolesAction(**data)


class StateSetTransitionsActionSchema(StateUpdateActionSchema):
    transitions = marshmallow.fields.Nested(
        nested="commercetools.schemas.StateReferenceSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.StateSetTransitionsAction(**data)


class SubscriptionChangeDestinationActionSchema(SubscriptionUpdateActionSchema):
    destination = helpers.Discriminator(
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "EventGrid": "commercetools.schemas.AzureEventGridDestinationSchema",
            "AzureServiceBus": "commercetools.schemas.AzureServiceBusDestinationSchema",
            "GoogleCloudPubSub": "commercetools.schemas.GoogleCloudPubSubDestinationSchema",
            "IronMQ": "commercetools.schemas.IronMqDestinationSchema",
            "SNS": "commercetools.schemas.SnsDestinationSchema",
            "SQS": "commercetools.schemas.SqsDestinationSchema",
        },
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.SubscriptionChangeDestinationAction(**data)


class SubscriptionSetChangesActionSchema(SubscriptionUpdateActionSchema):
    changes = marshmallow.fields.Nested(
        nested="commercetools.schemas.ChangeSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.SubscriptionSetChangesAction(**data)


class SubscriptionSetKeyActionSchema(SubscriptionUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.SubscriptionSetKeyAction(**data)


class SubscriptionSetMessagesActionSchema(SubscriptionUpdateActionSchema):
    messages = marshmallow.fields.Nested(
        nested="commercetools.schemas.MessageSubscriptionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        many=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.SubscriptionSetMessagesAction(**data)


class TaxCategoryAddTaxRateActionSchema(TaxCategoryUpdateActionSchema):
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategoryAddTaxRateAction(**data)


class TaxCategoryChangeNameActionSchema(TaxCategoryUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategoryChangeNameAction(**data)


class TaxCategoryReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxCategorySchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.TaxCategoryReference(**data)


class TaxCategoryRemoveTaxRateActionSchema(TaxCategoryUpdateActionSchema):
    tax_rate_id = marshmallow.fields.String(allow_none=True, data_key="taxRateId")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategoryRemoveTaxRateAction(**data)


class TaxCategoryReplaceTaxRateActionSchema(TaxCategoryUpdateActionSchema):
    tax_rate_id = marshmallow.fields.String(allow_none=True, data_key="taxRateId")
    tax_rate = marshmallow.fields.Nested(
        nested="commercetools.schemas.TaxRateDraftSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="taxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategoryReplaceTaxRateAction(**data)


class TaxCategorySetDescriptionActionSchema(TaxCategoryUpdateActionSchema):
    description = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategorySetDescriptionAction(**data)


class TaxCategorySetKeyActionSchema(TaxCategoryUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TaxCategorySetKeyAction(**data)


class TypeAddEnumValueActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeAddEnumValueAction(**data)


class TypeAddFieldDefinitionActionSchema(TypeUpdateActionSchema):
    field_definition = marshmallow.fields.Nested(
        nested="commercetools.schemas.FieldDefinitionSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        data_key="fieldDefinition",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeAddFieldDefinitionAction(**data)


class TypeAddLocalizedEnumValueActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    value = marshmallow.fields.Nested(
        nested="commercetools.schemas.CustomFieldLocalizedEnumValueSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeAddLocalizedEnumValueAction(**data)


class TypeChangeEnumValueOrderActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    keys = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeEnumValueOrderAction(**data)


class TypeChangeFieldDefinitionLabelActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeFieldDefinitionLabelAction(**data)


class TypeChangeFieldDefinitionOrderActionSchema(TypeUpdateActionSchema):
    field_names = marshmallow.fields.String(
        allow_none=True, many=True, data_key="fieldNames"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeFieldDefinitionOrderAction(**data)


class TypeChangeKeyActionSchema(TypeUpdateActionSchema):
    key = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeKeyAction(**data)


class TypeChangeLabelActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    label = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeLabelAction(**data)


class TypeChangeLocalizedEnumValueOrderActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")
    keys = marshmallow.fields.String(allow_none=True, many=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeLocalizedEnumValueOrderAction(**data)


class TypeChangeNameActionSchema(TypeUpdateActionSchema):
    name = LocalizedStringField(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeChangeNameAction(**data)


class TypeReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.TypeSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.TypeReference(**data)


class TypeRemoveFieldDefinitionActionSchema(TypeUpdateActionSchema):
    field_name = marshmallow.fields.String(allow_none=True, data_key="fieldName")

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeRemoveFieldDefinitionAction(**data)


class TypeSetDescriptionActionSchema(TypeUpdateActionSchema):
    description = LocalizedStringField(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.TypeSetDescriptionAction(**data)


class ZoneAddLocationActionSchema(ZoneUpdateActionSchema):
    location = marshmallow.fields.Nested(
        nested="commercetools.schemas.LocationSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ZoneAddLocationAction(**data)


class ZoneChangeNameActionSchema(ZoneUpdateActionSchema):
    name = marshmallow.fields.String(allow_none=True)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ZoneChangeNameAction(**data)


class ZoneReferenceSchema(ReferenceSchema):
    obj = marshmallow.fields.Nested(
        nested="commercetools.schemas.ZoneSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
        missing=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["type_id"]
        return types.ZoneReference(**data)


class ZoneRemoveLocationActionSchema(ZoneUpdateActionSchema):
    location = marshmallow.fields.Nested(
        nested="commercetools.schemas.LocationSchema",
        unknown=marshmallow.EXCLUDE,
        allow_none=True,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ZoneRemoveLocationAction(**data)


class ZoneSetDescriptionActionSchema(ZoneUpdateActionSchema):
    description = marshmallow.fields.String(allow_none=True, missing=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data):
        del data["action"]
        return types.ZoneSetDescriptionAction(**data)
