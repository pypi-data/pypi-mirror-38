# Generated by Django 2.1.2 on 2018-10-25 04:58

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = []

    operations = [
        migrations.RunSQL(
            """
            CREATE OR REPLACE FUNCTION djpgtree_next(
                tbl regclass,
                prefix ltree,
                gap bigint,
                pad_length int
            ) RETURNS ltree AS $function$
                DECLARE
                    sibling_query lquery;
                    previous_highest ltree;
                    previous_rightmost_label text;
                    next_rightmost_segment text;
                BEGIN
                    -- Generate a lquery that matches all would-be siblings of
                    -- the new row
                    IF prefix = ''::ltree THEN
                        sibling_query = '*{1}';
                    ELSE
                        sibling_query = prefix::text || '.*{1}';
                    END IF;

                    -- Find the existing sibling with the highest tree_path
                    EXECUTE format($$
                        SELECT tree_path
                        FROM %s
                        WHERE tree_path ~ %L
                        ORDER BY tree_path DESC LIMIT 1
                    $$, tbl, sibling_query) INTO previous_highest;

                    IF previous_highest IS NULL THEN
                        -- If there is no such row, start at the gap we were passed in,
                        -- to allow room for other rows to be moved above us
                        RETURN prefix || LPAD(gap::text, pad_length, '0');
                    ELSE
                        -- Otherwise, parse the rightmost label as a number, adding
                        -- the gap to it, and reattach to the prefix
                        previous_rightmost_label = subpath(previous_highest, -1);
                        next_rightmost_segment = previous_rightmost_label::bigint + gap;
                        RETURN prefix || LPAD(next_rightmost_segment, pad_length, '0');
                    END IF;
                END
            $function$ LANGUAGE plpgsql;

        """,
            "DROP FUNCTION djpgtree_next(regclass, ltree, bigint, int)",
        )
    ]
