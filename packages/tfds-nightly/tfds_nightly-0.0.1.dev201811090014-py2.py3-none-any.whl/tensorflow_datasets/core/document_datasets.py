# coding=utf-8
# Copyright 2018 The TensorFlow Datasets Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Script to document datasets.

"""

from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import collections
import os
import sys

import tensorflow as tf
import tensorflow_datasets as tfds

flags = tf.flags
FLAGS = flags.FLAGS

BASE_URL = "https://github.com/tensorflow/datasets/tree/master/tensorflow_datasets"

DOC = """\
<!-- auto-generated by tfds.core.document_datasets -->
# Datasets

```
# See all registered datasets
tfds.list_builders()

# Load a given dataset by name
mnist_train_dataset = tfds.load(name="mnist", split=tfds.Split.TRAIN)
```

---

Datasets

{toc}

---

{datasets}
"""

SECTION_DATASETS = """\
# `{section_name}`

{datasets}
"""

DATASET_ENTRY = """\
## `"{snakecase_name}"`

[`{module_and_class}`]({cls_url})
"""


def cls_url(module_name):
  mod_file = sys.modules[module_name].__file__
  if mod_file.endswith("pyc"):
    mod_file = mod_file[:-1]
  base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
  path = os.path.relpath(mod_file, base_dir)
  return os.path.join(BASE_URL, path)


def tfds_mod_name(mod_name):
  parts = mod_name.split(".")
  return ".".join(["tfds"] + parts[1:])


def document_single_builder(builder):
  mod_name = builder.__class__.__module__
  cls_name = builder.__class__.__name__
  mod_file = sys.modules[mod_name].__file__
  if mod_file.endswith("pyc"):
    mod_file = mod_file[:-1]
  return DATASET_ENTRY.format(
      snakecase_name=builder.name,
      module_and_class="%s.%s" % (tfds_mod_name(mod_name), cls_name),
      cls_url=cls_url(mod_name),
  )


def create_section_toc(section, builders):
  heading = "* `%s`" % section
  entry = "  * [`\"{name}\"`](#{name})"
  entries = []
  for builder in builders:
    entries.append(entry.format(name=builder.name))
  return "\n".join([heading] + entries)


def make_module_to_builder_dict():
  """Get all builders organized by module in nested dicts."""
  # pylint: disable=g-long-lambda
  # dict to hold tfds->image->mnist->[builders]
  module_to_builder = collections.defaultdict(
      lambda: collections.defaultdict(
          lambda: collections.defaultdict(list)))
  # pylint: enable=g-long-lambda

  builders = [tfds.builder(name) for name in tfds.list_builders()]
  for builder in builders:
    mod_name = builder.__class__.__module__
    modules = mod_name.split(".")

    current_mod_ctr = module_to_builder
    for mod in modules:
      current_mod_ctr = current_mod_ctr[mod]
    current_mod_ctr.append(builder)

  module_to_builder = module_to_builder["tensorflow_datasets"]
  return module_to_builder


def main(argv):
  del argv

  module_to_builder = make_module_to_builder_dict()

  sections = sorted(list(module_to_builder.keys()))
  section_tocs = []
  section_docs = []
  for section in sections:
    builders = tf.contrib.framework.nest.flatten(module_to_builder[section])
    builders = sorted(builders, key=lambda b: b.name)
    builder_docs = [document_single_builder(builder) for builder in builders]
    section_doc = SECTION_DATASETS.format(
        section_name=section, datasets="\n".join(builder_docs))
    section_docs.append(section_doc)
    section_tocs.append(create_section_toc(section, builders))

  full_doc = DOC.format(toc="\n".join(section_tocs),
                        datasets="\n".join(section_docs))
  print(full_doc)


if __name__ == "__main__":
  tf.app.run()
