# coding: utf-8

"""
    Translator Knowledge Beacon API

    This is the Translator Knowledge Beacon web service application programming interface (API).   # noqa: E501

    OpenAPI spec version: 1.3.0
    Contact: richard@starinformatics.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from tkbeacon.models.beacon_knowledge_map_object import BeaconKnowledgeMapObject  # noqa: F401,E501
from tkbeacon.models.beacon_knowledge_map_predicate import BeaconKnowledgeMapPredicate  # noqa: F401,E501
from tkbeacon.models.beacon_knowledge_map_subject import BeaconKnowledgeMapSubject  # noqa: F401,E501


class BeaconKnowledgeMapStatement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'BeaconKnowledgeMapSubject',
        'predicate': 'BeaconKnowledgeMapPredicate',
        'object': 'BeaconKnowledgeMapObject',
        'frequency': 'int',
        'description': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'predicate': 'predicate',
        'object': 'object',
        'frequency': 'frequency',
        'description': 'description'
    }

    def __init__(self, subject=None, predicate=None, object=None, frequency=None, description=None):  # noqa: E501
        """BeaconKnowledgeMapStatement - a model defined in Swagger"""  # noqa: E501

        self._subject = None
        self._predicate = None
        self._object = None
        self._frequency = None
        self._description = None
        self.discriminator = None

        if subject is not None:
            self.subject = subject
        if predicate is not None:
            self.predicate = predicate
        if object is not None:
            self.object = object
        if frequency is not None:
            self.frequency = frequency
        if description is not None:
            self.description = description

    @property
    def subject(self):
        """Gets the subject of this BeaconKnowledgeMapStatement.  # noqa: E501


        :return: The subject of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: BeaconKnowledgeMapSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this BeaconKnowledgeMapStatement.


        :param subject: The subject of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type: BeaconKnowledgeMapSubject
        """

        self._subject = subject

    @property
    def predicate(self):
        """Gets the predicate of this BeaconKnowledgeMapStatement.  # noqa: E501


        :return: The predicate of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: BeaconKnowledgeMapPredicate
        """
        return self._predicate

    @predicate.setter
    def predicate(self, predicate):
        """Sets the predicate of this BeaconKnowledgeMapStatement.


        :param predicate: The predicate of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type: BeaconKnowledgeMapPredicate
        """

        self._predicate = predicate

    @property
    def object(self):
        """Gets the object of this BeaconKnowledgeMapStatement.  # noqa: E501


        :return: The object of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: BeaconKnowledgeMapObject
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this BeaconKnowledgeMapStatement.


        :param object: The object of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type: BeaconKnowledgeMapObject
        """

        self._object = object

    @property
    def frequency(self):
        """Gets the frequency of this BeaconKnowledgeMapStatement.  # noqa: E501

        the frequency of statements of the specified relationship within the given beacon   # noqa: E501

        :return: The frequency of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this BeaconKnowledgeMapStatement.

        the frequency of statements of the specified relationship within the given beacon   # noqa: E501

        :param frequency: The frequency of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def description(self):
        """Gets the description of this BeaconKnowledgeMapStatement.  # noqa: E501

        a description of the nature of the relationship   # noqa: E501

        :return: The description of this BeaconKnowledgeMapStatement.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BeaconKnowledgeMapStatement.

        a description of the nature of the relationship   # noqa: E501

        :param description: The description of this BeaconKnowledgeMapStatement.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeaconKnowledgeMapStatement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
