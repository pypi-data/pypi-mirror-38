# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import permission_pb2 as permission__pb2


class PermissionManagerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Register = channel.unary_unary(
        '/charonrpc.PermissionManager/Register',
        request_serializer=permission__pb2.RegisterPermissionsRequest.SerializeToString,
        response_deserializer=permission__pb2.RegisterPermissionsResponse.FromString,
        )
    self.List = channel.unary_unary(
        '/charonrpc.PermissionManager/List',
        request_serializer=permission__pb2.ListPermissionsRequest.SerializeToString,
        response_deserializer=permission__pb2.ListPermissionsResponse.FromString,
        )
    self.Get = channel.unary_unary(
        '/charonrpc.PermissionManager/Get',
        request_serializer=permission__pb2.GetPermissionRequest.SerializeToString,
        response_deserializer=permission__pb2.GetPermissionResponse.FromString,
        )


class PermissionManagerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Register(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def List(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PermissionManagerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Register': grpc.unary_unary_rpc_method_handler(
          servicer.Register,
          request_deserializer=permission__pb2.RegisterPermissionsRequest.FromString,
          response_serializer=permission__pb2.RegisterPermissionsResponse.SerializeToString,
      ),
      'List': grpc.unary_unary_rpc_method_handler(
          servicer.List,
          request_deserializer=permission__pb2.ListPermissionsRequest.FromString,
          response_serializer=permission__pb2.ListPermissionsResponse.SerializeToString,
      ),
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=permission__pb2.GetPermissionRequest.FromString,
          response_serializer=permission__pb2.GetPermissionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'charonrpc.PermissionManager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
