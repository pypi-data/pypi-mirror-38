 #!/usr/bin/env python
from __future__ import print_function
import sys
import datetime

import grpc

import biometrica_pb2
import biometrica_pb2_grpc


class BiometricaClient:
    timeout = 6000

    def __init__(self, ip, port, secret):
        self.channel = self.GetInsecureChannel(ip, port)
        self.secret = secret

    """
    init client, register terminal
    """

    def Start(self):
        self.client = biometrica_pb2_grpc.BmAuthStub(self.channel)
        self.RegisterTerminal(self.secret, self.client)

    def GetInsecureChannel(self, ip, port):
        URL = ip + ":" + port
        return grpc.insecure_channel(URL)

    """
    RegisterTerminal with console print
    return bool 
    """

    def RegisterTerminalVerbose(self, secret, client):
        try:
            print(
                "Terminal Secret: "
                + secret
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = client.RegisterTerminal(
                biometrica_pb2.TerminalRequest(secret=secret), BiometricaClient.timeout
            )
            print(
                "Terminal Status: "
                + response.message
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")

            return response.registered
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    """
    return bool
    """

    def RegisterTerminal(self, secret, client):
        try:
            response = client.RegisterTerminal(
                biometrica_pb2.TerminalRequest(secret=secret), BiometricaClient.timeout
            )
            return response.registered
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    """
    CardAuth with console print
    returns bool
    """

    def CardAuthVerbose(self, uid):
        try:
            print(
                "Requested card: "
                + uid
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = self.client.CardAuth(
                biometrica_pb2.CardRequest(uid=uid), BiometricaClient.timeout
            )
            print(
                "CardAuth: "
                + response.message
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")

            return response.auth
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def CardAuth(self, uid):
        try:
            response = self.client.CardAuth(
                biometrica_pb2.CardRequest(uid=uid), BiometricaClient.timeout
            )
            return response.auth
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def CardTAuthVerbose(self, uid, ticket):
        try:
            print(
                "Requested card: "
                + uid
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = self.client.CardTAuth(
                biometrica_pb2.CardTRequest(uid=uid, ticket=ticket),
                BiometricaClient.timeout,
            )

            # print(str(response))

            print(
                "CardAuth: "
                + response.message
                + "\t"
                + "ticket: "
                + str(response.ticket)
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")

            return [response.auth, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    # returns [bool, int]
    # bool -- auth, int -- ticket
    def CardTAuth(self, uid, ticket):
        try:
            response = self.client.CardTAuth(
                biometrica_pb2.CardTRequest(uid=uid, ticket=ticket),
                BiometricaClient.timeout,
            )
            return [response.auth, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def FingerAuth(self, finger):
        try:
            response = self.client.FingerAuth(
                biometrica_pb2.FingerRequest(fingerprint=finger),
                BiometricaClient.timeout,
            )
            return response.auth
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def FingerAuthVerbose(self, finger):
        try:
            print(
                "Requested Fingerprint ByteLength: "
                + str(len(finger))
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = self.client.FingerAuth(
                biometrica_pb2.FingerRequest(fingerprint=finger),
                BiometricaClient.timeout,
            )
            print(
                "Finger Status: "
                + response.message
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")
            return response.auth
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def FingerTAuth(self, finger, ticket):
        try:
            response = self.client.FingerTAuth(
                biometrica_pb2.FingerTRequest(fingerprint=finger, ticket=ticket),
                BiometricaClient.timeout,
            )
            return [response.auth, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def FingerTAuthVerbose(self, finger, ticket):
        try:
            print(
                "Requested Fingerprint ByteLength: "
                + str(len(finger))
                + "\t ticket:"
                + str(ticket)
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = self.client.FingerTAuth(
                biometrica_pb2.FingerTRequest(fingerprint=finger, ticket=ticket),
                BiometricaClient.timeout,
            )
            print(
                "Finger Status: "
                + response.message
                + "\t ticket:"
                + str(response.ticket)
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")
            return [response.auth, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def GetNewTicket(self):
        try:
            response = self.client.GetNewTicket(
                biometrica_pb2.TicketRequest(), BiometricaClient.timeout
            )
            return [response.status, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def GetNewTicketVerbose(self):
        try:
            print(
                "Requested new ticket "
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            response = self.client.GetNewTicket(
                biometrica_pb2.TicketRequest(), BiometricaClient.timeout
            )
            print(
                "Ticket Status: "
                + response.message
                + "\t ticket:"
                + str(response.ticket)
                + "\t"
                + datetime.datetime.now().strftime("%H:%M:%S")
            )
            print(" ")
            return [response.status, response.ticket, response.message]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)

    def SendPhoto(self, string, ticket, type='base64'):
        try:
            response = self.client.SendPhoto(biometrica_pb2.PhotoRequest(photo=string, type=type,ticket=ticket))
            return [response.status, response.ticket]
        except Exception as inst:
            print(type(inst))  # the exception instance
            print(inst.args)  # arguments stored in .args
            print(inst)


    def run():
        ip = "localhost"
        #ip = "192.168.137.10"
        port = "50051"
    # ip = "localhost"
        # port = "13986"
        # secret = "qwerty123"
        secret = "qwerty123"
        # f = open("finger.txt", "rb")
        # finger = f.read()
        finger = "04"

        client = BiometricaClient(ip, port, secret)
        client.Start()
        client.CardAuthVerbose("465465576")
        client.CardAuthVerbose("984635009")
        client.FingerAuthVerbose(finger)

        ticket = client.GetNewTicketVerbose()[1]
        print(str(ticket))


        client.CardTAuthVerbose("984635009", ticket)
        client.FingerTAuthVerbose(finger, ticket)
        client.SendPhoto("",ticket)

        client.FingerTAuthVerbose("03", ticket)


if __name__ == "__main__":
    BiometricaClient.run()
