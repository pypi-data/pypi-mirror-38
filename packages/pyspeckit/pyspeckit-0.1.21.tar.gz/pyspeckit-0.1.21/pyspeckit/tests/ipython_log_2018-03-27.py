########################################################
# Started Logging At: 2018-03-27 10:18:41
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:18:42
########################################################
get_ipython().magic('run simple_fit_interactive.py')
spec.baseline.includemask
spec.baseline.includemask.any()
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)
xy

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()


for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()

spec.baseline.highlight_fitregion()
spec.specfit(interactive=True)
get_ipython().magic('paste')
xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.baseline.event_manager(ev)
for ev in events:
    print("Events x={0},y={1},button={2}".format(ev.xdata,ev.ydata,ev.button))
    spec.baseline.event_manager(ev)

pl.close('all')
########################################################
# Started Logging At: 2018-03-27 10:27:39
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:27:39
########################################################
get_ipython().magic('run simple_fit_interactive.py')
import pylab as pl
pl.close('all')
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()
pl.close('all')
get_ipython().magic('run simple_fit_interactive.py')
sp.specfit.fitty
sp.specfit.fittype
spec.specfit.fittype
pl.close('all')
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1},button={2}".format(ev.xdata,ev.ydata,ev.button))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()

spec.specfit(interactive=True)

xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

def events_(KeyEvent=matplotlib.backend_bases.KeyEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [KeyEvent('button_press_event', canvas,
                     x=xp, y=yp, key=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_(matplotlib.backend_bases.KeyEvent,
                 spec.plotter.axis.figure.canvas, xy, buttons)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.specfit.event_manager(ev)

print("Includemask before excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.baseline(excludefit=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.specfit(guesses=spec.specfit.modelpars)

np.testing.assert_array_almost_equal(spec.specfit.parinfo.values,
                                     np.array([0.149995,  27.160603,   0.930399]))
get_ipython().magic('paste')
print("Doing the interactive thing now")
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='o')
# event 1 is clicking the zoom button
x,y = transform((-20,-0.07))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes = spec.plotter.axis
get_ipython().magic('paste')
event3 = matplotlib.backend_bases.MouseEvent('motion_notify_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event3.inaxes = spec.plotter.axis

x,y = transform((75,0.16))
event4 = matplotlib.backend_bases.MouseEvent('button_release_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event4.inaxes = spec.plotter.axis
get_ipython().magic('paste')
if hasattr(spec.plotter.figure.canvas,'toolbar'):
    spec.plotter.figure.canvas.toolbar.press_zoom(event2)
    # mpl 1.5:
    # lastx, lasty, a, ind, view = self._xypress[0]
    if StrictVersion(matplotlib.__version__) >= StrictVersion('1.5.0'):
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen())]
    else:
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen(),spec.plotter.axis.transData.frozen())]
    spec.plotter.figure.canvas.toolbar.drag_zoom(event3)
    spec.plotter.figure.canvas.toolbar.release_zoom(event4)

    # make sure zoom worked
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), [-20, 75])
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_ylim(), [-0.07, 0.16])
else:
    spec.plotter.axis.set_xlim(-20, 75)
    spec.plotter.axis.set_ylim(-0.07, 0.16)
print("Includemask before excludefit with window limits: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() == 507
spec.baseline(excludefit=True,use_window_limits=True,highlight=True)
spec.plotter.xmin
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1},button={2}".format(ev.xdata,ev.ydata,ev.button))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()

spec.specfit(interactive=True)

xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

def events_(KeyEvent=matplotlib.backend_bases.KeyEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [KeyEvent('button_press_event', canvas,
                     x=xp, y=yp, key=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_(matplotlib.backend_bases.KeyEvent,
                 spec.plotter.axis.figure.canvas, xy, buttons)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.specfit.event_manager(ev)

print("Includemask before excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.baseline(excludefit=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.specfit(guesses=spec.specfit.modelpars)

np.testing.assert_array_almost_equal(spec.specfit.parinfo.values,
                                     np.array([0.149995,  27.160603,   0.930399]))


spec.plotter.figure.savefig(savedir+"simple_fit_interactive_HCOp.png")

print("Doing the interactive thing now")
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='o')
# event 1 is clicking the zoom button
x,y = transform((-20,-0.07))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes = spec.plotter.axis

event3 = matplotlib.backend_bases.MouseEvent('motion_notify_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event3.inaxes = spec.plotter.axis

x,y = transform((75,0.16))
event4 = matplotlib.backend_bases.MouseEvent('button_release_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event4.inaxes = spec.plotter.axis

if hasattr(spec.plotter.figure.canvas,'toolbar'):
    spec.plotter.figure.canvas.toolbar.press_zoom(event2)
    # mpl 1.5:
    # lastx, lasty, a, ind, view = self._xypress[0]
    if StrictVersion(matplotlib.__version__) >= StrictVersion('1.5.0'):
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen())]
    else:
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen(),spec.plotter.axis.transData.frozen())]
    spec.plotter.figure.canvas.toolbar.drag_zoom(event3)
    spec.plotter.figure.canvas.toolbar.release_zoom(event4)

    # make sure zoom worked
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), [-20, 75])
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_ylim(), [-0.07, 0.16])
else:
    spec.plotter.axis.set_xlim(-20, 75)
    spec.plotter.axis.set_ylim(-0.07, 0.16)

#spec.plotter.debug=True
print("Includemask before excludefit with window limits: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() == 507
spec.plotter.xmin
spec.plotter.xmax
########################################################
# Started Logging At: 2018-03-27 10:38:29
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:38:30
########################################################
########################################################
# Started Logging At: 2018-03-27 10:38:31
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:38:31
########################################################
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('run simple_fit_interactive.py')
spec._window_limits
spec.plotter._window_limits
spec.plotter.axis.get_xlim()
spec.plotter.axis.update_datalim()
spec.plotter.axis.update_datalim_bounds()
spec.plotter.axis.update()
spec.plotter.axis.draw()
pl.draw(); pl.show()
import pylab as pl
pl.draw(); pl.show()
spec.plotter.axis.get_xlim()
get_ipython().magic('run simple_fit_interactive.py')
spec.plotter._window_limits
spec.plotter.axis.autoscale_view()
spec.plotter._window_limits
spec.plotter.axis.dataLim
spec.plotter.axis.dataLim.bounds
########################################################
# Started Logging At: 2018-03-27 10:46:17
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:46:18
########################################################
get_ipython().magic('run simple_fit_interactive.py')
########################################################
# Started Logging At: 2018-03-27 10:46:36
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:46:37
########################################################
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1},button={2}".format(ev.xdata,ev.ydata,ev.button))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()

spec.specfit(interactive=True)

xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

def events_(KeyEvent=matplotlib.backend_bases.KeyEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [KeyEvent('button_press_event', canvas,
                     x=xp, y=yp, key=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_(matplotlib.backend_bases.KeyEvent,
                 spec.plotter.axis.figure.canvas, xy, buttons)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.specfit.event_manager(ev)

print("Includemask before excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.baseline(excludefit=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.specfit(guesses=spec.specfit.modelpars)

np.testing.assert_array_almost_equal(spec.specfit.parinfo.values,
                                     np.array([0.149995,  27.160603,   0.930399]))


spec.plotter.figure.savefig(savedir+"simple_fit_interactive_HCOp.png")

print("Doing the interactive thing now")
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='o')
# event 1 is clicking the zoom button
x,y = transform((-20,-0.07))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes = spec.plotter.axis

event3 = matplotlib.backend_bases.MouseEvent('motion_notify_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event3.inaxes = spec.plotter.axis

x,y = transform((75,0.16))
event4 = matplotlib.backend_bases.MouseEvent('button_release_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event4.inaxes = spec.plotter.axis

if hasattr(spec.plotter.figure.canvas,'toolbar'):
    spec.plotter.figure.canvas.toolbar.press_zoom(event2)
    # mpl 1.5:
    # lastx, lasty, a, ind, view = self._xypress[0]
    if StrictVersion(matplotlib.__version__) >= StrictVersion('1.5.0'):
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen())]
    else:
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen(),spec.plotter.axis.transData.frozen())]
    spec.plotter.figure.canvas.toolbar.drag_zoom(event3)
    spec.plotter.figure.canvas.toolbar.release_zoom(event4)

    # make sure zoom worked
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), [-20, 75])
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_ylim(), [-0.07, 0.16])
else:
    spec.plotter.axis.set_xlim(-20, 75)
    spec.plotter.axis.set_ylim(-0.07, 0.16)
get_ipython().magic('paste')
from __future__ import print_function
import pyspeckit
import matplotlib
import numpy as np
from astropy import units as u
from distutils.version import StrictVersion

if not 'savedir' in globals():
    savedir = ''

# load a FITS-compliant spectrum
spec = pyspeckit.Spectrum('10074-190_HCOp.fits')
# The units are originally frequency (check this by printing spec.xarr.units).
# I want to know the velocity.  Convert!
# Note that this only works because the reference frequency is set in the header
# this is no longer necessary!  #spec.xarr.frequency_to_velocity()
# Default conversion is to m/s, but we traditionally work in km/s
spec.xarr = spec.xarr.as_unit('km/s', equivalencies=u.doppler_radio(spec.xarr.center_frequency))
# plot it up!
spec.plotter()
# Subtract a baseline (the data is only 'mostly' reduced)
spec.baseline(interactive=True)

# specify x points in data units.  We need to transform them to axis units
# because the axis are not consistently generated by mpl
xpoints = [-270,0,50,218,218]
ypoints = [0]*5
buttons = [1,1,1,1,2]
transform = spec.plotter.axis.transData.transform_point
# this absolutely ridiculous line is to deal with scope changes from py2->py3
# http://stackoverflow.com/questions/13905741/accessing-class-variables-from-a-list-comprehension-in-the-class-definition#comment19179733_13913933
def xy_(transform, xpoints, ypoints):
    return [transform((xp,yp)) for xp,yp in zip(xpoints,ypoints)]
xy = xy_(transform, xpoints, ypoints)

mouseevent = matplotlib.backend_bases.MouseEvent
def events_(MouseEvent=matplotlib.backend_bases.MouseEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [MouseEvent('button_press_event', canvas,
                       xp, yp, button=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_()

for ev in events:
    print("Events x={0},y={1},button={2}".format(ev.xdata,ev.ydata,ev.button))
    spec.baseline.event_manager(ev)

spec.baseline.highlight_fitregion()

spec.specfit(interactive=True)

xpoints = [0,50,26,28,28]
ypoints = [0, 0, 0.14, 0.07, 0]
buttons = [1,1,2,2,3]
xy = xy_(transform, xpoints, ypoints)

def events_(KeyEvent=matplotlib.backend_bases.KeyEvent,
            canvas=spec.plotter.axis.figure.canvas,
            xy=xy,
            buttons=buttons):
    return [KeyEvent('button_press_event', canvas,
                     x=xp, y=yp, key=bt) for (xp,yp),bt in zip(xy,buttons)]
events = events_(matplotlib.backend_bases.KeyEvent,
                 spec.plotter.axis.figure.canvas, xy, buttons)

for ev in events:
    print("Events x={0},y={1}".format(ev.xdata,ev.ydata))
    spec.specfit.event_manager(ev)

print("Includemask before excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.baseline(excludefit=True)
spec.baseline.highlight_fitregion()
print("Includemask after excludefit: ",spec.xarr[spec.baseline.includemask]," length = ",spec.baseline.includemask.sum())
assert spec.baseline.includemask.sum() > 0
spec.specfit(guesses=spec.specfit.modelpars)

np.testing.assert_array_almost_equal(spec.specfit.parinfo.values,
                                     np.array([0.149995,  27.160603,   0.930399]))


spec.plotter.figure.savefig(savedir+"simple_fit_interactive_HCOp.png")

print("Doing the interactive thing now")
event1 = matplotlib.backend_bases.KeyEvent('key_press_event', spec.plotter.axis.figure.canvas,key='o')
# event 1 is clicking the zoom button
x,y = transform((-20,-0.07))
event2 = matplotlib.backend_bases.MouseEvent('button_press_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event2.inaxes = spec.plotter.axis

event3 = matplotlib.backend_bases.MouseEvent('motion_notify_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event3.inaxes = spec.plotter.axis

x,y = transform((75,0.16))
event4 = matplotlib.backend_bases.MouseEvent('button_release_event', spec.plotter.axis.figure.canvas,button=1,x=x,y=y)
event4.inaxes = spec.plotter.axis

if hasattr(spec.plotter.figure.canvas,'toolbar'):
    spec.plotter.figure.canvas.toolbar.press_zoom(event2)
    # mpl 1.5:
    # lastx, lasty, a, ind, view = self._xypress[0]
    if StrictVersion(matplotlib.__version__) >= StrictVersion('1.5.0'):
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen())]
    else:
        spec.plotter.figure.canvas.toolbar._xypress=[(event2.x,event2.y,spec.plotter.axis,0,spec.plotter.axis.viewLim.frozen(),spec.plotter.axis.transData.frozen())]
    spec.plotter.figure.canvas.toolbar.drag_zoom(event3)
    spec.plotter.figure.canvas.toolbar.release_zoom(event4)

    # make sure zoom worked
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), [-20, 75])
    np.testing.assert_array_almost_equal(spec.plotter.axis.get_ylim(), [-0.07, 0.16])
else:
    spec.plotter.axis.set_xlim(-20, 75)
    spec.plotter.axis.set_ylim(-0.07, 0.16)
spec.plotter._stash_window_limits()
spec.plotter._window_limits
get_ipython().magic('history ')
spec.plotter._stash_window_limits()
spec.plotter._window_limits
spec.plotter.axis.get_xlim()
spec.plotter.axis.get_xlim()
np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), (-20.0, 75.0))
np.testing.assert_array_almost_equal(spec.plotter.axis.get_xlim(), (-20.0, 75.0))
########################################################
# Started Logging At: 2018-03-27 10:49:57
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:49:58
########################################################
########################################################
# Started Logging At: 2018-03-27 10:50:03
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:50:03
########################################################
########################################################
# Started Logging At: 2018-03-27 10:50:04
########################################################

########################################################
# Started Logging At: 2018-03-27 10:50:09
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:50:09
########################################################
########################################################
# Started Logging At: 2018-03-27 10:50:31
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:50:31
########################################################
########################################################
# Started Logging At: 2018-03-27 10:50:36
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:50:36
########################################################
spec.plotter.axis.get_xlim()
spec.plotter.axis.dataLim
dir(spec.plotter.axis)
spec.plotter.axis.transLimits
[x for x in dir(spec.plotter.axis) if 'lim' in x.lower()]
spec.plotter.axis.viewLim
spec.plotter.axis.get_xlim()
get_ipython().magic('pinfo2 spec.plotter.axis.get_xlim')
########################################################
# Started Logging At: 2018-03-27 10:54:52
########################################################

########################################################
# # Started Logging At: 2018-03-27 10:54:52
########################################################
spec.plotter.axis.viewLim.intervalx
spec.plotter.xmin
get_ipython().magic('run simple_fit_interactive.py')
get_ipython().magic('debug')
########################################################
# Started Logging At: 2018-03-27 11:00:00
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:00:01
########################################################
########################################################
# Started Logging At: 2018-03-27 11:03:03
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:03:04
########################################################
get_ipython().magic('debug')
get_ipython().magic('debug')
########################################################
# Started Logging At: 2018-03-27 11:03:27
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:03:28
########################################################
########################################################
# Started Logging At: 2018-03-27 11:03:41
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:03:41
########################################################
########################################################
# Started Logging At: 2018-03-27 11:03:46
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:03:47
########################################################
log.setLevel('DEBUG')
########################################################
# Started Logging At: 2018-03-27 11:05:38
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:05:38
########################################################
########################################################
# Started Logging At: 2018-03-27 11:09:52
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:09:53
########################################################
########################################################
# Started Logging At: 2018-03-27 11:13:14
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:13:14
########################################################
########################################################
# Started Logging At: 2018-03-27 11:13:31
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:13:31
########################################################
########################################################
# Started Logging At: 2018-03-27 11:13:55
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:13:56
########################################################
########################################################
# Started Logging At: 2018-03-27 11:14:49
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:14:49
########################################################
########################################################
# Started Logging At: 2018-03-27 11:15:52
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:15:52
########################################################
########################################################
# Started Logging At: 2018-03-27 11:16:12
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:16:13
########################################################
########################################################
# Started Logging At: 2018-03-27 11:17:01
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:17:01
########################################################
########################################################
# Started Logging At: 2018-03-27 11:18:01
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:18:01
########################################################
########################################################
# Started Logging At: 2018-03-27 11:20:12
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:20:12
########################################################
########################################################
# Started Logging At: 2018-03-27 11:23:10
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:23:10
########################################################
########################################################
# Started Logging At: 2018-03-27 11:23:12
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:23:12
########################################################
########################################################
# Started Logging At: 2018-03-27 11:23:29
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:23:30
########################################################
########################################################
# Started Logging At: 2018-03-27 11:23:31
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:23:32
########################################################
########################################################
# Started Logging At: 2018-03-27 11:24:58
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:24:58
########################################################
########################################################
# Started Logging At: 2018-03-27 11:25:07
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:25:07
########################################################
########################################################
# Started Logging At: 2018-03-27 11:25:10
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:25:11
########################################################
########################################################
# Started Logging At: 2018-03-27 11:26:36
########################################################

log.setLevel('DEBUG')
########################################################
# # Started Logging At: 2018-03-27 11:26:36
########################################################
########################################################
# Started Logging At: 2018-03-27 11:26:38
########################################################

########################################################
# # Started Logging At: 2018-03-27 11:26:39
########################################################
