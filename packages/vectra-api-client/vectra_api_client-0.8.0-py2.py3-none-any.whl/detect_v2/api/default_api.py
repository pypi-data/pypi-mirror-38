# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from detect_v2.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def detections_get(self, **kwargs):  # noqa: E501
        """Detection objects contain all the information related to security events detected on the network.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: The category of the vname attack detected.
        :param int page:
        :param str min_id: >= the id provided
        :param int max_id: <= the id provided
        :param str state: filter by state: active, inactive, ignored, ignored4all
        :param str description: filter by the detection description
        :param str detection_type: filter by the detection type (verbose name)
        :param str detection: filter by the detection type (verbose name)
        :param str detection_category: filter by the detection category
        :param str category2: filter by the detection category
        :param str src_ip: filter by source (ip address)
        :param int threat: filter by threat score
        :param int threat_gte: filter by threat score >= the score provided
        :param int certainty: filter by certainty score
        :param int certainty_gte: filter by certainty score >= the score provided
        :param datetime last_timestamp: filter by last_timestamp
        :param str host_id: filter by id of the host object a detection is attributed to
        :param list[str] tags: User defined tags added to the detection.
        :param bool is_targeting_key_asset: filter by detections that are targeting a key asset: True, False
        :param datetime note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided: 2017-12-31T16:55:50Z
        :return: DetectionsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.detections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def detections_get_with_http_info(self, **kwargs):  # noqa: E501
        """Detection objects contain all the information related to security events detected on the network.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str category: The category of the vname attack detected.
        :param int page:
        :param str min_id: >= the id provided
        :param int max_id: <= the id provided
        :param str state: filter by state: active, inactive, ignored, ignored4all
        :param str description: filter by the detection description
        :param str detection_type: filter by the detection type (verbose name)
        :param str detection: filter by the detection type (verbose name)
        :param str detection_category: filter by the detection category
        :param str category2: filter by the detection category
        :param str src_ip: filter by source (ip address)
        :param int threat: filter by threat score
        :param int threat_gte: filter by threat score >= the score provided
        :param int certainty: filter by certainty score
        :param int certainty_gte: filter by certainty score >= the score provided
        :param datetime last_timestamp: filter by last_timestamp
        :param str host_id: filter by id of the host object a detection is attributed to
        :param list[str] tags: User defined tags added to the detection.
        :param bool is_targeting_key_asset: filter by detections that are targeting a key asset: True, False
        :param datetime note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided: 2017-12-31T16:55:50Z
        :return: DetectionsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['category', 'page', 'min_id', 'max_id', 'state', 'description', 'detection_type', 'detection', 'detection_category', 'category2', 'src_ip', 'threat', 'threat_gte', 'certainty', 'certainty_gte', 'last_timestamp', 'host_id', 'tags', 'is_targeting_key_asset', 'note_modified_timestamp_gte']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detections_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'category' in local_var_params:
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'min_id' in local_var_params:
            query_params.append(('min_id', local_var_params['min_id']))  # noqa: E501
        if 'max_id' in local_var_params:
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501
        if 'state' in local_var_params:
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 'description' in local_var_params:
            query_params.append(('description', local_var_params['description']))  # noqa: E501
        if 'detection_type' in local_var_params:
            query_params.append(('detection_type', local_var_params['detection_type']))  # noqa: E501
        if 'detection' in local_var_params:
            query_params.append(('detection', local_var_params['detection']))  # noqa: E501
        if 'detection_category' in local_var_params:
            query_params.append(('detection_category', local_var_params['detection_category']))  # noqa: E501
        if 'category2' in local_var_params:
            query_params.append(('category', local_var_params['category2']))  # noqa: E501
        if 'src_ip' in local_var_params:
            query_params.append(('src_ip', local_var_params['src_ip']))  # noqa: E501
        if 'threat' in local_var_params:
            query_params.append(('threat', local_var_params['threat']))  # noqa: E501
        if 'threat_gte' in local_var_params:
            query_params.append(('threat_gte', local_var_params['threat_gte']))  # noqa: E501
        if 'certainty' in local_var_params:
            query_params.append(('certainty', local_var_params['certainty']))  # noqa: E501
        if 'certainty_gte' in local_var_params:
            query_params.append(('certainty_gte', local_var_params['certainty_gte']))  # noqa: E501
        if 'last_timestamp' in local_var_params:
            query_params.append(('last_timestamp', local_var_params['last_timestamp']))  # noqa: E501
        if 'host_id' in local_var_params:
            query_params.append(('host_id', local_var_params['host_id']))  # noqa: E501
        if 'tags' in local_var_params:
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
            collection_formats['tags'] = 'multi'  # noqa: E501
        if 'is_targeting_key_asset' in local_var_params:
            query_params.append(('is_targeting_key_asset', local_var_params['is_targeting_key_asset']))  # noqa: E501
        if 'note_modified_timestamp_gte' in local_var_params:
            query_params.append(('note_modified_timestamp_gte', local_var_params['note_modified_timestamp_gte']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TokenAuth']  # noqa: E501

        return self.api_client.call_api(
            '/detections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetectionsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
