# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v1  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class SystemInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'colossus_mode': 'str',
        'platform_version': 'str',
        'serial_number': 'str',
        'ui_version': 'str',
        'version': 'str'
    }

    attribute_map = {
        'colossus_mode': 'colossus_mode',
        'platform_version': 'platform_version',
        'serial_number': 'serial_number',
        'ui_version': 'ui_version',
        'version': 'version'
    }

    def __init__(self, colossus_mode=None, platform_version=None, serial_number=None, ui_version=None, version=None):  # noqa: E501
        """SystemInfo - a model defined in OpenAPI"""  # noqa: E501

        self._colossus_mode = None
        self._platform_version = None
        self._serial_number = None
        self._ui_version = None
        self._version = None
        self.discriminator = None

        if colossus_mode is not None:
            self.colossus_mode = colossus_mode
        if platform_version is not None:
            self.platform_version = platform_version
        if serial_number is not None:
            self.serial_number = serial_number
        if ui_version is not None:
            self.ui_version = ui_version
        if version is not None:
            self.version = version

    @property
    def colossus_mode(self):
        """Gets the colossus_mode of this SystemInfo.  # noqa: E501


        :return: The colossus_mode of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._colossus_mode

    @colossus_mode.setter
    def colossus_mode(self, colossus_mode):
        """Sets the colossus_mode of this SystemInfo.


        :param colossus_mode: The colossus_mode of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._colossus_mode = colossus_mode

    @property
    def platform_version(self):
        """Gets the platform_version of this SystemInfo.  # noqa: E501


        :return: The platform_version of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._platform_version

    @platform_version.setter
    def platform_version(self, platform_version):
        """Sets the platform_version of this SystemInfo.


        :param platform_version: The platform_version of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._platform_version = platform_version

    @property
    def serial_number(self):
        """Gets the serial_number of this SystemInfo.  # noqa: E501


        :return: The serial_number of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this SystemInfo.


        :param serial_number: The serial_number of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def ui_version(self):
        """Gets the ui_version of this SystemInfo.  # noqa: E501


        :return: The ui_version of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._ui_version

    @ui_version.setter
    def ui_version(self, ui_version):
        """Sets the ui_version of this SystemInfo.


        :param ui_version: The ui_version of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._ui_version = ui_version

    @property
    def version(self):
        """Gets the version of this SystemInfo.  # noqa: E501


        :return: The version of this SystemInfo.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this SystemInfo.


        :param version: The version of this SystemInfo.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
