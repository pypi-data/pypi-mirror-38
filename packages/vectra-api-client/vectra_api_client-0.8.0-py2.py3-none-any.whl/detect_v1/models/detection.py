# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v1  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Detection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'c_score': 'int',
        'category': 'str',
        'description': 'str',
        'detection_detail_set': 'list[DetectionDetails]',
        'dns_set': 'list[str]',
        'first_timestamp': 'str',
        'host': 'str',
        'id': 'int',
        'last_timestamp': 'str',
        'relayed_comm_set': 'list[str]',
        'sensor_luid': 'str',
        'src_ip': 'str',
        'state': 'str',
        'summary': 'object',
        't_score': 'int',
        'tags': 'list[str]',
        'targets_key_asset': 'bool',
        'triage_rule_id': 'str',
        'type_vname': 'str',
        'url': 'str'
    }

    attribute_map = {
        'c_score': 'c_score',
        'category': 'category',
        'description': 'description',
        'detection_detail_set': 'detection_detail_set',
        'dns_set': 'dns_set',
        'first_timestamp': 'first_timestamp',
        'host': 'host',
        'id': 'id',
        'last_timestamp': 'last_timestamp',
        'relayed_comm_set': 'relayed_comm_set',
        'sensor_luid': 'sensor_luid',
        'src_ip': 'src_ip',
        'state': 'state',
        'summary': 'summary',
        't_score': 't_score',
        'tags': 'tags',
        'targets_key_asset': 'targets_key_asset',
        'triage_rule_id': 'triage_rule_id',
        'type_vname': 'type_vname',
        'url': 'url'
    }

    def __init__(self, c_score=None, category=None, description=None, detection_detail_set=None, dns_set=None, first_timestamp=None, host=None, id=None, last_timestamp=None, relayed_comm_set=None, sensor_luid=None, src_ip=None, state=None, summary=None, t_score=None, tags=None, targets_key_asset=None, triage_rule_id=None, type_vname=None, url=None):  # noqa: E501
        """Detection - a model defined in OpenAPI"""  # noqa: E501

        self._c_score = None
        self._category = None
        self._description = None
        self._detection_detail_set = None
        self._dns_set = None
        self._first_timestamp = None
        self._host = None
        self._id = None
        self._last_timestamp = None
        self._relayed_comm_set = None
        self._sensor_luid = None
        self._src_ip = None
        self._state = None
        self._summary = None
        self._t_score = None
        self._tags = None
        self._targets_key_asset = None
        self._triage_rule_id = None
        self._type_vname = None
        self._url = None
        self.discriminator = None

        if c_score is not None:
            self.c_score = c_score
        if category is not None:
            self.category = category
        self.description = description
        if detection_detail_set is not None:
            self.detection_detail_set = detection_detail_set
        if dns_set is not None:
            self.dns_set = dns_set
        if first_timestamp is not None:
            self.first_timestamp = first_timestamp
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if relayed_comm_set is not None:
            self.relayed_comm_set = relayed_comm_set
        if sensor_luid is not None:
            self.sensor_luid = sensor_luid
        if src_ip is not None:
            self.src_ip = src_ip
        if state is not None:
            self.state = state
        self.summary = summary
        if t_score is not None:
            self.t_score = t_score
        if tags is not None:
            self.tags = tags
        if targets_key_asset is not None:
            self.targets_key_asset = targets_key_asset
        self.triage_rule_id = triage_rule_id
        if type_vname is not None:
            self.type_vname = type_vname
        if url is not None:
            self.url = url

    @property
    def c_score(self):
        """Gets the c_score of this Detection.  # noqa: E501

        The certainty score attributed to the detection.  # noqa: E501

        :return: The c_score of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._c_score

    @c_score.setter
    def c_score(self, c_score):
        """Sets the c_score of this Detection.

        The certainty score attributed to the detection.  # noqa: E501

        :param c_score: The c_score of this Detection.  # noqa: E501
        :type: int
        """

        self._c_score = c_score

    @property
    def category(self):
        """Gets the category of this Detection.  # noqa: E501

        The category of the vname attack detected.  # noqa: E501

        :return: The category of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Detection.

        The category of the vname attack detected.  # noqa: E501

        :param category: The category of this Detection.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Detection.  # noqa: E501


        :return: The description of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Detection.


        :param description: The description of this Detection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def detection_detail_set(self):
        """Gets the detection_detail_set of this Detection.  # noqa: E501

        Indicates the number of nested records.  # noqa: E501

        :return: The detection_detail_set of this Detection.  # noqa: E501
        :rtype: list[DetectionDetails]
        """
        return self._detection_detail_set

    @detection_detail_set.setter
    def detection_detail_set(self, detection_detail_set):
        """Sets the detection_detail_set of this Detection.

        Indicates the number of nested records.  # noqa: E501

        :param detection_detail_set: The detection_detail_set of this Detection.  # noqa: E501
        :type: list[DetectionDetails]
        """

        self._detection_detail_set = detection_detail_set

    @property
    def dns_set(self):
        """Gets the dns_set of this Detection.  # noqa: E501


        :return: The dns_set of this Detection.  # noqa: E501
        :rtype: list[str]
        """
        return self._dns_set

    @dns_set.setter
    def dns_set(self, dns_set):
        """Sets the dns_set of this Detection.


        :param dns_set: The dns_set of this Detection.  # noqa: E501
        :type: list[str]
        """

        self._dns_set = dns_set

    @property
    def first_timestamp(self):
        """Gets the first_timestamp of this Detection.  # noqa: E501

        The timestamp when the event was first detected.  # noqa: E501

        :return: The first_timestamp of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._first_timestamp

    @first_timestamp.setter
    def first_timestamp(self, first_timestamp):
        """Sets the first_timestamp of this Detection.

        The timestamp when the event was first detected.  # noqa: E501

        :param first_timestamp: The first_timestamp of this Detection.  # noqa: E501
        :type: str
        """

        self._first_timestamp = first_timestamp

    @property
    def host(self):
        """Gets the host of this Detection.  # noqa: E501

        The URL that links directly to the host record.  # noqa: E501

        :return: The host of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Detection.

        The URL that links directly to the host record.  # noqa: E501

        :param host: The host of this Detection.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Detection.  # noqa: E501

        Object ID.  # noqa: E501

        :return: The id of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detection.

        Object ID.  # noqa: E501

        :param id: The id of this Detection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this Detection.  # noqa: E501

        The timestamp when the event was last detected.  # noqa: E501

        :return: The last_timestamp of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this Detection.

        The timestamp when the event was last detected.  # noqa: E501

        :param last_timestamp: The last_timestamp of this Detection.  # noqa: E501
        :type: str
        """

        self._last_timestamp = last_timestamp

    @property
    def relayed_comm_set(self):
        """Gets the relayed_comm_set of this Detection.  # noqa: E501


        :return: The relayed_comm_set of this Detection.  # noqa: E501
        :rtype: list[str]
        """
        return self._relayed_comm_set

    @relayed_comm_set.setter
    def relayed_comm_set(self, relayed_comm_set):
        """Sets the relayed_comm_set of this Detection.


        :param relayed_comm_set: The relayed_comm_set of this Detection.  # noqa: E501
        :type: list[str]
        """

        self._relayed_comm_set = relayed_comm_set

    @property
    def sensor_luid(self):
        """Gets the sensor_luid of this Detection.  # noqa: E501

        The sensor local unique ID where this flow was detected from.  # noqa: E501

        :return: The sensor_luid of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._sensor_luid

    @sensor_luid.setter
    def sensor_luid(self, sensor_luid):
        """Sets the sensor_luid of this Detection.

        The sensor local unique ID where this flow was detected from.  # noqa: E501

        :param sensor_luid: The sensor_luid of this Detection.  # noqa: E501
        :type: str
        """

        self._sensor_luid = sensor_luid

    @property
    def src_ip(self):
        """Gets the src_ip of this Detection.  # noqa: E501

        The source IP address of the host attributed to the security event.  # noqa: E501

        :return: The src_ip of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this Detection.

        The source IP address of the host attributed to the security event.  # noqa: E501

        :param src_ip: The src_ip of this Detection.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def state(self):
        """Gets the state of this Detection.  # noqa: E501

        The state of the detection.  # noqa: E501

        :return: The state of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Detection.

        The state of the detection.  # noqa: E501

        :param state: The state of this Detection.  # noqa: E501
        :type: str
        """
        allowed_values = ["inactive", "active"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def summary(self):
        """Gets the summary of this Detection.  # noqa: E501


        :return: The summary of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Detection.


        :param summary: The summary of this Detection.  # noqa: E501
        :type: object
        """

        self._summary = summary

    @property
    def t_score(self):
        """Gets the t_score of this Detection.  # noqa: E501

        The threat score attributed to the detection.  # noqa: E501

        :return: The t_score of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._t_score

    @t_score.setter
    def t_score(self, t_score):
        """Sets the t_score of this Detection.

        The threat score attributed to the detection.  # noqa: E501

        :param t_score: The t_score of this Detection.  # noqa: E501
        :type: int
        """

        self._t_score = t_score

    @property
    def tags(self):
        """Gets the tags of this Detection.  # noqa: E501


        :return: The tags of this Detection.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Detection.


        :param tags: The tags of this Detection.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def targets_key_asset(self):
        """Gets the targets_key_asset of this Detection.  # noqa: E501


        :return: The targets_key_asset of this Detection.  # noqa: E501
        :rtype: bool
        """
        return self._targets_key_asset

    @targets_key_asset.setter
    def targets_key_asset(self, targets_key_asset):
        """Sets the targets_key_asset of this Detection.


        :param targets_key_asset: The targets_key_asset of this Detection.  # noqa: E501
        :type: bool
        """

        self._targets_key_asset = targets_key_asset

    @property
    def triage_rule_id(self):
        """Gets the triage_rule_id of this Detection.  # noqa: E501


        :return: The triage_rule_id of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._triage_rule_id

    @triage_rule_id.setter
    def triage_rule_id(self, triage_rule_id):
        """Sets the triage_rule_id of this Detection.


        :param triage_rule_id: The triage_rule_id of this Detection.  # noqa: E501
        :type: str
        """

        self._triage_rule_id = triage_rule_id

    @property
    def type_vname(self):
        """Gets the type_vname of this Detection.  # noqa: E501

        The name of the threat detected.  # noqa: E501

        :return: The type_vname of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._type_vname

    @type_vname.setter
    def type_vname(self, type_vname):
        """Sets the type_vname of this Detection.

        The name of the threat detected.  # noqa: E501

        :param type_vname: The type_vname of this Detection.  # noqa: E501
        :type: str
        """

        self._type_vname = type_vname

    @property
    def url(self):
        """Gets the url of this Detection.  # noqa: E501

        The URL that links directly to the detection record.  # noqa: E501

        :return: The url of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Detection.

        The URL that links directly to the detection record.  # noqa: E501

        :param url: The url of this Detection.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
