# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v1  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Host(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'c_score': 'int',
        'detection_set': 'list[str]',
        'host_artifact_set': 'list[HostArtifact]',
        'id': 'int',
        'key_asset': 'bool',
        'last_detection_timestamp': 'str',
        'last_source': 'str',
        'name': 'str',
        'new_host_pointer': 'str',
        'note': 'str',
        'owner_name': 'str',
        'sensor_luid': 'str',
        'state': 'str',
        't_score': 'int',
        'tags': 'list[str]',
        'targets_key_asset': 'bool',
        'url': 'str'
    }

    attribute_map = {
        'c_score': 'c_score',
        'detection_set': 'detection_set',
        'host_artifact_set': 'host_artifact_set',
        'id': 'id',
        'key_asset': 'key_asset',
        'last_detection_timestamp': 'last_detection_timestamp',
        'last_source': 'last_source',
        'name': 'name',
        'new_host_pointer': 'new_host_pointer',
        'note': 'note',
        'owner_name': 'owner_name',
        'sensor_luid': 'sensor_luid',
        'state': 'state',
        't_score': 't_score',
        'tags': 'tags',
        'targets_key_asset': 'targets_key_asset',
        'url': 'url'
    }

    def __init__(self, c_score=None, detection_set=None, host_artifact_set=None, id=None, key_asset=None, last_detection_timestamp=None, last_source=None, name=None, new_host_pointer=None, note=None, owner_name=None, sensor_luid=None, state=None, t_score=None, tags=None, targets_key_asset=None, url=None):  # noqa: E501
        """Host - a model defined in OpenAPI"""  # noqa: E501

        self._c_score = None
        self._detection_set = None
        self._host_artifact_set = None
        self._id = None
        self._key_asset = None
        self._last_detection_timestamp = None
        self._last_source = None
        self._name = None
        self._new_host_pointer = None
        self._note = None
        self._owner_name = None
        self._sensor_luid = None
        self._state = None
        self._t_score = None
        self._tags = None
        self._targets_key_asset = None
        self._url = None
        self.discriminator = None

        if c_score is not None:
            self.c_score = c_score
        if detection_set is not None:
            self.detection_set = detection_set
        if host_artifact_set is not None:
            self.host_artifact_set = host_artifact_set
        if id is not None:
            self.id = id
        if key_asset is not None:
            self.key_asset = key_asset
        if last_detection_timestamp is not None:
            self.last_detection_timestamp = last_detection_timestamp
        if last_source is not None:
            self.last_source = last_source
        if name is not None:
            self.name = name
        self.new_host_pointer = new_host_pointer
        self.note = note
        self.owner_name = owner_name
        if sensor_luid is not None:
            self.sensor_luid = sensor_luid
        if state is not None:
            self.state = state
        if t_score is not None:
            self.t_score = t_score
        if tags is not None:
            self.tags = tags
        if targets_key_asset is not None:
            self.targets_key_asset = targets_key_asset
        if url is not None:
            self.url = url

    @property
    def c_score(self):
        """Gets the c_score of this Host.  # noqa: E501

        The current certainty score correlated to this host.  # noqa: E501

        :return: The c_score of this Host.  # noqa: E501
        :rtype: int
        """
        return self._c_score

    @c_score.setter
    def c_score(self, c_score):
        """Sets the c_score of this Host.

        The current certainty score correlated to this host.  # noqa: E501

        :param c_score: The c_score of this Host.  # noqa: E501
        :type: int
        """

        self._c_score = c_score

    @property
    def detection_set(self):
        """Gets the detection_set of this Host.  # noqa: E501

        List of detections for host.  # noqa: E501

        :return: The detection_set of this Host.  # noqa: E501
        :rtype: list[str]
        """
        return self._detection_set

    @detection_set.setter
    def detection_set(self, detection_set):
        """Sets the detection_set of this Host.

        List of detections for host.  # noqa: E501

        :param detection_set: The detection_set of this Host.  # noqa: E501
        :type: list[str]
        """

        self._detection_set = detection_set

    @property
    def host_artifact_set(self):
        """Gets the host_artifact_set of this Host.  # noqa: E501

        List of host artifacts observed for the host.  # noqa: E501

        :return: The host_artifact_set of this Host.  # noqa: E501
        :rtype: list[HostArtifact]
        """
        return self._host_artifact_set

    @host_artifact_set.setter
    def host_artifact_set(self, host_artifact_set):
        """Sets the host_artifact_set of this Host.

        List of host artifacts observed for the host.  # noqa: E501

        :param host_artifact_set: The host_artifact_set of this Host.  # noqa: E501
        :type: list[HostArtifact]
        """

        self._host_artifact_set = host_artifact_set

    @property
    def id(self):
        """Gets the id of this Host.  # noqa: E501


        :return: The id of this Host.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Host.


        :param id: The id of this Host.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def key_asset(self):
        """Gets the key_asset of this Host.  # noqa: E501


        :return: The key_asset of this Host.  # noqa: E501
        :rtype: bool
        """
        return self._key_asset

    @key_asset.setter
    def key_asset(self, key_asset):
        """Sets the key_asset of this Host.


        :param key_asset: The key_asset of this Host.  # noqa: E501
        :type: bool
        """

        self._key_asset = key_asset

    @property
    def last_detection_timestamp(self):
        """Gets the last_detection_timestamp of this Host.  # noqa: E501


        :return: The last_detection_timestamp of this Host.  # noqa: E501
        :rtype: str
        """
        return self._last_detection_timestamp

    @last_detection_timestamp.setter
    def last_detection_timestamp(self, last_detection_timestamp):
        """Sets the last_detection_timestamp of this Host.


        :param last_detection_timestamp: The last_detection_timestamp of this Host.  # noqa: E501
        :type: str
        """

        self._last_detection_timestamp = last_detection_timestamp

    @property
    def last_source(self):
        """Gets the last_source of this Host.  # noqa: E501


        :return: The last_source of this Host.  # noqa: E501
        :rtype: str
        """
        return self._last_source

    @last_source.setter
    def last_source(self, last_source):
        """Sets the last_source of this Host.


        :param last_source: The last_source of this Host.  # noqa: E501
        :type: str
        """

        self._last_source = last_source

    @property
    def name(self):
        """Gets the name of this Host.  # noqa: E501


        :return: The name of this Host.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Host.


        :param name: The name of this Host.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new_host_pointer(self):
        """Gets the new_host_pointer of this Host.  # noqa: E501


        :return: The new_host_pointer of this Host.  # noqa: E501
        :rtype: str
        """
        return self._new_host_pointer

    @new_host_pointer.setter
    def new_host_pointer(self, new_host_pointer):
        """Sets the new_host_pointer of this Host.


        :param new_host_pointer: The new_host_pointer of this Host.  # noqa: E501
        :type: str
        """

        self._new_host_pointer = new_host_pointer

    @property
    def note(self):
        """Gets the note of this Host.  # noqa: E501

        User defined note added to the host  # noqa: E501

        :return: The note of this Host.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Host.

        User defined note added to the host  # noqa: E501

        :param note: The note of this Host.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def owner_name(self):
        """Gets the owner_name of this Host.  # noqa: E501

        Probable owner of the host  # noqa: E501

        :return: The owner_name of this Host.  # noqa: E501
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Host.

        Probable owner of the host  # noqa: E501

        :param owner_name: The owner_name of this Host.  # noqa: E501
        :type: str
        """

        self._owner_name = owner_name

    @property
    def sensor_luid(self):
        """Gets the sensor_luid of this Host.  # noqa: E501


        :return: The sensor_luid of this Host.  # noqa: E501
        :rtype: str
        """
        return self._sensor_luid

    @sensor_luid.setter
    def sensor_luid(self, sensor_luid):
        """Sets the sensor_luid of this Host.


        :param sensor_luid: The sensor_luid of this Host.  # noqa: E501
        :type: str
        """

        self._sensor_luid = sensor_luid

    @property
    def state(self):
        """Gets the state of this Host.  # noqa: E501


        :return: The state of this Host.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Host.


        :param state: The state of this Host.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def t_score(self):
        """Gets the t_score of this Host.  # noqa: E501


        :return: The t_score of this Host.  # noqa: E501
        :rtype: int
        """
        return self._t_score

    @t_score.setter
    def t_score(self, t_score):
        """Sets the t_score of this Host.


        :param t_score: The t_score of this Host.  # noqa: E501
        :type: int
        """

        self._t_score = t_score

    @property
    def tags(self):
        """Gets the tags of this Host.  # noqa: E501


        :return: The tags of this Host.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Host.


        :param tags: The tags of this Host.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def targets_key_asset(self):
        """Gets the targets_key_asset of this Host.  # noqa: E501


        :return: The targets_key_asset of this Host.  # noqa: E501
        :rtype: bool
        """
        return self._targets_key_asset

    @targets_key_asset.setter
    def targets_key_asset(self, targets_key_asset):
        """Sets the targets_key_asset of this Host.


        :param targets_key_asset: The targets_key_asset of this Host.  # noqa: E501
        :type: bool
        """

        self._targets_key_asset = targets_key_asset

    @property
    def url(self):
        """Gets the url of this Host.  # noqa: E501


        :return: The url of this Host.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Host.


        :param url: The url of this Host.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
