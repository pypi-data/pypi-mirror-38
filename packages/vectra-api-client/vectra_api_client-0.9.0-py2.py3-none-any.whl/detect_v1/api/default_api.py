# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v1  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from detect_v1.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def detections_get(self, **kwargs):  # noqa: E501
        """Detection objects contain all the information related to security events detected on the network.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int c_score: filter by certainty score.
        :param int c_score_gte: filter by certainty score >= the score provided.
        :param str category: filter by the detection category.
        :param str destination:
        :param str detection_type: filter by the name of the threat detected.
        :param list[str] fields: Filter objects listed
        :param int host_id:
        :param bool is_targeting_key_asset:
        :param str last_timestamp:
        :param int max_id: <= the id provided.
        :param int min_id: >= the id provided.
        :param str note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided.
        :param str ordering: Orders records by last timestamp, threat score and certainty score.
        :param int page: Page Number.
        :param int page_size: Page size.
        :param str proto:
        :param str src_ip:
        :param int t_score: filter by threat score.
        :param int t_score_gte: filter by threat score >= the score provided.
        :param list[str] tags:
        :param str type_vname: filter by the detection type (verbose name).
        :param int dst_port: filter by the destination porter in the detection detail set.
        :param str inbound_ip: filter by the inbound_ip in the relayed comm set.
        :param str inbound_proto: filter by the inbound_proto in the relayed comm set.
        :param int inbound_port: filter by inbound_port in the relayed comm set.
        :param str inbound_dns: filter by inbound_dns in the relayed comm set.
        :param str outbound_ip: filter by the outbound_ip in the relayed comm set.
        :param int outbound_port: filter by the outbound_port in the relayed comm set.
        :param str outbound_dns: filter by the outbound_dns in teh relayed comm set.
        :param str dns_ip: filter by the dns_ip in the dns_set.
        :param str dns_request: filter by the dns_request in the dns_set.
        :param int resp_code: filter by the resp_code in the dns_set.
        :param str resp: filter by the resp in the dns_set.
        :return: Detections
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detections_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.detections_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def detections_get_with_http_info(self, **kwargs):  # noqa: E501
        """Detection objects contain all the information related to security events detected on the network.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int c_score: filter by certainty score.
        :param int c_score_gte: filter by certainty score >= the score provided.
        :param str category: filter by the detection category.
        :param str destination:
        :param str detection_type: filter by the name of the threat detected.
        :param list[str] fields: Filter objects listed
        :param int host_id:
        :param bool is_targeting_key_asset:
        :param str last_timestamp:
        :param int max_id: <= the id provided.
        :param int min_id: >= the id provided.
        :param str note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided.
        :param str ordering: Orders records by last timestamp, threat score and certainty score.
        :param int page: Page Number.
        :param int page_size: Page size.
        :param str proto:
        :param str src_ip:
        :param int t_score: filter by threat score.
        :param int t_score_gte: filter by threat score >= the score provided.
        :param list[str] tags:
        :param str type_vname: filter by the detection type (verbose name).
        :param int dst_port: filter by the destination porter in the detection detail set.
        :param str inbound_ip: filter by the inbound_ip in the relayed comm set.
        :param str inbound_proto: filter by the inbound_proto in the relayed comm set.
        :param int inbound_port: filter by inbound_port in the relayed comm set.
        :param str inbound_dns: filter by inbound_dns in the relayed comm set.
        :param str outbound_ip: filter by the outbound_ip in the relayed comm set.
        :param int outbound_port: filter by the outbound_port in the relayed comm set.
        :param str outbound_dns: filter by the outbound_dns in teh relayed comm set.
        :param str dns_ip: filter by the dns_ip in the dns_set.
        :param str dns_request: filter by the dns_request in the dns_set.
        :param int resp_code: filter by the resp_code in the dns_set.
        :param str resp: filter by the resp in the dns_set.
        :return: Detections
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['c_score', 'c_score_gte', 'category', 'destination', 'detection_type', 'fields', 'host_id', 'is_targeting_key_asset', 'last_timestamp', 'max_id', 'min_id', 'note_modified_timestamp_gte', 'ordering', 'page', 'page_size', 'proto', 'src_ip', 't_score', 't_score_gte', 'tags', 'type_vname', 'dst_port', 'inbound_ip', 'inbound_proto', 'inbound_port', 'inbound_dns', 'outbound_ip', 'outbound_port', 'outbound_dns', 'dns_ip', 'dns_request', 'resp_code', 'resp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detections_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'c_score' in local_var_params:
            query_params.append(('c_score', local_var_params['c_score']))  # noqa: E501
        if 'c_score_gte' in local_var_params:
            query_params.append(('c_score_gte', local_var_params['c_score_gte']))  # noqa: E501
        if 'category' in local_var_params:
            query_params.append(('category', local_var_params['category']))  # noqa: E501
        if 'destination' in local_var_params:
            query_params.append(('destination', local_var_params['destination']))  # noqa: E501
        if 'detection_type' in local_var_params:
            query_params.append(('detection_type', local_var_params['detection_type']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'host_id' in local_var_params:
            query_params.append(('host_id', local_var_params['host_id']))  # noqa: E501
        if 'is_targeting_key_asset' in local_var_params:
            query_params.append(('is_targeting_key_asset', local_var_params['is_targeting_key_asset']))  # noqa: E501
        if 'last_timestamp' in local_var_params:
            query_params.append(('last_timestamp', local_var_params['last_timestamp']))  # noqa: E501
        if 'max_id' in local_var_params:
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501
        if 'min_id' in local_var_params:
            query_params.append(('min_id', local_var_params['min_id']))  # noqa: E501
        if 'note_modified_timestamp_gte' in local_var_params:
            query_params.append(('note_modified_timestamp_gte', local_var_params['note_modified_timestamp_gte']))  # noqa: E501
        if 'ordering' in local_var_params:
            query_params.append(('ordering', local_var_params['ordering']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'proto' in local_var_params:
            query_params.append(('proto', local_var_params['proto']))  # noqa: E501
        if 'src_ip' in local_var_params:
            query_params.append(('src_ip', local_var_params['src_ip']))  # noqa: E501
        if 't_score' in local_var_params:
            query_params.append(('t_score', local_var_params['t_score']))  # noqa: E501
        if 't_score_gte' in local_var_params:
            query_params.append(('t_score_gte', local_var_params['t_score_gte']))  # noqa: E501
        if 'tags' in local_var_params:
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
            collection_formats['tags'] = 'multi'  # noqa: E501
        if 'type_vname' in local_var_params:
            query_params.append(('type_vname', local_var_params['type_vname']))  # noqa: E501
        if 'dst_port' in local_var_params:
            query_params.append(('dst_port', local_var_params['dst_port']))  # noqa: E501
        if 'inbound_ip' in local_var_params:
            query_params.append(('inbound_ip', local_var_params['inbound_ip']))  # noqa: E501
        if 'inbound_proto' in local_var_params:
            query_params.append(('inbound_proto', local_var_params['inbound_proto']))  # noqa: E501
        if 'inbound_port' in local_var_params:
            query_params.append(('inbound_port', local_var_params['inbound_port']))  # noqa: E501
        if 'inbound_dns' in local_var_params:
            query_params.append(('inbound_dns', local_var_params['inbound_dns']))  # noqa: E501
        if 'outbound_ip' in local_var_params:
            query_params.append(('outbound_ip', local_var_params['outbound_ip']))  # noqa: E501
        if 'outbound_port' in local_var_params:
            query_params.append(('outbound_port', local_var_params['outbound_port']))  # noqa: E501
        if 'outbound_dns' in local_var_params:
            query_params.append(('outbound_dns', local_var_params['outbound_dns']))  # noqa: E501
        if 'dns_ip' in local_var_params:
            query_params.append(('dns_ip', local_var_params['dns_ip']))  # noqa: E501
        if 'dns_request' in local_var_params:
            query_params.append(('dns_request', local_var_params['dns_request']))  # noqa: E501
        if 'resp_code' in local_var_params:
            query_params.append(('resp_code', local_var_params['resp_code']))  # noqa: E501
        if 'resp' in local_var_params:
            query_params.append(('resp', local_var_params['resp']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/detections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Detections',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def detections_id_get(self, id, **kwargs):  # noqa: E501
        """detections_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Detection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.detections_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.detections_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def detections_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """detections_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.detections_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Detection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detections_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `detections_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/detections/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Detection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hosts_get(self, **kwargs):  # noqa: E501
        """hosts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hosts_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int c_score: filter by certainty score.
        :param int c_score_gte: filter by certainty score >= the score provided.
        :param list[str] fields: Filter objects listed
        :param bool key_asset:
        :param str last_detection_timestamp:
        :param str last_source:
        :param str mac_address:
        :param int max_id: <= the id provided.
        :param int min_id: >= the id provided.
        :param str name: filter by name.
        :param str note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided.
        :param str ordering: Orders records by last timestamp, threat score and certainty score.
        :param int page: Page Number.
        :param int page_size: Page size.
        :param str state: filter by state.
        :param int t_score: filter by threat score.
        :param int t_score_gte: filter by threat score >= the score provided.
        :param list[str] tags:
        :return: Hosts
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hosts_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.hosts_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def hosts_get_with_http_info(self, **kwargs):  # noqa: E501
        """hosts_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hosts_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int c_score: filter by certainty score.
        :param int c_score_gte: filter by certainty score >= the score provided.
        :param list[str] fields: Filter objects listed
        :param bool key_asset:
        :param str last_detection_timestamp:
        :param str last_source:
        :param str mac_address:
        :param int max_id: <= the id provided.
        :param int min_id: >= the id provided.
        :param str name: filter by name.
        :param str note_modified_timestamp_gte: filter by note_modified_timestamp >= the timestamp provided.
        :param str ordering: Orders records by last timestamp, threat score and certainty score.
        :param int page: Page Number.
        :param int page_size: Page size.
        :param str state: filter by state.
        :param int t_score: filter by threat score.
        :param int t_score_gte: filter by threat score >= the score provided.
        :param list[str] tags:
        :return: Hosts
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['c_score', 'c_score_gte', 'fields', 'key_asset', 'last_detection_timestamp', 'last_source', 'mac_address', 'max_id', 'min_id', 'name', 'note_modified_timestamp_gte', 'ordering', 'page', 'page_size', 'state', 't_score', 't_score_gte', 'tags']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hosts_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'c_score' in local_var_params:
            query_params.append(('c_score', local_var_params['c_score']))  # noqa: E501
        if 'c_score_gte' in local_var_params:
            query_params.append(('c_score_gte', local_var_params['c_score_gte']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
            collection_formats['fields'] = 'multi'  # noqa: E501
        if 'key_asset' in local_var_params:
            query_params.append(('key_asset', local_var_params['key_asset']))  # noqa: E501
        if 'last_detection_timestamp' in local_var_params:
            query_params.append(('last_detection_timestamp', local_var_params['last_detection_timestamp']))  # noqa: E501
        if 'last_source' in local_var_params:
            query_params.append(('last_source', local_var_params['last_source']))  # noqa: E501
        if 'mac_address' in local_var_params:
            query_params.append(('mac_address', local_var_params['mac_address']))  # noqa: E501
        if 'max_id' in local_var_params:
            query_params.append(('max_id', local_var_params['max_id']))  # noqa: E501
        if 'min_id' in local_var_params:
            query_params.append(('min_id', local_var_params['min_id']))  # noqa: E501
        if 'name' in local_var_params:
            query_params.append(('name', local_var_params['name']))  # noqa: E501
        if 'note_modified_timestamp_gte' in local_var_params:
            query_params.append(('note_modified_timestamp_gte', local_var_params['note_modified_timestamp_gte']))  # noqa: E501
        if 'ordering' in local_var_params:
            query_params.append(('ordering', local_var_params['ordering']))  # noqa: E501
        if 'page' in local_var_params:
            query_params.append(('page', local_var_params['page']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('page_size', local_var_params['page_size']))  # noqa: E501
        if 'state' in local_var_params:
            query_params.append(('state', local_var_params['state']))  # noqa: E501
        if 't_score' in local_var_params:
            query_params.append(('t_score', local_var_params['t_score']))  # noqa: E501
        if 't_score_gte' in local_var_params:
            query_params.append(('t_score_gte', local_var_params['t_score_gte']))  # noqa: E501
        if 'tags' in local_var_params:
            query_params.append(('tags', local_var_params['tags']))  # noqa: E501
            collection_formats['tags'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/hosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Hosts',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def hosts_id_get(self, id, **kwargs):  # noqa: E501
        """hosts_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hosts_id_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.hosts_id_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.hosts_id_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def hosts_id_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """hosts_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.hosts_id_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: Host
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method hosts_id_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `hosts_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/hosts/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Host',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def system_info_get(self, **kwargs):  # noqa: E501
        """system_info_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_info_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.system_info_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.system_info_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def system_info_get_with_http_info(self, **kwargs):  # noqa: E501
        """system_info_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.system_info_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SystemInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method system_info_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/system/info', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SystemInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
