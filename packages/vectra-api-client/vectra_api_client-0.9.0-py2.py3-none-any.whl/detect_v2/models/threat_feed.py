# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ThreatFeed(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'duration': 'int',
        'category': 'str',
        'indicator_type': 'str',
        'certainty': 'str',
        'data': 'object'
    }

    attribute_map = {
        'name': 'name',
        'duration': 'duration',
        'category': 'category',
        'indicator_type': 'indicatorType',
        'certainty': 'certainty',
        'data': 'data'
    }

    def __init__(self, name=None, duration=None, category=None, indicator_type=None, certainty=None, data=None):  # noqa: E501
        """ThreatFeed - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._duration = None
        self._category = None
        self._indicator_type = None
        self._certainty = None
        self._data = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if duration is not None:
            self.duration = duration
        if category is not None:
            self.category = category
        if indicator_type is not None:
            self.indicator_type = indicator_type
        if certainty is not None:
            self.certainty = certainty
        self.data = data

    @property
    def name(self):
        """Gets the name of this ThreatFeed.  # noqa: E501


        :return: The name of this ThreatFeed.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThreatFeed.


        :param name: The name of this ThreatFeed.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def duration(self):
        """Gets the duration of this ThreatFeed.  # noqa: E501


        :return: The duration of this ThreatFeed.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ThreatFeed.


        :param duration: The duration of this ThreatFeed.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def category(self):
        """Gets the category of this ThreatFeed.  # noqa: E501


        :return: The category of this ThreatFeed.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ThreatFeed.


        :param category: The category of this ThreatFeed.  # noqa: E501
        :type: str
        """
        allowed_values = ["cnc", "lateral", "exfil"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def indicator_type(self):
        """Gets the indicator_type of this ThreatFeed.  # noqa: E501


        :return: The indicator_type of this ThreatFeed.  # noqa: E501
        :rtype: str
        """
        return self._indicator_type

    @indicator_type.setter
    def indicator_type(self, indicator_type):
        """Sets the indicator_type of this ThreatFeed.


        :param indicator_type: The indicator_type of this ThreatFeed.  # noqa: E501
        :type: str
        """
        allowed_values = ["Anonymization", "C2", "Exfiltration", "Malware", "Artifacts", "Watchlist"]  # noqa: E501
        if indicator_type not in allowed_values:
            raise ValueError(
                "Invalid value for `indicator_type` ({0}), must be one of {1}"  # noqa: E501
                .format(indicator_type, allowed_values)
            )

        self._indicator_type = indicator_type

    @property
    def certainty(self):
        """Gets the certainty of this ThreatFeed.  # noqa: E501


        :return: The certainty of this ThreatFeed.  # noqa: E501
        :rtype: str
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this ThreatFeed.


        :param certainty: The certainty of this ThreatFeed.  # noqa: E501
        :type: str
        """
        allowed_values = ["Low", "Medium", "High"]  # noqa: E501
        if certainty not in allowed_values:
            raise ValueError(
                "Invalid value for `certainty` ({0}), must be one of {1}"  # noqa: E501
                .format(certainty, allowed_values)
            )

        self._certainty = certainty

    @property
    def data(self):
        """Gets the data of this ThreatFeed.  # noqa: E501


        :return: The data of this ThreatFeed.  # noqa: E501
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ThreatFeed.


        :param data: The data of this ThreatFeed.  # noqa: E501
        :type: object
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThreatFeed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
