# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Proxy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'source': 'str',
        'id': 'str',
        'considers_proxy': 'bool',
        'address': 'str'
    }

    attribute_map = {
        'source': 'source',
        'id': 'id',
        'considers_proxy': 'considersProxy',
        'address': 'address'
    }

    def __init__(self, source=None, id=None, considers_proxy=None, address=None):  # noqa: E501
        """Proxy - a model defined in OpenAPI"""  # noqa: E501

        self._source = None
        self._id = None
        self._considers_proxy = None
        self._address = None
        self.discriminator = None

        if source is not None:
            self.source = source
        if id is not None:
            self.id = id
        if considers_proxy is not None:
            self.considers_proxy = considers_proxy
        if address is not None:
            self.address = address

    @property
    def source(self):
        """Gets the source of this Proxy.  # noqa: E501


        :return: The source of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Proxy.


        :param source: The source of this Proxy.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "cognito"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def id(self):
        """Gets the id of this Proxy.  # noqa: E501


        :return: The id of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Proxy.


        :param id: The id of this Proxy.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def considers_proxy(self):
        """Gets the considers_proxy of this Proxy.  # noqa: E501

        Whether to consider the object as a proxy or not  # noqa: E501

        :return: The considers_proxy of this Proxy.  # noqa: E501
        :rtype: bool
        """
        return self._considers_proxy

    @considers_proxy.setter
    def considers_proxy(self, considers_proxy):
        """Sets the considers_proxy of this Proxy.

        Whether to consider the object as a proxy or not  # noqa: E501

        :param considers_proxy: The considers_proxy of this Proxy.  # noqa: E501
        :type: bool
        """

        self._considers_proxy = considers_proxy

    @property
    def address(self):
        """Gets the address of this Proxy.  # noqa: E501

        The IP address for the proxy object  # noqa: E501

        :return: The address of this Proxy.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Proxy.

        The IP address for the proxy object  # noqa: E501

        :param address: The address of this Proxy.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Proxy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
