# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v2  # noqa: E501

    OpenAPI spec version: v2
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Detection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'detection_type': 'str',
        'summary': 'object',
        'detection_category': 'str',
        'dst_port': 'int',
        'dst_geo': 'str',
        'src_ip': 'str',
        'state': 'str',
        'threat': 'int',
        'certainty': 'int',
        'first_timestamp': 'datetime',
        'last_timestamp': 'datetime',
        'detection_detail_set': 'object',
        'description': 'str',
        'destination': 'str',
        'count': 'int',
        'proto': 'str',
        'total_bytes_sent': 'int',
        'total_bytes_rcvd': 'int',
        'url': 'str',
        'sensor_name': 'str',
        'host': 'str',
        'grouped_details': 'object',
        'tags': 'list[str]',
        'is_targeting_key_asset': 'bool',
        'campaign_summaries': 'object',
        'note': 'str',
        'note_modified_by': 'str',
        'note_modified_timestamp': 'datetime',
        'assigned_to': 'str',
        'assigned_date': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'detection_type': 'detection_type',
        'summary': 'summary',
        'detection_category': 'detection_category',
        'dst_port': 'dst_port',
        'dst_geo': 'dst_geo',
        'src_ip': 'src_ip',
        'state': 'state',
        'threat': 'threat',
        'certainty': 'certainty',
        'first_timestamp': 'first_timestamp',
        'last_timestamp': 'last_timestamp',
        'detection_detail_set': 'detection_detail_set',
        'description': 'description',
        'destination': 'destination',
        'count': 'count',
        'proto': 'proto',
        'total_bytes_sent': 'total_bytes_sent',
        'total_bytes_rcvd': 'total_bytes_rcvd',
        'url': 'url',
        'sensor_name': 'sensor_name',
        'host': 'host',
        'grouped_details': 'grouped_details',
        'tags': 'tags',
        'is_targeting_key_asset': 'is_targeting_key_asset',
        'campaign_summaries': 'campaign_summaries',
        'note': 'note',
        'note_modified_by': 'note_modified_by',
        'note_modified_timestamp': 'note_modified_timestamp',
        'assigned_to': 'assigned_to',
        'assigned_date': 'assigned_date'
    }

    def __init__(self, id=None, detection_type=None, summary=None, detection_category=None, dst_port=None, dst_geo=None, src_ip=None, state=None, threat=None, certainty=None, first_timestamp=None, last_timestamp=None, detection_detail_set=None, description=None, destination=None, count=None, proto=None, total_bytes_sent=None, total_bytes_rcvd=None, url=None, sensor_name=None, host=None, grouped_details=None, tags=None, is_targeting_key_asset=None, campaign_summaries=None, note=None, note_modified_by=None, note_modified_timestamp=None, assigned_to=None, assigned_date=None):  # noqa: E501
        """Detection - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._detection_type = None
        self._summary = None
        self._detection_category = None
        self._dst_port = None
        self._dst_geo = None
        self._src_ip = None
        self._state = None
        self._threat = None
        self._certainty = None
        self._first_timestamp = None
        self._last_timestamp = None
        self._detection_detail_set = None
        self._description = None
        self._destination = None
        self._count = None
        self._proto = None
        self._total_bytes_sent = None
        self._total_bytes_rcvd = None
        self._url = None
        self._sensor_name = None
        self._host = None
        self._grouped_details = None
        self._tags = None
        self._is_targeting_key_asset = None
        self._campaign_summaries = None
        self._note = None
        self._note_modified_by = None
        self._note_modified_timestamp = None
        self._assigned_to = None
        self._assigned_date = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if detection_type is not None:
            self.detection_type = detection_type
        if summary is not None:
            self.summary = summary
        if detection_category is not None:
            self.detection_category = detection_category
        if dst_port is not None:
            self.dst_port = dst_port
        if dst_geo is not None:
            self.dst_geo = dst_geo
        if src_ip is not None:
            self.src_ip = src_ip
        if state is not None:
            self.state = state
        if threat is not None:
            self.threat = threat
        if certainty is not None:
            self.certainty = certainty
        if first_timestamp is not None:
            self.first_timestamp = first_timestamp
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if detection_detail_set is not None:
            self.detection_detail_set = detection_detail_set
        if description is not None:
            self.description = description
        if destination is not None:
            self.destination = destination
        if count is not None:
            self.count = count
        if proto is not None:
            self.proto = proto
        if total_bytes_sent is not None:
            self.total_bytes_sent = total_bytes_sent
        if total_bytes_rcvd is not None:
            self.total_bytes_rcvd = total_bytes_rcvd
        if url is not None:
            self.url = url
        if sensor_name is not None:
            self.sensor_name = sensor_name
        if host is not None:
            self.host = host
        if grouped_details is not None:
            self.grouped_details = grouped_details
        if tags is not None:
            self.tags = tags
        if is_targeting_key_asset is not None:
            self.is_targeting_key_asset = is_targeting_key_asset
        if campaign_summaries is not None:
            self.campaign_summaries = campaign_summaries
        if note is not None:
            self.note = note
        if note_modified_by is not None:
            self.note_modified_by = note_modified_by
        if note_modified_timestamp is not None:
            self.note_modified_timestamp = note_modified_timestamp
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assigned_date is not None:
            self.assigned_date = assigned_date

    @property
    def id(self):
        """Gets the id of this Detection.  # noqa: E501


        :return: The id of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Detection.


        :param id: The id of this Detection.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def detection_type(self):
        """Gets the detection_type of this Detection.  # noqa: E501

        Name of the detection as shown by in UI.  # noqa: E501

        :return: The detection_type of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._detection_type

    @detection_type.setter
    def detection_type(self, detection_type):
        """Sets the detection_type of this Detection.

        Name of the detection as shown by in UI.  # noqa: E501

        :param detection_type: The detection_type of this Detection.  # noqa: E501
        :type: str
        """

        self._detection_type = detection_type

    @property
    def summary(self):
        """Gets the summary of this Detection.  # noqa: E501


        :return: The summary of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Detection.


        :param summary: The summary of this Detection.  # noqa: E501
        :type: object
        """

        self._summary = summary

    @property
    def detection_category(self):
        """Gets the detection_category of this Detection.  # noqa: E501


        :return: The detection_category of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._detection_category

    @detection_category.setter
    def detection_category(self, detection_category):
        """Sets the detection_category of this Detection.


        :param detection_category: The detection_category of this Detection.  # noqa: E501
        :type: str
        """

        self._detection_category = detection_category

    @property
    def dst_port(self):
        """Gets the dst_port of this Detection.  # noqa: E501


        :return: The dst_port of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this Detection.


        :param dst_port: The dst_port of this Detection.  # noqa: E501
        :type: int
        """

        self._dst_port = dst_port

    @property
    def dst_geo(self):
        """Gets the dst_geo of this Detection.  # noqa: E501


        :return: The dst_geo of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._dst_geo

    @dst_geo.setter
    def dst_geo(self, dst_geo):
        """Sets the dst_geo of this Detection.


        :param dst_geo: The dst_geo of this Detection.  # noqa: E501
        :type: str
        """

        self._dst_geo = dst_geo

    @property
    def src_ip(self):
        """Gets the src_ip of this Detection.  # noqa: E501


        :return: The src_ip of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this Detection.


        :param src_ip: The src_ip of this Detection.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def state(self):
        """Gets the state of this Detection.  # noqa: E501


        :return: The state of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Detection.


        :param state: The state of this Detection.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def threat(self):
        """Gets the threat of this Detection.  # noqa: E501


        :return: The threat of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._threat

    @threat.setter
    def threat(self, threat):
        """Sets the threat of this Detection.


        :param threat: The threat of this Detection.  # noqa: E501
        :type: int
        """

        self._threat = threat

    @property
    def certainty(self):
        """Gets the certainty of this Detection.  # noqa: E501


        :return: The certainty of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._certainty

    @certainty.setter
    def certainty(self, certainty):
        """Sets the certainty of this Detection.


        :param certainty: The certainty of this Detection.  # noqa: E501
        :type: int
        """

        self._certainty = certainty

    @property
    def first_timestamp(self):
        """Gets the first_timestamp of this Detection.  # noqa: E501


        :return: The first_timestamp of this Detection.  # noqa: E501
        :rtype: datetime
        """
        return self._first_timestamp

    @first_timestamp.setter
    def first_timestamp(self, first_timestamp):
        """Sets the first_timestamp of this Detection.


        :param first_timestamp: The first_timestamp of this Detection.  # noqa: E501
        :type: datetime
        """

        self._first_timestamp = first_timestamp

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this Detection.  # noqa: E501


        :return: The last_timestamp of this Detection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this Detection.


        :param last_timestamp: The last_timestamp of this Detection.  # noqa: E501
        :type: datetime
        """

        self._last_timestamp = last_timestamp

    @property
    def detection_detail_set(self):
        """Gets the detection_detail_set of this Detection.  # noqa: E501


        :return: The detection_detail_set of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._detection_detail_set

    @detection_detail_set.setter
    def detection_detail_set(self, detection_detail_set):
        """Sets the detection_detail_set of this Detection.


        :param detection_detail_set: The detection_detail_set of this Detection.  # noqa: E501
        :type: object
        """

        self._detection_detail_set = detection_detail_set

    @property
    def description(self):
        """Gets the description of this Detection.  # noqa: E501


        :return: The description of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Detection.


        :param description: The description of this Detection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def destination(self):
        """Gets the destination of this Detection.  # noqa: E501


        :return: The destination of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Detection.


        :param destination: The destination of this Detection.  # noqa: E501
        :type: str
        """

        self._destination = destination

    @property
    def count(self):
        """Gets the count of this Detection.  # noqa: E501


        :return: The count of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Detection.


        :param count: The count of this Detection.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def proto(self):
        """Gets the proto of this Detection.  # noqa: E501


        :return: The proto of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this Detection.


        :param proto: The proto of this Detection.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def total_bytes_sent(self):
        """Gets the total_bytes_sent of this Detection.  # noqa: E501


        :return: The total_bytes_sent of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_sent

    @total_bytes_sent.setter
    def total_bytes_sent(self, total_bytes_sent):
        """Sets the total_bytes_sent of this Detection.


        :param total_bytes_sent: The total_bytes_sent of this Detection.  # noqa: E501
        :type: int
        """

        self._total_bytes_sent = total_bytes_sent

    @property
    def total_bytes_rcvd(self):
        """Gets the total_bytes_rcvd of this Detection.  # noqa: E501


        :return: The total_bytes_rcvd of this Detection.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_rcvd

    @total_bytes_rcvd.setter
    def total_bytes_rcvd(self, total_bytes_rcvd):
        """Sets the total_bytes_rcvd of this Detection.


        :param total_bytes_rcvd: The total_bytes_rcvd of this Detection.  # noqa: E501
        :type: int
        """

        self._total_bytes_rcvd = total_bytes_rcvd

    @property
    def url(self):
        """Gets the url of this Detection.  # noqa: E501


        :return: The url of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Detection.


        :param url: The url of this Detection.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def sensor_name(self):
        """Gets the sensor_name of this Detection.  # noqa: E501


        :return: The sensor_name of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._sensor_name

    @sensor_name.setter
    def sensor_name(self, sensor_name):
        """Sets the sensor_name of this Detection.


        :param sensor_name: The sensor_name of this Detection.  # noqa: E501
        :type: str
        """

        self._sensor_name = sensor_name

    @property
    def host(self):
        """Gets the host of this Detection.  # noqa: E501


        :return: The host of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Detection.


        :param host: The host of this Detection.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def grouped_details(self):
        """Gets the grouped_details of this Detection.  # noqa: E501


        :return: The grouped_details of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._grouped_details

    @grouped_details.setter
    def grouped_details(self, grouped_details):
        """Sets the grouped_details of this Detection.


        :param grouped_details: The grouped_details of this Detection.  # noqa: E501
        :type: object
        """

        self._grouped_details = grouped_details

    @property
    def tags(self):
        """Gets the tags of this Detection.  # noqa: E501

        User defined tags added to the detection.  # noqa: E501

        :return: The tags of this Detection.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Detection.

        User defined tags added to the detection.  # noqa: E501

        :param tags: The tags of this Detection.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def is_targeting_key_asset(self):
        """Gets the is_targeting_key_asset of this Detection.  # noqa: E501


        :return: The is_targeting_key_asset of this Detection.  # noqa: E501
        :rtype: bool
        """
        return self._is_targeting_key_asset

    @is_targeting_key_asset.setter
    def is_targeting_key_asset(self, is_targeting_key_asset):
        """Sets the is_targeting_key_asset of this Detection.


        :param is_targeting_key_asset: The is_targeting_key_asset of this Detection.  # noqa: E501
        :type: bool
        """

        self._is_targeting_key_asset = is_targeting_key_asset

    @property
    def campaign_summaries(self):
        """Gets the campaign_summaries of this Detection.  # noqa: E501


        :return: The campaign_summaries of this Detection.  # noqa: E501
        :rtype: object
        """
        return self._campaign_summaries

    @campaign_summaries.setter
    def campaign_summaries(self, campaign_summaries):
        """Sets the campaign_summaries of this Detection.


        :param campaign_summaries: The campaign_summaries of this Detection.  # noqa: E501
        :type: object
        """

        self._campaign_summaries = campaign_summaries

    @property
    def note(self):
        """Gets the note of this Detection.  # noqa: E501


        :return: The note of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Detection.


        :param note: The note of this Detection.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def note_modified_by(self):
        """Gets the note_modified_by of this Detection.  # noqa: E501


        :return: The note_modified_by of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._note_modified_by

    @note_modified_by.setter
    def note_modified_by(self, note_modified_by):
        """Sets the note_modified_by of this Detection.


        :param note_modified_by: The note_modified_by of this Detection.  # noqa: E501
        :type: str
        """

        self._note_modified_by = note_modified_by

    @property
    def note_modified_timestamp(self):
        """Gets the note_modified_timestamp of this Detection.  # noqa: E501


        :return: The note_modified_timestamp of this Detection.  # noqa: E501
        :rtype: datetime
        """
        return self._note_modified_timestamp

    @note_modified_timestamp.setter
    def note_modified_timestamp(self, note_modified_timestamp):
        """Sets the note_modified_timestamp of this Detection.


        :param note_modified_timestamp: The note_modified_timestamp of this Detection.  # noqa: E501
        :type: datetime
        """

        self._note_modified_timestamp = note_modified_timestamp

    @property
    def assigned_to(self):
        """Gets the assigned_to of this Detection.  # noqa: E501


        :return: The assigned_to of this Detection.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this Detection.


        :param assigned_to: The assigned_to of this Detection.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def assigned_date(self):
        """Gets the assigned_date of this Detection.  # noqa: E501


        :return: The assigned_date of this Detection.  # noqa: E501
        :rtype: datetime
        """
        return self._assigned_date

    @assigned_date.setter
    def assigned_date(self, assigned_date):
        """Sets the assigned_date of this Detection.


        :param assigned_date: The assigned_date of this Detection.  # noqa: E501
        :type: datetime
        """

        self._assigned_date = assigned_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
