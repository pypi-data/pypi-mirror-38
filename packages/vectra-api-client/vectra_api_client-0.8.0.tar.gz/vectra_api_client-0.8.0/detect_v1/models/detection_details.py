# coding: utf-8

"""
    Vectra API

    Swagger spec for Vectra API v1  # noqa: E501

    OpenAPI spec version: v1
    Contact: support@vectra.ai
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DetectionDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'count': 'int',
        'description': 'str',
        'dst_dns': 'str',
        'dst_geo': 'str',
        'dst_host_id': 'int',
        'dst_ip': 'str',
        'dst_port': 'int',
        'first_timestamp': 'str',
        'id': 'int',
        'last_timestamp': 'str',
        'proto': 'str',
        'total_bytes_sent': 'int',
        'total_bytes_rcvd': 'int',
        'url': 'str'
    }

    attribute_map = {
        'count': 'count',
        'description': 'description',
        'dst_dns': 'dst_dns',
        'dst_geo': 'dst_geo',
        'dst_host_id': 'dst_host_id',
        'dst_ip': 'dst_ip',
        'dst_port': 'dst_port',
        'first_timestamp': 'first_timestamp',
        'id': 'id',
        'last_timestamp': 'last_timestamp',
        'proto': 'proto',
        'total_bytes_sent': 'total_bytes_sent',
        'total_bytes_rcvd': 'total_bytes_rcvd',
        'url': 'url'
    }

    def __init__(self, count=None, description=None, dst_dns=None, dst_geo=None, dst_host_id=None, dst_ip=None, dst_port=None, first_timestamp=None, id=None, last_timestamp=None, proto=None, total_bytes_sent=None, total_bytes_rcvd=None, url=None):  # noqa: E501
        """DetectionDetails - a model defined in OpenAPI"""  # noqa: E501

        self._count = None
        self._description = None
        self._dst_dns = None
        self._dst_geo = None
        self._dst_host_id = None
        self._dst_ip = None
        self._dst_port = None
        self._first_timestamp = None
        self._id = None
        self._last_timestamp = None
        self._proto = None
        self._total_bytes_sent = None
        self._total_bytes_rcvd = None
        self._url = None
        self.discriminator = None

        self.count = count
        if description is not None:
            self.description = description
        self.dst_dns = dst_dns
        self.dst_geo = dst_geo
        if dst_host_id is not None:
            self.dst_host_id = dst_host_id
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if dst_port is not None:
            self.dst_port = dst_port
        if first_timestamp is not None:
            self.first_timestamp = first_timestamp
        if id is not None:
            self.id = id
        if last_timestamp is not None:
            self.last_timestamp = last_timestamp
        if proto is not None:
            self.proto = proto
        if total_bytes_sent is not None:
            self.total_bytes_sent = total_bytes_sent
        if total_bytes_rcvd is not None:
            self.total_bytes_rcvd = total_bytes_rcvd
        if url is not None:
            self.url = url

    @property
    def count(self):
        """Gets the count of this DetectionDetails.  # noqa: E501

        Detection detail count.  # noqa: E501

        :return: The count of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DetectionDetails.

        Detection detail count.  # noqa: E501

        :param count: The count of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def description(self):
        """Gets the description of this DetectionDetails.  # noqa: E501

        System generated description of the event.  # noqa: E501

        :return: The description of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DetectionDetails.

        System generated description of the event.  # noqa: E501

        :param description: The description of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dst_dns(self):
        """Gets the dst_dns of this DetectionDetails.  # noqa: E501


        :return: The dst_dns of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._dst_dns

    @dst_dns.setter
    def dst_dns(self, dst_dns):
        """Sets the dst_dns of this DetectionDetails.


        :param dst_dns: The dst_dns of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._dst_dns = dst_dns

    @property
    def dst_geo(self):
        """Gets the dst_geo of this DetectionDetails.  # noqa: E501


        :return: The dst_geo of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._dst_geo

    @dst_geo.setter
    def dst_geo(self, dst_geo):
        """Sets the dst_geo of this DetectionDetails.


        :param dst_geo: The dst_geo of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._dst_geo = dst_geo

    @property
    def dst_host_id(self):
        """Gets the dst_host_id of this DetectionDetails.  # noqa: E501


        :return: The dst_host_id of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._dst_host_id

    @dst_host_id.setter
    def dst_host_id(self, dst_host_id):
        """Sets the dst_host_id of this DetectionDetails.


        :param dst_host_id: The dst_host_id of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._dst_host_id = dst_host_id

    @property
    def dst_ip(self):
        """Gets the dst_ip of this DetectionDetails.  # noqa: E501


        :return: The dst_ip of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this DetectionDetails.


        :param dst_ip: The dst_ip of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._dst_ip = dst_ip

    @property
    def dst_port(self):
        """Gets the dst_port of this DetectionDetails.  # noqa: E501


        :return: The dst_port of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this DetectionDetails.


        :param dst_port: The dst_port of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._dst_port = dst_port

    @property
    def first_timestamp(self):
        """Gets the first_timestamp of this DetectionDetails.  # noqa: E501

        The timestamp when the event was first detected.  # noqa: E501

        :return: The first_timestamp of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._first_timestamp

    @first_timestamp.setter
    def first_timestamp(self, first_timestamp):
        """Sets the first_timestamp of this DetectionDetails.

        The timestamp when the event was first detected.  # noqa: E501

        :param first_timestamp: The first_timestamp of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._first_timestamp = first_timestamp

    @property
    def id(self):
        """Gets the id of this DetectionDetails.  # noqa: E501


        :return: The id of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DetectionDetails.


        :param id: The id of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_timestamp(self):
        """Gets the last_timestamp of this DetectionDetails.  # noqa: E501

        The timestamp when the event was last detected.  # noqa: E501

        :return: The last_timestamp of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._last_timestamp

    @last_timestamp.setter
    def last_timestamp(self, last_timestamp):
        """Sets the last_timestamp of this DetectionDetails.

        The timestamp when the event was last detected.  # noqa: E501

        :param last_timestamp: The last_timestamp of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._last_timestamp = last_timestamp

    @property
    def proto(self):
        """Gets the proto of this DetectionDetails.  # noqa: E501

        Protocol used in the communications.  # noqa: E501

        :return: The proto of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this DetectionDetails.

        Protocol used in the communications.  # noqa: E501

        :param proto: The proto of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def total_bytes_sent(self):
        """Gets the total_bytes_sent of this DetectionDetails.  # noqa: E501

        Total bytes sent by the client.  # noqa: E501

        :return: The total_bytes_sent of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_sent

    @total_bytes_sent.setter
    def total_bytes_sent(self, total_bytes_sent):
        """Sets the total_bytes_sent of this DetectionDetails.

        Total bytes sent by the client.  # noqa: E501

        :param total_bytes_sent: The total_bytes_sent of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._total_bytes_sent = total_bytes_sent

    @property
    def total_bytes_rcvd(self):
        """Gets the total_bytes_rcvd of this DetectionDetails.  # noqa: E501

        Total bytes received by the client.  # noqa: E501

        :return: The total_bytes_rcvd of this DetectionDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_bytes_rcvd

    @total_bytes_rcvd.setter
    def total_bytes_rcvd(self, total_bytes_rcvd):
        """Sets the total_bytes_rcvd of this DetectionDetails.

        Total bytes received by the client.  # noqa: E501

        :param total_bytes_rcvd: The total_bytes_rcvd of this DetectionDetails.  # noqa: E501
        :type: int
        """

        self._total_bytes_rcvd = total_bytes_rcvd

    @property
    def url(self):
        """Gets the url of this DetectionDetails.  # noqa: E501

        The URL that links directory to this record.  # noqa: E501

        :return: The url of this DetectionDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this DetectionDetails.

        The URL that links directory to this record.  # noqa: E501

        :param url: The url of this DetectionDetails.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetectionDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
