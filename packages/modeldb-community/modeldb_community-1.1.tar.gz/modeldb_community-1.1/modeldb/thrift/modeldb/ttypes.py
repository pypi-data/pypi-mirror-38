#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class ProblemType(object):
    UNDEFINED = 0
    BINARY_CLASSIFICATION = 1
    MULTICLASS_CLASSIFICATION = 2
    REGRESSION = 3
    CLUSTERING = 4
    RECOMMENDATION = 5

    _VALUES_TO_NAMES = {
        0: "UNDEFINED",
        1: "BINARY_CLASSIFICATION",
        2: "MULTICLASS_CLASSIFICATION",
        3: "REGRESSION",
        4: "CLUSTERING",
        5: "RECOMMENDATION",
    }

    _NAMES_TO_VALUES = {
        "UNDEFINED": 0,
        "BINARY_CLASSIFICATION": 1,
        "MULTICLASS_CLASSIFICATION": 2,
        "REGRESSION": 3,
        "CLUSTERING": 4,
        "RECOMMENDATION": 5,
    }


class ModelCompMetric(object):
    PROJECT = 0
    EXPERIMENT_RUN = 1
    MODEL_TYPE = 2
    PROBLEM_TYPE = 3
    RMSE = 4
    EXPLAINED_VARIANCE = 5
    R2 = 6

    _VALUES_TO_NAMES = {
        0: "PROJECT",
        1: "EXPERIMENT_RUN",
        2: "MODEL_TYPE",
        3: "PROBLEM_TYPE",
        4: "RMSE",
        5: "EXPLAINED_VARIANCE",
        6: "R2",
    }

    _NAMES_TO_VALUES = {
        "PROJECT": 0,
        "EXPERIMENT_RUN": 1,
        "MODEL_TYPE": 2,
        "PROBLEM_TYPE": 3,
        "RMSE": 4,
        "EXPLAINED_VARIANCE": 5,
        "R2": 6,
    }


class ModelRankMetric(object):
    RMSE = 0
    EXPLAINED_VARIANCE = 1
    R2 = 2

    _VALUES_TO_NAMES = {
        0: "RMSE",
        1: "EXPLAINED_VARIANCE",
        2: "R2",
    }

    _NAMES_TO_VALUES = {
        "RMSE": 0,
        "EXPLAINED_VARIANCE": 1,
        "R2": 2,
    }


class Project(object):
    """
    Attributes:
     - id
     - name
     - author
     - description
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'author', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    )

    def __init__(self, id=thrift_spec[1][4], name=None, author=None, description=None,):
        self.id = id
        self.name = name
        self.author = author
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.author = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Project')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRING, 3)
            oprot.writeString(self.author.encode('utf-8') if sys.version_info[0] == 2 else self.author)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Experiment(object):
    """
    Attributes:
     - id
     - projectId
     - name
     - description
     - isDefault
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.I32, 'projectId', None, None, ),  # 2
        (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
        (5, TType.BOOL, 'isDefault', None, False, ),  # 5
    )

    def __init__(self, id=thrift_spec[1][4], projectId=None, name=None, description=None, isDefault=thrift_spec[5][4],):
        self.id = id
        self.projectId = projectId
        self.name = name
        self.description = description
        self.isDefault = isDefault

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.projectId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.isDefault = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Experiment')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I32, 2)
            oprot.writeI32(self.projectId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.isDefault is not None:
            oprot.writeFieldBegin('isDefault', TType.BOOL, 5)
            oprot.writeBool(self.isDefault)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentRun(object):
    """
    Attributes:
     - id
     - experimentId
     - description
     - sha
     - created
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.I32, 'experimentId', None, None, ),  # 2
        (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
        (4, TType.STRING, 'sha', 'UTF8', None, ),  # 4
        (5, TType.STRING, 'created', 'UTF8', None, ),  # 5
    )

    def __init__(self, id=thrift_spec[1][4], experimentId=None, description=None, sha=None, created=None,):
        self.id = id
        self.experimentId = experimentId
        self.description = description
        self.sha = sha
        self.created = created

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.experimentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.sha = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.created = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentRun')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.experimentId is not None:
            oprot.writeFieldBegin('experimentId', TType.I32, 2)
            oprot.writeI32(self.experimentId)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.sha is not None:
            oprot.writeFieldBegin('sha', TType.STRING, 4)
            oprot.writeString(self.sha.encode('utf-8') if sys.version_info[0] == 2 else self.sha)
            oprot.writeFieldEnd()
        if self.created is not None:
            oprot.writeFieldBegin('created', TType.STRING, 5)
            oprot.writeString(self.created.encode('utf-8') if sys.version_info[0] == 2 else self.created)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataFrameColumn(object):
    """
    Attributes:
     - name
     - type
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'type', 'UTF8', None, ),  # 2
    )

    def __init__(self, name=None, type=None,):
        self.name = name
        self.type = type

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DataFrameColumn')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 2)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetadataKV(object):
    """
    Attributes:
     - key
     - value
     - valueType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'key', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'valueType', 'UTF8', None, ),  # 3
    )

    def __init__(self, key=None, value=None, valueType=None,):
        self.key = key
        self.value = value
        self.valueType = valueType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.valueType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MetadataKV')
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 1)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.valueType is not None:
            oprot.writeFieldBegin('valueType', TType.STRING, 3)
            oprot.writeString(self.valueType.encode('utf-8') if sys.version_info[0] == 2 else self.valueType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataFrame(object):
    """
    Attributes:
     - id
     - schema
     - numRows
     - tag
     - filepath
     - metadata
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.LIST, 'schema', (TType.STRUCT, (DataFrameColumn, DataFrameColumn.thrift_spec), False), None, ),  # 2
        (3, TType.I32, 'numRows', None, None, ),  # 3
        (4, TType.STRING, 'tag', 'UTF8', "", ),  # 4
        (5, TType.STRING, 'filepath', 'UTF8', None, ),  # 5
        (6, TType.LIST, 'metadata', (TType.STRUCT, (MetadataKV, MetadataKV.thrift_spec), False), None, ),  # 6
    )

    def __init__(self, id=thrift_spec[1][4], schema=None, numRows=None, tag=thrift_spec[4][4], filepath=None, metadata=None,):
        self.id = id
        self.schema = schema
        self.numRows = numRows
        self.tag = tag
        self.filepath = filepath
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.schema = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = DataFrameColumn()
                        _elem5.read(iprot)
                        self.schema.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numRows = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.filepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.metadata = []
                    (_etype9, _size6) = iprot.readListBegin()
                    for _i10 in range(_size6):
                        _elem11 = MetadataKV()
                        _elem11.read(iprot)
                        self.metadata.append(_elem11)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DataFrame')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.schema))
            for iter12 in self.schema:
                iter12.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.numRows is not None:
            oprot.writeFieldBegin('numRows', TType.I32, 3)
            oprot.writeI32(self.numRows)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.filepath is not None:
            oprot.writeFieldBegin('filepath', TType.STRING, 5)
            oprot.writeString(self.filepath.encode('utf-8') if sys.version_info[0] == 2 else self.filepath)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.LIST, 6)
            oprot.writeListBegin(TType.STRUCT, len(self.metadata))
            for iter13 in self.metadata:
                iter13.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class HyperParameter(object):
    """
    Attributes:
     - name
     - value
     - type
     - min
     - max
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'value', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'type', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'min', None, None, ),  # 4
        (5, TType.DOUBLE, 'max', None, None, ),  # 5
    )

    def __init__(self, name=None, value=None, type=None, min=None, max=None,):
        self.name = name
        self.value = value
        self.type = type
        self.min = min
        self.max = max

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.value = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.min = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.max = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('HyperParameter')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.value is not None:
            oprot.writeFieldBegin('value', TType.STRING, 2)
            oprot.writeString(self.value.encode('utf-8') if sys.version_info[0] == 2 else self.value)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 3)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.min is not None:
            oprot.writeFieldBegin('min', TType.DOUBLE, 4)
            oprot.writeDouble(self.min)
            oprot.writeFieldEnd()
        if self.max is not None:
            oprot.writeFieldBegin('max', TType.DOUBLE, 5)
            oprot.writeDouble(self.max)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectEvent(object):
    """
    Attributes:
     - project
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'project', (Project, Project.thrift_spec), None, ),  # 1
    )

    def __init__(self, project=None,):
        self.project = project

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.project = Project()
                    self.project.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProjectEvent')
        if self.project is not None:
            oprot.writeFieldBegin('project', TType.STRUCT, 1)
            self.project.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectEventResponse(object):
    """
    Attributes:
     - projectId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'projectId', None, None, ),  # 1
    )

    def __init__(self, projectId=None,):
        self.projectId = projectId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.projectId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProjectEventResponse')
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I32, 1)
            oprot.writeI32(self.projectId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentEvent(object):
    """
    Attributes:
     - experiment
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'experiment', (Experiment, Experiment.thrift_spec), None, ),  # 1
    )

    def __init__(self, experiment=None,):
        self.experiment = experiment

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.experiment = Experiment()
                    self.experiment.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentEvent')
        if self.experiment is not None:
            oprot.writeFieldBegin('experiment', TType.STRUCT, 1)
            self.experiment.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentEventResponse(object):
    """
    Attributes:
     - experimentId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'experimentId', None, None, ),  # 1
    )

    def __init__(self, experimentId=None,):
        self.experimentId = experimentId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.experimentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentEventResponse')
        if self.experimentId is not None:
            oprot.writeFieldBegin('experimentId', TType.I32, 1)
            oprot.writeI32(self.experimentId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentRunEvent(object):
    """
    Attributes:
     - experimentRun
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'experimentRun', (ExperimentRun, ExperimentRun.thrift_spec), None, ),  # 1
    )

    def __init__(self, experimentRun=None,):
        self.experimentRun = experimentRun

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.experimentRun = ExperimentRun()
                    self.experimentRun.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentRunEvent')
        if self.experimentRun is not None:
            oprot.writeFieldBegin('experimentRun', TType.STRUCT, 1)
            self.experimentRun.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentRunEventResponse(object):
    """
    Attributes:
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'experimentRunId', None, None, ),  # 1
    )

    def __init__(self, experimentRunId=None,):
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentRunEventResponse')
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 1)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransformerSpec(object):
    """
    Attributes:
     - id
     - transformerType
     - hyperparameters
     - tag
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.STRING, 'transformerType', 'UTF8', None, ),  # 2
        (3, TType.LIST, 'hyperparameters', (TType.STRUCT, (HyperParameter, HyperParameter.thrift_spec), False), None, ),  # 3
        (4, TType.STRING, 'tag', 'UTF8', "", ),  # 4
    )

    def __init__(self, id=thrift_spec[1][4], transformerType=None, hyperparameters=None, tag=thrift_spec[4][4],):
        self.id = id
        self.transformerType = transformerType
        self.hyperparameters = hyperparameters
        self.tag = tag

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.transformerType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.hyperparameters = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = HyperParameter()
                        _elem19.read(iprot)
                        self.hyperparameters.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TransformerSpec')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.transformerType is not None:
            oprot.writeFieldBegin('transformerType', TType.STRING, 2)
            oprot.writeString(self.transformerType.encode('utf-8') if sys.version_info[0] == 2 else self.transformerType)
            oprot.writeFieldEnd()
        if self.hyperparameters is not None:
            oprot.writeFieldBegin('hyperparameters', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.hyperparameters))
            for iter20 in self.hyperparameters:
                iter20.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 4)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Transformer(object):
    """
    Attributes:
     - id
     - transformerType
     - tag
     - filepath
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, -1, ),  # 1
        (2, TType.STRING, 'transformerType', 'UTF8', None, ),  # 2
        (3, TType.STRING, 'tag', 'UTF8', "", ),  # 3
        (4, TType.STRING, 'filepath', 'UTF8', None, ),  # 4
    )

    def __init__(self, id=thrift_spec[1][4], transformerType=None, tag=thrift_spec[3][4], filepath=None,):
        self.id = id
        self.transformerType = transformerType
        self.tag = tag
        self.filepath = filepath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.transformerType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tag = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.filepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Transformer')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.transformerType is not None:
            oprot.writeFieldBegin('transformerType', TType.STRING, 2)
            oprot.writeString(self.transformerType.encode('utf-8') if sys.version_info[0] == 2 else self.transformerType)
            oprot.writeFieldEnd()
        if self.tag is not None:
            oprot.writeFieldBegin('tag', TType.STRING, 3)
            oprot.writeString(self.tag.encode('utf-8') if sys.version_info[0] == 2 else self.tag)
            oprot.writeFieldEnd()
        if self.filepath is not None:
            oprot.writeFieldBegin('filepath', TType.STRING, 4)
            oprot.writeString(self.filepath.encode('utf-8') if sys.version_info[0] == 2 else self.filepath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LinearModelTerm(object):
    """
    Attributes:
     - coefficient
     - tStat
     - stdErr
     - pValue
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'coefficient', None, None, ),  # 1
        (2, TType.DOUBLE, 'tStat', None, None, ),  # 2
        (3, TType.DOUBLE, 'stdErr', None, None, ),  # 3
        (4, TType.DOUBLE, 'pValue', None, None, ),  # 4
    )

    def __init__(self, coefficient=None, tStat=None, stdErr=None, pValue=None,):
        self.coefficient = coefficient
        self.tStat = tStat
        self.stdErr = stdErr
        self.pValue = pValue

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.coefficient = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.tStat = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.stdErr = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.pValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LinearModelTerm')
        if self.coefficient is not None:
            oprot.writeFieldBegin('coefficient', TType.DOUBLE, 1)
            oprot.writeDouble(self.coefficient)
            oprot.writeFieldEnd()
        if self.tStat is not None:
            oprot.writeFieldBegin('tStat', TType.DOUBLE, 2)
            oprot.writeDouble(self.tStat)
            oprot.writeFieldEnd()
        if self.stdErr is not None:
            oprot.writeFieldBegin('stdErr', TType.DOUBLE, 3)
            oprot.writeDouble(self.stdErr)
            oprot.writeFieldEnd()
        if self.pValue is not None:
            oprot.writeFieldBegin('pValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.pValue)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LinearModel(object):
    """
    Attributes:
     - interceptTerm
     - featureTerms
     - objectiveHistory
     - rmse
     - explainedVariance
     - r2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'interceptTerm', (LinearModelTerm, LinearModelTerm.thrift_spec), None, ),  # 1
        (2, TType.LIST, 'featureTerms', (TType.STRUCT, (LinearModelTerm, LinearModelTerm.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'objectiveHistory', (TType.DOUBLE, None, False), None, ),  # 3
        (4, TType.DOUBLE, 'rmse', None, None, ),  # 4
        (5, TType.DOUBLE, 'explainedVariance', None, None, ),  # 5
        (6, TType.DOUBLE, 'r2', None, None, ),  # 6
    )

    def __init__(self, interceptTerm=None, featureTerms=None, objectiveHistory=None, rmse=None, explainedVariance=None, r2=None,):
        self.interceptTerm = interceptTerm
        self.featureTerms = featureTerms
        self.objectiveHistory = objectiveHistory
        self.rmse = rmse
        self.explainedVariance = explainedVariance
        self.r2 = r2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.interceptTerm = LinearModelTerm()
                    self.interceptTerm.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.featureTerms = []
                    (_etype24, _size21) = iprot.readListBegin()
                    for _i25 in range(_size21):
                        _elem26 = LinearModelTerm()
                        _elem26.read(iprot)
                        self.featureTerms.append(_elem26)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.objectiveHistory = []
                    (_etype30, _size27) = iprot.readListBegin()
                    for _i31 in range(_size27):
                        _elem32 = iprot.readDouble()
                        self.objectiveHistory.append(_elem32)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.rmse = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.explainedVariance = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.r2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('LinearModel')
        if self.interceptTerm is not None:
            oprot.writeFieldBegin('interceptTerm', TType.STRUCT, 1)
            self.interceptTerm.write(oprot)
            oprot.writeFieldEnd()
        if self.featureTerms is not None:
            oprot.writeFieldBegin('featureTerms', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.featureTerms))
            for iter33 in self.featureTerms:
                iter33.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.objectiveHistory is not None:
            oprot.writeFieldBegin('objectiveHistory', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.objectiveHistory))
            for iter34 in self.objectiveHistory:
                oprot.writeDouble(iter34)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.rmse is not None:
            oprot.writeFieldBegin('rmse', TType.DOUBLE, 4)
            oprot.writeDouble(self.rmse)
            oprot.writeFieldEnd()
        if self.explainedVariance is not None:
            oprot.writeFieldBegin('explainedVariance', TType.DOUBLE, 5)
            oprot.writeDouble(self.explainedVariance)
            oprot.writeFieldEnd()
        if self.r2 is not None:
            oprot.writeFieldBegin('r2', TType.DOUBLE, 6)
            oprot.writeDouble(self.r2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FitEvent(object):
    """
    Attributes:
     - df
     - spec
     - model
     - featureColumns
     - predictionColumns
     - labelColumns
     - experimentRunId
     - problemType
     - metadata
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'df', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'spec', (TransformerSpec, TransformerSpec.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'model', (Transformer, Transformer.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'featureColumns', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.LIST, 'predictionColumns', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.LIST, 'labelColumns', (TType.STRING, 'UTF8', False), None, ),  # 6
        (7, TType.I32, 'experimentRunId', None, None, ),  # 7
        (8, TType.I32, 'problemType', None, 0, ),  # 8
        (9, TType.STRING, 'metadata', 'UTF8', None, ),  # 9
    )

    def __init__(self, df=None, spec=None, model=None, featureColumns=None, predictionColumns=None, labelColumns=None, experimentRunId=None, problemType=thrift_spec[8][4], metadata=None,):
        self.df = df
        self.spec = spec
        self.model = model
        self.featureColumns = featureColumns
        self.predictionColumns = predictionColumns
        self.labelColumns = labelColumns
        self.experimentRunId = experimentRunId
        self.problemType = problemType
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.df = DataFrame()
                    self.df.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.spec = TransformerSpec()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.model = Transformer()
                    self.model.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.featureColumns = []
                    (_etype38, _size35) = iprot.readListBegin()
                    for _i39 in range(_size35):
                        _elem40 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.featureColumns.append(_elem40)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.predictionColumns = []
                    (_etype44, _size41) = iprot.readListBegin()
                    for _i45 in range(_size41):
                        _elem46 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.predictionColumns.append(_elem46)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.labelColumns = []
                    (_etype50, _size47) = iprot.readListBegin()
                    for _i51 in range(_size47):
                        _elem52 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.labelColumns.append(_elem52)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.problemType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FitEvent')
        if self.df is not None:
            oprot.writeFieldBegin('df', TType.STRUCT, 1)
            self.df.write(oprot)
            oprot.writeFieldEnd()
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 2)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRUCT, 3)
            self.model.write(oprot)
            oprot.writeFieldEnd()
        if self.featureColumns is not None:
            oprot.writeFieldBegin('featureColumns', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.featureColumns))
            for iter53 in self.featureColumns:
                oprot.writeString(iter53.encode('utf-8') if sys.version_info[0] == 2 else iter53)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.predictionColumns is not None:
            oprot.writeFieldBegin('predictionColumns', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.predictionColumns))
            for iter54 in self.predictionColumns:
                oprot.writeString(iter54.encode('utf-8') if sys.version_info[0] == 2 else iter54)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.labelColumns is not None:
            oprot.writeFieldBegin('labelColumns', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.labelColumns))
            for iter55 in self.labelColumns:
                oprot.writeString(iter55.encode('utf-8') if sys.version_info[0] == 2 else iter55)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 7)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        if self.problemType is not None:
            oprot.writeFieldBegin('problemType', TType.I32, 8)
            oprot.writeI32(self.problemType)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 9)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FitEventResponse(object):
    """
    Attributes:
     - dfId
     - specId
     - modelId
     - eventId
     - fitEventId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'dfId', None, None, ),  # 1
        (2, TType.I32, 'specId', None, None, ),  # 2
        (3, TType.I32, 'modelId', None, None, ),  # 3
        (4, TType.I32, 'eventId', None, None, ),  # 4
        (5, TType.I32, 'fitEventId', None, None, ),  # 5
    )

    def __init__(self, dfId=None, specId=None, modelId=None, eventId=None, fitEventId=None,):
        self.dfId = dfId
        self.specId = specId
        self.modelId = modelId
        self.eventId = eventId
        self.fitEventId = fitEventId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dfId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.specId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.modelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.eventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.fitEventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FitEventResponse')
        if self.dfId is not None:
            oprot.writeFieldBegin('dfId', TType.I32, 1)
            oprot.writeI32(self.dfId)
            oprot.writeFieldEnd()
        if self.specId is not None:
            oprot.writeFieldBegin('specId', TType.I32, 2)
            oprot.writeI32(self.specId)
            oprot.writeFieldEnd()
        if self.modelId is not None:
            oprot.writeFieldBegin('modelId', TType.I32, 3)
            oprot.writeI32(self.modelId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.I32, 4)
            oprot.writeI32(self.eventId)
            oprot.writeFieldEnd()
        if self.fitEventId is not None:
            oprot.writeFieldBegin('fitEventId', TType.I32, 5)
            oprot.writeI32(self.fitEventId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetricEvent(object):
    """
    Attributes:
     - df
     - model
     - metricType
     - metricValue
     - labelCol
     - predictionCol
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'df', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'model', (Transformer, Transformer.thrift_spec), None, ),  # 2
        (3, TType.STRING, 'metricType', 'UTF8', None, ),  # 3
        (4, TType.DOUBLE, 'metricValue', None, None, ),  # 4
        (5, TType.STRING, 'labelCol', 'UTF8', None, ),  # 5
        (6, TType.STRING, 'predictionCol', 'UTF8', None, ),  # 6
        (7, TType.I32, 'experimentRunId', None, None, ),  # 7
    )

    def __init__(self, df=None, model=None, metricType=None, metricValue=None, labelCol=None, predictionCol=None, experimentRunId=None,):
        self.df = df
        self.model = model
        self.metricType = metricType
        self.metricValue = metricValue
        self.labelCol = labelCol
        self.predictionCol = predictionCol
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.df = DataFrame()
                    self.df.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.model = Transformer()
                    self.model.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.metricType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.metricValue = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.labelCol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.predictionCol = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MetricEvent')
        if self.df is not None:
            oprot.writeFieldBegin('df', TType.STRUCT, 1)
            self.df.write(oprot)
            oprot.writeFieldEnd()
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRUCT, 2)
            self.model.write(oprot)
            oprot.writeFieldEnd()
        if self.metricType is not None:
            oprot.writeFieldBegin('metricType', TType.STRING, 3)
            oprot.writeString(self.metricType.encode('utf-8') if sys.version_info[0] == 2 else self.metricType)
            oprot.writeFieldEnd()
        if self.metricValue is not None:
            oprot.writeFieldBegin('metricValue', TType.DOUBLE, 4)
            oprot.writeDouble(self.metricValue)
            oprot.writeFieldEnd()
        if self.labelCol is not None:
            oprot.writeFieldBegin('labelCol', TType.STRING, 5)
            oprot.writeString(self.labelCol.encode('utf-8') if sys.version_info[0] == 2 else self.labelCol)
            oprot.writeFieldEnd()
        if self.predictionCol is not None:
            oprot.writeFieldBegin('predictionCol', TType.STRING, 6)
            oprot.writeString(self.predictionCol.encode('utf-8') if sys.version_info[0] == 2 else self.predictionCol)
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 7)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class MetricEventResponse(object):
    """
    Attributes:
     - modelId
     - dfId
     - eventId
     - metricEventId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'modelId', None, None, ),  # 1
        (2, TType.I32, 'dfId', None, None, ),  # 2
        (3, TType.I32, 'eventId', None, None, ),  # 3
        (4, TType.I32, 'metricEventId', None, None, ),  # 4
    )

    def __init__(self, modelId=None, dfId=None, eventId=None, metricEventId=None,):
        self.modelId = modelId
        self.dfId = dfId
        self.eventId = eventId
        self.metricEventId = metricEventId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.modelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.dfId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.eventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.metricEventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('MetricEventResponse')
        if self.modelId is not None:
            oprot.writeFieldBegin('modelId', TType.I32, 1)
            oprot.writeI32(self.modelId)
            oprot.writeFieldEnd()
        if self.dfId is not None:
            oprot.writeFieldBegin('dfId', TType.I32, 2)
            oprot.writeI32(self.dfId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.I32, 3)
            oprot.writeI32(self.eventId)
            oprot.writeFieldEnd()
        if self.metricEventId is not None:
            oprot.writeFieldBegin('metricEventId', TType.I32, 4)
            oprot.writeI32(self.metricEventId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransformEvent(object):
    """
    Attributes:
     - oldDataFrame
     - newDataFrame
     - transformer
     - inputColumns
     - outputColumns
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'oldDataFrame', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'newDataFrame', (DataFrame, DataFrame.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'transformer', (Transformer, Transformer.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'inputColumns', (TType.STRING, 'UTF8', False), None, ),  # 4
        (5, TType.LIST, 'outputColumns', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.I32, 'experimentRunId', None, None, ),  # 6
    )

    def __init__(self, oldDataFrame=None, newDataFrame=None, transformer=None, inputColumns=None, outputColumns=None, experimentRunId=None,):
        self.oldDataFrame = oldDataFrame
        self.newDataFrame = newDataFrame
        self.transformer = transformer
        self.inputColumns = inputColumns
        self.outputColumns = outputColumns
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.oldDataFrame = DataFrame()
                    self.oldDataFrame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.newDataFrame = DataFrame()
                    self.newDataFrame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.transformer = Transformer()
                    self.transformer.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.inputColumns = []
                    (_etype59, _size56) = iprot.readListBegin()
                    for _i60 in range(_size56):
                        _elem61 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.inputColumns.append(_elem61)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.outputColumns = []
                    (_etype65, _size62) = iprot.readListBegin()
                    for _i66 in range(_size62):
                        _elem67 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.outputColumns.append(_elem67)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TransformEvent')
        if self.oldDataFrame is not None:
            oprot.writeFieldBegin('oldDataFrame', TType.STRUCT, 1)
            self.oldDataFrame.write(oprot)
            oprot.writeFieldEnd()
        if self.newDataFrame is not None:
            oprot.writeFieldBegin('newDataFrame', TType.STRUCT, 2)
            self.newDataFrame.write(oprot)
            oprot.writeFieldEnd()
        if self.transformer is not None:
            oprot.writeFieldBegin('transformer', TType.STRUCT, 3)
            self.transformer.write(oprot)
            oprot.writeFieldEnd()
        if self.inputColumns is not None:
            oprot.writeFieldBegin('inputColumns', TType.LIST, 4)
            oprot.writeListBegin(TType.STRING, len(self.inputColumns))
            for iter68 in self.inputColumns:
                oprot.writeString(iter68.encode('utf-8') if sys.version_info[0] == 2 else iter68)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.outputColumns is not None:
            oprot.writeFieldBegin('outputColumns', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.outputColumns))
            for iter69 in self.outputColumns:
                oprot.writeString(iter69.encode('utf-8') if sys.version_info[0] == 2 else iter69)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 6)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TransformEventResponse(object):
    """
    Attributes:
     - oldDataFrameId
     - newDataFrameId
     - transformerId
     - eventId
     - filepath
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'oldDataFrameId', None, None, ),  # 1
        (2, TType.I32, 'newDataFrameId', None, None, ),  # 2
        (3, TType.I32, 'transformerId', None, None, ),  # 3
        (4, TType.I32, 'eventId', None, None, ),  # 4
        (5, TType.STRING, 'filepath', 'UTF8', None, ),  # 5
    )

    def __init__(self, oldDataFrameId=None, newDataFrameId=None, transformerId=None, eventId=None, filepath=None,):
        self.oldDataFrameId = oldDataFrameId
        self.newDataFrameId = newDataFrameId
        self.transformerId = transformerId
        self.eventId = eventId
        self.filepath = filepath

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.oldDataFrameId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.newDataFrameId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.transformerId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.eventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.filepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TransformEventResponse')
        if self.oldDataFrameId is not None:
            oprot.writeFieldBegin('oldDataFrameId', TType.I32, 1)
            oprot.writeI32(self.oldDataFrameId)
            oprot.writeFieldEnd()
        if self.newDataFrameId is not None:
            oprot.writeFieldBegin('newDataFrameId', TType.I32, 2)
            oprot.writeI32(self.newDataFrameId)
            oprot.writeFieldEnd()
        if self.transformerId is not None:
            oprot.writeFieldBegin('transformerId', TType.I32, 3)
            oprot.writeI32(self.transformerId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.I32, 4)
            oprot.writeI32(self.eventId)
            oprot.writeFieldEnd()
        if self.filepath is not None:
            oprot.writeFieldBegin('filepath', TType.STRING, 5)
            oprot.writeString(self.filepath.encode('utf-8') if sys.version_info[0] == 2 else self.filepath)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RandomSplitEvent(object):
    """
    Attributes:
     - oldDataFrame
     - weights
     - seed
     - splitDataFrames
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'oldDataFrame', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.LIST, 'weights', (TType.DOUBLE, None, False), None, ),  # 2
        (3, TType.I64, 'seed', None, None, ),  # 3
        (4, TType.LIST, 'splitDataFrames', (TType.STRUCT, (DataFrame, DataFrame.thrift_spec), False), None, ),  # 4
        (5, TType.I32, 'experimentRunId', None, None, ),  # 5
    )

    def __init__(self, oldDataFrame=None, weights=None, seed=None, splitDataFrames=None, experimentRunId=None,):
        self.oldDataFrame = oldDataFrame
        self.weights = weights
        self.seed = seed
        self.splitDataFrames = splitDataFrames
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.oldDataFrame = DataFrame()
                    self.oldDataFrame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.weights = []
                    (_etype73, _size70) = iprot.readListBegin()
                    for _i74 in range(_size70):
                        _elem75 = iprot.readDouble()
                        self.weights.append(_elem75)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.seed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.splitDataFrames = []
                    (_etype79, _size76) = iprot.readListBegin()
                    for _i80 in range(_size76):
                        _elem81 = DataFrame()
                        _elem81.read(iprot)
                        self.splitDataFrames.append(_elem81)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RandomSplitEvent')
        if self.oldDataFrame is not None:
            oprot.writeFieldBegin('oldDataFrame', TType.STRUCT, 1)
            self.oldDataFrame.write(oprot)
            oprot.writeFieldEnd()
        if self.weights is not None:
            oprot.writeFieldBegin('weights', TType.LIST, 2)
            oprot.writeListBegin(TType.DOUBLE, len(self.weights))
            for iter82 in self.weights:
                oprot.writeDouble(iter82)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.seed is not None:
            oprot.writeFieldBegin('seed', TType.I64, 3)
            oprot.writeI64(self.seed)
            oprot.writeFieldEnd()
        if self.splitDataFrames is not None:
            oprot.writeFieldBegin('splitDataFrames', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.splitDataFrames))
            for iter83 in self.splitDataFrames:
                iter83.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 5)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RandomSplitEventResponse(object):
    """
    Attributes:
     - oldDataFrameId
     - splitIds
     - splitEventId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'oldDataFrameId', None, None, ),  # 1
        (2, TType.LIST, 'splitIds', (TType.I32, None, False), None, ),  # 2
        (3, TType.I32, 'splitEventId', None, None, ),  # 3
    )

    def __init__(self, oldDataFrameId=None, splitIds=None, splitEventId=None,):
        self.oldDataFrameId = oldDataFrameId
        self.splitIds = splitIds
        self.splitEventId = splitEventId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.oldDataFrameId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.splitIds = []
                    (_etype87, _size84) = iprot.readListBegin()
                    for _i88 in range(_size84):
                        _elem89 = iprot.readI32()
                        self.splitIds.append(_elem89)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.splitEventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('RandomSplitEventResponse')
        if self.oldDataFrameId is not None:
            oprot.writeFieldBegin('oldDataFrameId', TType.I32, 1)
            oprot.writeI32(self.oldDataFrameId)
            oprot.writeFieldEnd()
        if self.splitIds is not None:
            oprot.writeFieldBegin('splitIds', TType.LIST, 2)
            oprot.writeListBegin(TType.I32, len(self.splitIds))
            for iter90 in self.splitIds:
                oprot.writeI32(iter90)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.splitEventId is not None:
            oprot.writeFieldBegin('splitEventId', TType.I32, 3)
            oprot.writeI32(self.splitEventId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PipelineTransformStage(object):
    """
    Attributes:
     - stageNumber
     - te
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'stageNumber', None, None, ),  # 1
        (2, TType.STRUCT, 'te', (TransformEvent, TransformEvent.thrift_spec), None, ),  # 2
    )

    def __init__(self, stageNumber=None, te=None,):
        self.stageNumber = stageNumber
        self.te = te

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stageNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.te = TransformEvent()
                    self.te.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PipelineTransformStage')
        if self.stageNumber is not None:
            oprot.writeFieldBegin('stageNumber', TType.I32, 1)
            oprot.writeI32(self.stageNumber)
            oprot.writeFieldEnd()
        if self.te is not None:
            oprot.writeFieldBegin('te', TType.STRUCT, 2)
            self.te.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PipelineFitStage(object):
    """
    Attributes:
     - stageNumber
     - fe
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'stageNumber', None, None, ),  # 1
        (2, TType.STRUCT, 'fe', (FitEvent, FitEvent.thrift_spec), None, ),  # 2
    )

    def __init__(self, stageNumber=None, fe=None,):
        self.stageNumber = stageNumber
        self.fe = fe

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.stageNumber = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fe = FitEvent()
                    self.fe.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PipelineFitStage')
        if self.stageNumber is not None:
            oprot.writeFieldBegin('stageNumber', TType.I32, 1)
            oprot.writeI32(self.stageNumber)
            oprot.writeFieldEnd()
        if self.fe is not None:
            oprot.writeFieldBegin('fe', TType.STRUCT, 2)
            self.fe.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PipelineEvent(object):
    """
    Attributes:
     - pipelineFit
     - transformStages
     - fitStages
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'pipelineFit', (FitEvent, FitEvent.thrift_spec), None, ),  # 1
        (2, TType.LIST, 'transformStages', (TType.STRUCT, (PipelineTransformStage, PipelineTransformStage.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'fitStages', (TType.STRUCT, (PipelineFitStage, PipelineFitStage.thrift_spec), False), None, ),  # 3
        (4, TType.I32, 'experimentRunId', None, None, ),  # 4
    )

    def __init__(self, pipelineFit=None, transformStages=None, fitStages=None, experimentRunId=None,):
        self.pipelineFit = pipelineFit
        self.transformStages = transformStages
        self.fitStages = fitStages
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pipelineFit = FitEvent()
                    self.pipelineFit.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transformStages = []
                    (_etype94, _size91) = iprot.readListBegin()
                    for _i95 in range(_size91):
                        _elem96 = PipelineTransformStage()
                        _elem96.read(iprot)
                        self.transformStages.append(_elem96)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.fitStages = []
                    (_etype100, _size97) = iprot.readListBegin()
                    for _i101 in range(_size97):
                        _elem102 = PipelineFitStage()
                        _elem102.read(iprot)
                        self.fitStages.append(_elem102)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PipelineEvent')
        if self.pipelineFit is not None:
            oprot.writeFieldBegin('pipelineFit', TType.STRUCT, 1)
            self.pipelineFit.write(oprot)
            oprot.writeFieldEnd()
        if self.transformStages is not None:
            oprot.writeFieldBegin('transformStages', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transformStages))
            for iter103 in self.transformStages:
                iter103.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fitStages is not None:
            oprot.writeFieldBegin('fitStages', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.fitStages))
            for iter104 in self.fitStages:
                iter104.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 4)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class PipelineEventResponse(object):
    """
    Attributes:
     - pipelineFitResponse
     - transformStagesResponses
     - fitStagesResponses
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'pipelineFitResponse', (FitEventResponse, FitEventResponse.thrift_spec), None, ),  # 1
        (2, TType.LIST, 'transformStagesResponses', (TType.STRUCT, (TransformEventResponse, TransformEventResponse.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'fitStagesResponses', (TType.STRUCT, (FitEventResponse, FitEventResponse.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, pipelineFitResponse=None, transformStagesResponses=None, fitStagesResponses=None,):
        self.pipelineFitResponse = pipelineFitResponse
        self.transformStagesResponses = transformStagesResponses
        self.fitStagesResponses = fitStagesResponses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.pipelineFitResponse = FitEventResponse()
                    self.pipelineFitResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.transformStagesResponses = []
                    (_etype108, _size105) = iprot.readListBegin()
                    for _i109 in range(_size105):
                        _elem110 = TransformEventResponse()
                        _elem110.read(iprot)
                        self.transformStagesResponses.append(_elem110)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.fitStagesResponses = []
                    (_etype114, _size111) = iprot.readListBegin()
                    for _i115 in range(_size111):
                        _elem116 = FitEventResponse()
                        _elem116.read(iprot)
                        self.fitStagesResponses.append(_elem116)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('PipelineEventResponse')
        if self.pipelineFitResponse is not None:
            oprot.writeFieldBegin('pipelineFitResponse', TType.STRUCT, 1)
            self.pipelineFitResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.transformStagesResponses is not None:
            oprot.writeFieldBegin('transformStagesResponses', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.transformStagesResponses))
            for iter117 in self.transformStagesResponses:
                iter117.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.fitStagesResponses is not None:
            oprot.writeFieldBegin('fitStagesResponses', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.fitStagesResponses))
            for iter118 in self.fitStagesResponses:
                iter118.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationFragment(object):
    """
    Attributes:
     - type
     - df
     - spec
     - transformer
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
        (2, TType.STRUCT, 'df', (DataFrame, DataFrame.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'spec', (TransformerSpec, TransformerSpec.thrift_spec), None, ),  # 3
        (4, TType.STRUCT, 'transformer', (Transformer, Transformer.thrift_spec), None, ),  # 4
        (5, TType.STRING, 'message', 'UTF8', None, ),  # 5
    )

    def __init__(self, type=None, df=None, spec=None, transformer=None, message=None,):
        self.type = type
        self.df = df
        self.spec = spec
        self.transformer = transformer
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.df = DataFrame()
                    self.df.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.spec = TransformerSpec()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.transformer = Transformer()
                    self.transformer.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnnotationFragment')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.df is not None:
            oprot.writeFieldBegin('df', TType.STRUCT, 2)
            self.df.write(oprot)
            oprot.writeFieldEnd()
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 3)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        if self.transformer is not None:
            oprot.writeFieldBegin('transformer', TType.STRUCT, 4)
            self.transformer.write(oprot)
            oprot.writeFieldEnd()
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 5)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationFragmentResponse(object):
    """
    Attributes:
     - type
     - id
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'type', 'UTF8', None, ),  # 1
        (2, TType.I32, 'id', None, None, ),  # 2
    )

    def __init__(self, type=None, id=None,):
        self.type = type
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.type = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnnotationFragmentResponse')
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.STRING, 1)
            oprot.writeString(self.type.encode('utf-8') if sys.version_info[0] == 2 else self.type)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 2)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationEvent(object):
    """
    Attributes:
     - fragments
     - experimentRunId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'fragments', (TType.STRUCT, (AnnotationFragment, AnnotationFragment.thrift_spec), False), None, ),  # 1
        (2, TType.I32, 'experimentRunId', None, None, ),  # 2
    )

    def __init__(self, fragments=None, experimentRunId=None,):
        self.fragments = fragments
        self.experimentRunId = experimentRunId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.fragments = []
                    (_etype122, _size119) = iprot.readListBegin()
                    for _i123 in range(_size119):
                        _elem124 = AnnotationFragment()
                        _elem124.read(iprot)
                        self.fragments.append(_elem124)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnnotationEvent')
        if self.fragments is not None:
            oprot.writeFieldBegin('fragments', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.fragments))
            for iter125 in self.fragments:
                iter125.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 2)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class AnnotationEventResponse(object):
    """
    Attributes:
     - annotationId
     - fragmentResponses
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'annotationId', None, None, ),  # 1
        (2, TType.LIST, 'fragmentResponses', (TType.STRUCT, (AnnotationFragmentResponse, AnnotationFragmentResponse.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, annotationId=None, fragmentResponses=None,):
        self.annotationId = annotationId
        self.fragmentResponses = fragmentResponses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.annotationId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.fragmentResponses = []
                    (_etype129, _size126) = iprot.readListBegin()
                    for _i130 in range(_size126):
                        _elem131 = AnnotationFragmentResponse()
                        _elem131.read(iprot)
                        self.fragmentResponses.append(_elem131)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('AnnotationEventResponse')
        if self.annotationId is not None:
            oprot.writeFieldBegin('annotationId', TType.I32, 1)
            oprot.writeI32(self.annotationId)
            oprot.writeFieldEnd()
        if self.fragmentResponses is not None:
            oprot.writeFieldBegin('fragmentResponses', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.fragmentResponses))
            for iter132 in self.fragmentResponses:
                iter132.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataFrameAncestry(object):
    """
    Attributes:
     - ancestors
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'ancestors', (TType.STRUCT, (DataFrame, DataFrame.thrift_spec), False), None, ),  # 1
    )

    def __init__(self, ancestors=None,):
        self.ancestors = ancestors

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.ancestors = []
                    (_etype136, _size133) = iprot.readListBegin()
                    for _i137 in range(_size133):
                        _elem138 = DataFrame()
                        _elem138.read(iprot)
                        self.ancestors.append(_elem138)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('DataFrameAncestry')
        if self.ancestors is not None:
            oprot.writeFieldBegin('ancestors', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.ancestors))
            for iter139 in self.ancestors:
                iter139.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CommonAncestor(object):
    """
    Attributes:
     - ancestor
     - chainIndexModel1
     - chainIndexModel2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'ancestor', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.I32, 'chainIndexModel1', None, None, ),  # 2
        (3, TType.I32, 'chainIndexModel2', None, None, ),  # 3
    )

    def __init__(self, ancestor=None, chainIndexModel1=None, chainIndexModel2=None,):
        self.ancestor = ancestor
        self.chainIndexModel1 = chainIndexModel1
        self.chainIndexModel2 = chainIndexModel2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.ancestor = DataFrame()
                    self.ancestor.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.chainIndexModel1 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.chainIndexModel2 = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CommonAncestor')
        if self.ancestor is not None:
            oprot.writeFieldBegin('ancestor', TType.STRUCT, 1)
            self.ancestor.write(oprot)
            oprot.writeFieldEnd()
        if self.chainIndexModel1 is not None:
            oprot.writeFieldBegin('chainIndexModel1', TType.I32, 2)
            oprot.writeI32(self.chainIndexModel1)
            oprot.writeFieldEnd()
        if self.chainIndexModel2 is not None:
            oprot.writeFieldBegin('chainIndexModel2', TType.I32, 3)
            oprot.writeI32(self.chainIndexModel2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class StringPair(object):
    """
    Attributes:
     - first
     - second
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'first', 'UTF8', None, ),  # 1
        (2, TType.STRING, 'second', 'UTF8', None, ),  # 2
    )

    def __init__(self, first=None, second=None,):
        self.first = first
        self.second = second

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.first = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.second = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('StringPair')
        if self.first is not None:
            oprot.writeFieldBegin('first', TType.STRING, 1)
            oprot.writeString(self.first.encode('utf-8') if sys.version_info[0] == 2 else self.first)
            oprot.writeFieldEnd()
        if self.second is not None:
            oprot.writeFieldBegin('second', TType.STRING, 2)
            oprot.writeString(self.second.encode('utf-8') if sys.version_info[0] == 2 else self.second)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CompareHyperParametersResponse(object):
    """
    Attributes:
     - model1OnlyHyperparams
     - model2OnlyHyperparams
     - sharedHyperparams
    """

    thrift_spec = (
        None,  # 0
        (1, TType.MAP, 'model1OnlyHyperparams', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.MAP, 'model2OnlyHyperparams', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.MAP, 'sharedHyperparams', (TType.STRING, 'UTF8', TType.STRUCT, (StringPair, StringPair.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, model1OnlyHyperparams=None, model2OnlyHyperparams=None, sharedHyperparams=None,):
        self.model1OnlyHyperparams = model1OnlyHyperparams
        self.model2OnlyHyperparams = model2OnlyHyperparams
        self.sharedHyperparams = sharedHyperparams

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.MAP:
                    self.model1OnlyHyperparams = {}
                    (_ktype141, _vtype142, _size140) = iprot.readMapBegin()
                    for _i144 in range(_size140):
                        _key145 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val146 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.model1OnlyHyperparams[_key145] = _val146
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.model2OnlyHyperparams = {}
                    (_ktype148, _vtype149, _size147) = iprot.readMapBegin()
                    for _i151 in range(_size147):
                        _key152 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val153 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.model2OnlyHyperparams[_key152] = _val153
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.MAP:
                    self.sharedHyperparams = {}
                    (_ktype155, _vtype156, _size154) = iprot.readMapBegin()
                    for _i158 in range(_size154):
                        _key159 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val160 = StringPair()
                        _val160.read(iprot)
                        self.sharedHyperparams[_key159] = _val160
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CompareHyperParametersResponse')
        if self.model1OnlyHyperparams is not None:
            oprot.writeFieldBegin('model1OnlyHyperparams', TType.MAP, 1)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.model1OnlyHyperparams))
            for kiter161, viter162 in self.model1OnlyHyperparams.items():
                oprot.writeString(kiter161.encode('utf-8') if sys.version_info[0] == 2 else kiter161)
                oprot.writeString(viter162.encode('utf-8') if sys.version_info[0] == 2 else viter162)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.model2OnlyHyperparams is not None:
            oprot.writeFieldBegin('model2OnlyHyperparams', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.model2OnlyHyperparams))
            for kiter163, viter164 in self.model2OnlyHyperparams.items():
                oprot.writeString(kiter163.encode('utf-8') if sys.version_info[0] == 2 else kiter163)
                oprot.writeString(viter164.encode('utf-8') if sys.version_info[0] == 2 else viter164)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.sharedHyperparams is not None:
            oprot.writeFieldBegin('sharedHyperparams', TType.MAP, 3)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.sharedHyperparams))
            for kiter165, viter166 in self.sharedHyperparams.items():
                oprot.writeString(kiter165.encode('utf-8') if sys.version_info[0] == 2 else kiter165)
                viter166.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CompareFeaturesResponse(object):
    """
    Attributes:
     - model1OnlyFeatures
     - model2OnlyFeatures
     - commonFeatures
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'model1OnlyFeatures', (TType.STRING, 'UTF8', False), None, ),  # 1
        (2, TType.LIST, 'model2OnlyFeatures', (TType.STRING, 'UTF8', False), None, ),  # 2
        (3, TType.LIST, 'commonFeatures', (TType.STRING, 'UTF8', False), None, ),  # 3
    )

    def __init__(self, model1OnlyFeatures=None, model2OnlyFeatures=None, commonFeatures=None,):
        self.model1OnlyFeatures = model1OnlyFeatures
        self.model2OnlyFeatures = model2OnlyFeatures
        self.commonFeatures = commonFeatures

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.model1OnlyFeatures = []
                    (_etype170, _size167) = iprot.readListBegin()
                    for _i171 in range(_size167):
                        _elem172 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.model1OnlyFeatures.append(_elem172)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.model2OnlyFeatures = []
                    (_etype176, _size173) = iprot.readListBegin()
                    for _i177 in range(_size173):
                        _elem178 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.model2OnlyFeatures.append(_elem178)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.commonFeatures = []
                    (_etype182, _size179) = iprot.readListBegin()
                    for _i183 in range(_size179):
                        _elem184 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.commonFeatures.append(_elem184)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CompareFeaturesResponse')
        if self.model1OnlyFeatures is not None:
            oprot.writeFieldBegin('model1OnlyFeatures', TType.LIST, 1)
            oprot.writeListBegin(TType.STRING, len(self.model1OnlyFeatures))
            for iter185 in self.model1OnlyFeatures:
                oprot.writeString(iter185.encode('utf-8') if sys.version_info[0] == 2 else iter185)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.model2OnlyFeatures is not None:
            oprot.writeFieldBegin('model2OnlyFeatures', TType.LIST, 2)
            oprot.writeListBegin(TType.STRING, len(self.model2OnlyFeatures))
            for iter186 in self.model2OnlyFeatures:
                oprot.writeString(iter186.encode('utf-8') if sys.version_info[0] == 2 else iter186)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.commonFeatures is not None:
            oprot.writeFieldBegin('commonFeatures', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.commonFeatures))
            for iter187 in self.commonFeatures:
                oprot.writeString(iter187.encode('utf-8') if sys.version_info[0] == 2 else iter187)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FeatureImportanceComparison(object):
    """
    Attributes:
     - featureName
     - percentileRankInModel1
     - percentileRankInModel2
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'featureName', 'UTF8', None, ),  # 1
        (2, TType.DOUBLE, 'percentileRankInModel1', None, None, ),  # 2
        (3, TType.DOUBLE, 'percentileRankInModel2', None, None, ),  # 3
    )

    def __init__(self, featureName=None, percentileRankInModel1=None, percentileRankInModel2=None,):
        self.featureName = featureName
        self.percentileRankInModel1 = percentileRankInModel1
        self.percentileRankInModel2 = percentileRankInModel2

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.featureName = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.percentileRankInModel1 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.percentileRankInModel2 = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('FeatureImportanceComparison')
        if self.featureName is not None:
            oprot.writeFieldBegin('featureName', TType.STRING, 1)
            oprot.writeString(self.featureName.encode('utf-8') if sys.version_info[0] == 2 else self.featureName)
            oprot.writeFieldEnd()
        if self.percentileRankInModel1 is not None:
            oprot.writeFieldBegin('percentileRankInModel1', TType.DOUBLE, 2)
            oprot.writeDouble(self.percentileRankInModel1)
            oprot.writeFieldEnd()
        if self.percentileRankInModel2 is not None:
            oprot.writeFieldBegin('percentileRankInModel2', TType.DOUBLE, 3)
            oprot.writeDouble(self.percentileRankInModel2)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ConfidenceInterval(object):
    """
    Attributes:
     - featureIndex
     - low
     - high
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'featureIndex', None, None, ),  # 1
        (2, TType.DOUBLE, 'low', None, None, ),  # 2
        (3, TType.DOUBLE, 'high', None, None, ),  # 3
    )

    def __init__(self, featureIndex=None, low=None, high=None,):
        self.featureIndex = featureIndex
        self.low = low
        self.high = high

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.featureIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.low = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.high = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ConfidenceInterval')
        if self.featureIndex is not None:
            oprot.writeFieldBegin('featureIndex', TType.I32, 1)
            oprot.writeI32(self.featureIndex)
            oprot.writeFieldEnd()
        if self.low is not None:
            oprot.writeFieldBegin('low', TType.DOUBLE, 2)
            oprot.writeDouble(self.low)
            oprot.writeFieldEnd()
        if self.high is not None:
            oprot.writeFieldBegin('high', TType.DOUBLE, 3)
            oprot.writeDouble(self.high)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectExperimentsAndRuns(object):
    """
    Attributes:
     - projId
     - experiments
     - experimentRuns
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'projId', None, None, ),  # 1
        (2, TType.LIST, 'experiments', (TType.STRUCT, (Experiment, Experiment.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'experimentRuns', (TType.STRUCT, (ExperimentRun, ExperimentRun.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, projId=None, experiments=None, experimentRuns=None,):
        self.projId = projId
        self.experiments = experiments
        self.experimentRuns = experimentRuns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.projId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.experiments = []
                    (_etype191, _size188) = iprot.readListBegin()
                    for _i192 in range(_size188):
                        _elem193 = Experiment()
                        _elem193.read(iprot)
                        self.experiments.append(_elem193)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.experimentRuns = []
                    (_etype197, _size194) = iprot.readListBegin()
                    for _i198 in range(_size194):
                        _elem199 = ExperimentRun()
                        _elem199.read(iprot)
                        self.experimentRuns.append(_elem199)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProjectExperimentsAndRuns')
        if self.projId is not None:
            oprot.writeFieldBegin('projId', TType.I32, 1)
            oprot.writeI32(self.projId)
            oprot.writeFieldEnd()
        if self.experiments is not None:
            oprot.writeFieldBegin('experiments', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.experiments))
            for iter200 in self.experiments:
                iter200.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRuns is not None:
            oprot.writeFieldBegin('experimentRuns', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.experimentRuns))
            for iter201 in self.experimentRuns:
                iter201.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProjectOverviewResponse(object):
    """
    Attributes:
     - project
     - numExperiments
     - numExperimentRuns
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'project', (Project, Project.thrift_spec), None, ),  # 1
        (2, TType.I32, 'numExperiments', None, None, ),  # 2
        (3, TType.I32, 'numExperimentRuns', None, None, ),  # 3
    )

    def __init__(self, project=None, numExperiments=None, numExperimentRuns=None,):
        self.project = project
        self.numExperiments = numExperiments
        self.numExperimentRuns = numExperimentRuns

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.project = Project()
                    self.project.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.numExperiments = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numExperimentRuns = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ProjectOverviewResponse')
        if self.project is not None:
            oprot.writeFieldBegin('project', TType.STRUCT, 1)
            self.project.write(oprot)
            oprot.writeFieldEnd()
        if self.numExperiments is not None:
            oprot.writeFieldBegin('numExperiments', TType.I32, 2)
            oprot.writeI32(self.numExperiments)
            oprot.writeFieldEnd()
        if self.numExperimentRuns is not None:
            oprot.writeFieldBegin('numExperimentRuns', TType.I32, 3)
            oprot.writeI32(self.numExperimentRuns)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ModelResponse(object):
    """
    Attributes:
     - id
     - experimentRunId
     - experimentId
     - projectId
     - trainingDataFrame
     - specification
     - problemType
     - featureColumns
     - labelColumns
     - predictionColumns
     - metrics
     - annotations
     - sha
     - filepath
     - timestamp
     - linearModelData
     - metadata
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'id', None, None, ),  # 1
        (2, TType.I32, 'experimentRunId', None, None, ),  # 2
        (3, TType.I32, 'experimentId', None, None, ),  # 3
        (4, TType.I32, 'projectId', None, None, ),  # 4
        (5, TType.STRUCT, 'trainingDataFrame', (DataFrame, DataFrame.thrift_spec), None, ),  # 5
        (6, TType.STRUCT, 'specification', (TransformerSpec, TransformerSpec.thrift_spec), None, ),  # 6
        (7, TType.I32, 'problemType', None, None, ),  # 7
        (8, TType.LIST, 'featureColumns', (TType.STRING, 'UTF8', False), None, ),  # 8
        (9, TType.LIST, 'labelColumns', (TType.STRING, 'UTF8', False), None, ),  # 9
        (10, TType.LIST, 'predictionColumns', (TType.STRING, 'UTF8', False), None, ),  # 10
        (11, TType.MAP, 'metrics', (TType.STRING, 'UTF8', TType.MAP, (TType.I32, None, TType.DOUBLE, None, False), False), None, ),  # 11
        (12, TType.LIST, 'annotations', (TType.STRING, 'UTF8', False), None, ),  # 12
        (13, TType.STRING, 'sha', 'UTF8', None, ),  # 13
        (14, TType.STRING, 'filepath', 'UTF8', None, ),  # 14
        (15, TType.STRING, 'timestamp', 'UTF8', None, ),  # 15
        (16, TType.STRUCT, 'linearModelData', (LinearModel, LinearModel.thrift_spec), None, ),  # 16
        (17, TType.STRING, 'metadata', 'UTF8', None, ),  # 17
    )

    def __init__(self, id=None, experimentRunId=None, experimentId=None, projectId=None, trainingDataFrame=None, specification=None, problemType=None, featureColumns=None, labelColumns=None, predictionColumns=None, metrics=None, annotations=None, sha=None, filepath=None, timestamp=None, linearModelData=None, metadata=None,):
        self.id = id
        self.experimentRunId = experimentRunId
        self.experimentId = experimentId
        self.projectId = projectId
        self.trainingDataFrame = trainingDataFrame
        self.specification = specification
        self.problemType = problemType
        self.featureColumns = featureColumns
        self.labelColumns = labelColumns
        self.predictionColumns = predictionColumns
        self.metrics = metrics
        self.annotations = annotations
        self.sha = sha
        self.filepath = filepath
        self.timestamp = timestamp
        self.linearModelData = linearModelData
        self.metadata = metadata

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.id = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.experimentId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.projectId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRUCT:
                    self.trainingDataFrame = DataFrame()
                    self.trainingDataFrame.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRUCT:
                    self.specification = TransformerSpec()
                    self.specification.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.problemType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.featureColumns = []
                    (_etype205, _size202) = iprot.readListBegin()
                    for _i206 in range(_size202):
                        _elem207 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.featureColumns.append(_elem207)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.LIST:
                    self.labelColumns = []
                    (_etype211, _size208) = iprot.readListBegin()
                    for _i212 in range(_size208):
                        _elem213 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.labelColumns.append(_elem213)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.LIST:
                    self.predictionColumns = []
                    (_etype217, _size214) = iprot.readListBegin()
                    for _i218 in range(_size214):
                        _elem219 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.predictionColumns.append(_elem219)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.MAP:
                    self.metrics = {}
                    (_ktype221, _vtype222, _size220) = iprot.readMapBegin()
                    for _i224 in range(_size220):
                        _key225 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val226 = {}
                        (_ktype228, _vtype229, _size227) = iprot.readMapBegin()
                        for _i231 in range(_size227):
                            _key232 = iprot.readI32()
                            _val233 = iprot.readDouble()
                            _val226[_key232] = _val233
                        iprot.readMapEnd()
                        self.metrics[_key225] = _val226
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.annotations = []
                    (_etype237, _size234) = iprot.readListBegin()
                    for _i238 in range(_size234):
                        _elem239 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.annotations.append(_elem239)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sha = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.filepath = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 16:
                if ftype == TType.STRUCT:
                    self.linearModelData = LinearModel()
                    self.linearModelData.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.STRING:
                    self.metadata = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ModelResponse')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I32, 1)
            oprot.writeI32(self.id)
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 2)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        if self.experimentId is not None:
            oprot.writeFieldBegin('experimentId', TType.I32, 3)
            oprot.writeI32(self.experimentId)
            oprot.writeFieldEnd()
        if self.projectId is not None:
            oprot.writeFieldBegin('projectId', TType.I32, 4)
            oprot.writeI32(self.projectId)
            oprot.writeFieldEnd()
        if self.trainingDataFrame is not None:
            oprot.writeFieldBegin('trainingDataFrame', TType.STRUCT, 5)
            self.trainingDataFrame.write(oprot)
            oprot.writeFieldEnd()
        if self.specification is not None:
            oprot.writeFieldBegin('specification', TType.STRUCT, 6)
            self.specification.write(oprot)
            oprot.writeFieldEnd()
        if self.problemType is not None:
            oprot.writeFieldBegin('problemType', TType.I32, 7)
            oprot.writeI32(self.problemType)
            oprot.writeFieldEnd()
        if self.featureColumns is not None:
            oprot.writeFieldBegin('featureColumns', TType.LIST, 8)
            oprot.writeListBegin(TType.STRING, len(self.featureColumns))
            for iter240 in self.featureColumns:
                oprot.writeString(iter240.encode('utf-8') if sys.version_info[0] == 2 else iter240)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.labelColumns is not None:
            oprot.writeFieldBegin('labelColumns', TType.LIST, 9)
            oprot.writeListBegin(TType.STRING, len(self.labelColumns))
            for iter241 in self.labelColumns:
                oprot.writeString(iter241.encode('utf-8') if sys.version_info[0] == 2 else iter241)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.predictionColumns is not None:
            oprot.writeFieldBegin('predictionColumns', TType.LIST, 10)
            oprot.writeListBegin(TType.STRING, len(self.predictionColumns))
            for iter242 in self.predictionColumns:
                oprot.writeString(iter242.encode('utf-8') if sys.version_info[0] == 2 else iter242)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.metrics is not None:
            oprot.writeFieldBegin('metrics', TType.MAP, 11)
            oprot.writeMapBegin(TType.STRING, TType.MAP, len(self.metrics))
            for kiter243, viter244 in self.metrics.items():
                oprot.writeString(kiter243.encode('utf-8') if sys.version_info[0] == 2 else kiter243)
                oprot.writeMapBegin(TType.I32, TType.DOUBLE, len(viter244))
                for kiter245, viter246 in viter244.items():
                    oprot.writeI32(kiter245)
                    oprot.writeDouble(viter246)
                oprot.writeMapEnd()
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.annotations is not None:
            oprot.writeFieldBegin('annotations', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.annotations))
            for iter247 in self.annotations:
                oprot.writeString(iter247.encode('utf-8') if sys.version_info[0] == 2 else iter247)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.sha is not None:
            oprot.writeFieldBegin('sha', TType.STRING, 13)
            oprot.writeString(self.sha.encode('utf-8') if sys.version_info[0] == 2 else self.sha)
            oprot.writeFieldEnd()
        if self.filepath is not None:
            oprot.writeFieldBegin('filepath', TType.STRING, 14)
            oprot.writeString(self.filepath.encode('utf-8') if sys.version_info[0] == 2 else self.filepath)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 15)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        if self.linearModelData is not None:
            oprot.writeFieldBegin('linearModelData', TType.STRUCT, 16)
            self.linearModelData.write(oprot)
            oprot.writeFieldEnd()
        if self.metadata is not None:
            oprot.writeFieldBegin('metadata', TType.STRING, 17)
            oprot.writeString(self.metadata.encode('utf-8') if sys.version_info[0] == 2 else self.metadata)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExperimentRunDetailsResponse(object):
    """
    Attributes:
     - project
     - experiment
     - experimentRun
     - modelResponses
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'project', (Project, Project.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'experiment', (Experiment, Experiment.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'experimentRun', (ExperimentRun, ExperimentRun.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'modelResponses', (TType.STRUCT, (ModelResponse, ModelResponse.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, project=None, experiment=None, experimentRun=None, modelResponses=None,):
        self.project = project
        self.experiment = experiment
        self.experimentRun = experimentRun
        self.modelResponses = modelResponses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.project = Project()
                    self.project.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.experiment = Experiment()
                    self.experiment.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.experimentRun = ExperimentRun()
                    self.experimentRun.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.modelResponses = []
                    (_etype251, _size248) = iprot.readListBegin()
                    for _i252 in range(_size248):
                        _elem253 = ModelResponse()
                        _elem253.read(iprot)
                        self.modelResponses.append(_elem253)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExperimentRunDetailsResponse')
        if self.project is not None:
            oprot.writeFieldBegin('project', TType.STRUCT, 1)
            self.project.write(oprot)
            oprot.writeFieldEnd()
        if self.experiment is not None:
            oprot.writeFieldBegin('experiment', TType.STRUCT, 2)
            self.experiment.write(oprot)
            oprot.writeFieldEnd()
        if self.experimentRun is not None:
            oprot.writeFieldBegin('experimentRun', TType.STRUCT, 3)
            self.experimentRun.write(oprot)
            oprot.writeFieldEnd()
        if self.modelResponses is not None:
            oprot.writeFieldBegin('modelResponses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.modelResponses))
            for iter254 in self.modelResponses:
                iter254.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrossValidationFold(object):
    """
    Attributes:
     - model
     - validationDf
     - trainingDf
     - score
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'model', (Transformer, Transformer.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'validationDf', (DataFrame, DataFrame.thrift_spec), None, ),  # 2
        (3, TType.STRUCT, 'trainingDf', (DataFrame, DataFrame.thrift_spec), None, ),  # 3
        (4, TType.DOUBLE, 'score', None, None, ),  # 4
    )

    def __init__(self, model=None, validationDf=None, trainingDf=None, score=None,):
        self.model = model
        self.validationDf = validationDf
        self.trainingDf = trainingDf
        self.score = score

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.model = Transformer()
                    self.model.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.validationDf = DataFrame()
                    self.validationDf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.trainingDf = DataFrame()
                    self.trainingDf.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.DOUBLE:
                    self.score = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrossValidationFold')
        if self.model is not None:
            oprot.writeFieldBegin('model', TType.STRUCT, 1)
            self.model.write(oprot)
            oprot.writeFieldEnd()
        if self.validationDf is not None:
            oprot.writeFieldBegin('validationDf', TType.STRUCT, 2)
            self.validationDf.write(oprot)
            oprot.writeFieldEnd()
        if self.trainingDf is not None:
            oprot.writeFieldBegin('trainingDf', TType.STRUCT, 3)
            self.trainingDf.write(oprot)
            oprot.writeFieldEnd()
        if self.score is not None:
            oprot.writeFieldBegin('score', TType.DOUBLE, 4)
            oprot.writeDouble(self.score)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrossValidationFoldResponse(object):
    """
    Attributes:
     - modelId
     - validationId
     - trainingId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'modelId', None, None, ),  # 1
        (2, TType.I32, 'validationId', None, None, ),  # 2
        (3, TType.I32, 'trainingId', None, None, ),  # 3
    )

    def __init__(self, modelId=None, validationId=None, trainingId=None,):
        self.modelId = modelId
        self.validationId = validationId
        self.trainingId = trainingId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.modelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.validationId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.trainingId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrossValidationFoldResponse')
        if self.modelId is not None:
            oprot.writeFieldBegin('modelId', TType.I32, 1)
            oprot.writeI32(self.modelId)
            oprot.writeFieldEnd()
        if self.validationId is not None:
            oprot.writeFieldBegin('validationId', TType.I32, 2)
            oprot.writeI32(self.validationId)
            oprot.writeFieldEnd()
        if self.trainingId is not None:
            oprot.writeFieldBegin('trainingId', TType.I32, 3)
            oprot.writeI32(self.trainingId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrossValidationEvent(object):
    """
    Attributes:
     - df
     - spec
     - seed
     - evaluator
     - labelColumns
     - predictionColumns
     - featureColumns
     - folds
     - experimentRunId
     - problemType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRUCT, 'df', (DataFrame, DataFrame.thrift_spec), None, ),  # 1
        (2, TType.STRUCT, 'spec', (TransformerSpec, TransformerSpec.thrift_spec), None, ),  # 2
        (3, TType.I64, 'seed', None, None, ),  # 3
        (4, TType.STRING, 'evaluator', 'UTF8', None, ),  # 4
        (5, TType.LIST, 'labelColumns', (TType.STRING, 'UTF8', False), None, ),  # 5
        (6, TType.LIST, 'predictionColumns', (TType.STRING, 'UTF8', False), None, ),  # 6
        (7, TType.LIST, 'featureColumns', (TType.STRING, 'UTF8', False), None, ),  # 7
        (8, TType.LIST, 'folds', (TType.STRUCT, (CrossValidationFold, CrossValidationFold.thrift_spec), False), None, ),  # 8
        (9, TType.I32, 'experimentRunId', None, None, ),  # 9
        (10, TType.I32, 'problemType', None, 0, ),  # 10
    )

    def __init__(self, df=None, spec=None, seed=None, evaluator=None, labelColumns=None, predictionColumns=None, featureColumns=None, folds=None, experimentRunId=None, problemType=thrift_spec[10][4],):
        self.df = df
        self.spec = spec
        self.seed = seed
        self.evaluator = evaluator
        self.labelColumns = labelColumns
        self.predictionColumns = predictionColumns
        self.featureColumns = featureColumns
        self.folds = folds
        self.experimentRunId = experimentRunId
        self.problemType = problemType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.df = DataFrame()
                    self.df.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.spec = TransformerSpec()
                    self.spec.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.seed = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.evaluator = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.labelColumns = []
                    (_etype258, _size255) = iprot.readListBegin()
                    for _i259 in range(_size255):
                        _elem260 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.labelColumns.append(_elem260)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.predictionColumns = []
                    (_etype264, _size261) = iprot.readListBegin()
                    for _i265 in range(_size261):
                        _elem266 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.predictionColumns.append(_elem266)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.LIST:
                    self.featureColumns = []
                    (_etype270, _size267) = iprot.readListBegin()
                    for _i271 in range(_size267):
                        _elem272 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.featureColumns.append(_elem272)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.folds = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = CrossValidationFold()
                        _elem278.read(iprot)
                        self.folds.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.problemType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrossValidationEvent')
        if self.df is not None:
            oprot.writeFieldBegin('df', TType.STRUCT, 1)
            self.df.write(oprot)
            oprot.writeFieldEnd()
        if self.spec is not None:
            oprot.writeFieldBegin('spec', TType.STRUCT, 2)
            self.spec.write(oprot)
            oprot.writeFieldEnd()
        if self.seed is not None:
            oprot.writeFieldBegin('seed', TType.I64, 3)
            oprot.writeI64(self.seed)
            oprot.writeFieldEnd()
        if self.evaluator is not None:
            oprot.writeFieldBegin('evaluator', TType.STRING, 4)
            oprot.writeString(self.evaluator.encode('utf-8') if sys.version_info[0] == 2 else self.evaluator)
            oprot.writeFieldEnd()
        if self.labelColumns is not None:
            oprot.writeFieldBegin('labelColumns', TType.LIST, 5)
            oprot.writeListBegin(TType.STRING, len(self.labelColumns))
            for iter279 in self.labelColumns:
                oprot.writeString(iter279.encode('utf-8') if sys.version_info[0] == 2 else iter279)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.predictionColumns is not None:
            oprot.writeFieldBegin('predictionColumns', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.predictionColumns))
            for iter280 in self.predictionColumns:
                oprot.writeString(iter280.encode('utf-8') if sys.version_info[0] == 2 else iter280)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureColumns is not None:
            oprot.writeFieldBegin('featureColumns', TType.LIST, 7)
            oprot.writeListBegin(TType.STRING, len(self.featureColumns))
            for iter281 in self.featureColumns:
                oprot.writeString(iter281.encode('utf-8') if sys.version_info[0] == 2 else iter281)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.folds is not None:
            oprot.writeFieldBegin('folds', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.folds))
            for iter282 in self.folds:
                iter282.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 9)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        if self.problemType is not None:
            oprot.writeFieldBegin('problemType', TType.I32, 10)
            oprot.writeI32(self.problemType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class CrossValidationEventResponse(object):
    """
    Attributes:
     - dfId
     - specId
     - eventId
     - foldResponses
     - crossValidationEventId
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'dfId', None, None, ),  # 1
        (2, TType.I32, 'specId', None, None, ),  # 2
        (3, TType.I32, 'eventId', None, None, ),  # 3
        (4, TType.LIST, 'foldResponses', (TType.STRUCT, (CrossValidationFoldResponse, CrossValidationFoldResponse.thrift_spec), False), None, ),  # 4
        (5, TType.I32, 'crossValidationEventId', None, None, ),  # 5
    )

    def __init__(self, dfId=None, specId=None, eventId=None, foldResponses=None, crossValidationEventId=None,):
        self.dfId = dfId
        self.specId = specId
        self.eventId = eventId
        self.foldResponses = foldResponses
        self.crossValidationEventId = crossValidationEventId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.dfId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.specId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.eventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.foldResponses = []
                    (_etype286, _size283) = iprot.readListBegin()
                    for _i287 in range(_size283):
                        _elem288 = CrossValidationFoldResponse()
                        _elem288.read(iprot)
                        self.foldResponses.append(_elem288)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.crossValidationEventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('CrossValidationEventResponse')
        if self.dfId is not None:
            oprot.writeFieldBegin('dfId', TType.I32, 1)
            oprot.writeI32(self.dfId)
            oprot.writeFieldEnd()
        if self.specId is not None:
            oprot.writeFieldBegin('specId', TType.I32, 2)
            oprot.writeI32(self.specId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.I32, 3)
            oprot.writeI32(self.eventId)
            oprot.writeFieldEnd()
        if self.foldResponses is not None:
            oprot.writeFieldBegin('foldResponses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.foldResponses))
            for iter289 in self.foldResponses:
                iter289.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.crossValidationEventId is not None:
            oprot.writeFieldBegin('crossValidationEventId', TType.I32, 5)
            oprot.writeI32(self.crossValidationEventId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GridSearchCrossValidationEvent(object):
    """
    Attributes:
     - numFolds
     - bestFit
     - crossValidations
     - experimentRunId
     - problemType
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'numFolds', None, None, ),  # 1
        (2, TType.STRUCT, 'bestFit', (FitEvent, FitEvent.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'crossValidations', (TType.STRUCT, (CrossValidationEvent, CrossValidationEvent.thrift_spec), False), None, ),  # 3
        (4, TType.I32, 'experimentRunId', None, None, ),  # 4
        (5, TType.I32, 'problemType', None, 0, ),  # 5
    )

    def __init__(self, numFolds=None, bestFit=None, crossValidations=None, experimentRunId=None, problemType=thrift_spec[5][4],):
        self.numFolds = numFolds
        self.bestFit = bestFit
        self.crossValidations = crossValidations
        self.experimentRunId = experimentRunId
        self.problemType = problemType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.numFolds = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.bestFit = FitEvent()
                    self.bestFit.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.crossValidations = []
                    (_etype293, _size290) = iprot.readListBegin()
                    for _i294 in range(_size290):
                        _elem295 = CrossValidationEvent()
                        _elem295.read(iprot)
                        self.crossValidations.append(_elem295)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.experimentRunId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I32:
                    self.problemType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GridSearchCrossValidationEvent')
        if self.numFolds is not None:
            oprot.writeFieldBegin('numFolds', TType.I32, 1)
            oprot.writeI32(self.numFolds)
            oprot.writeFieldEnd()
        if self.bestFit is not None:
            oprot.writeFieldBegin('bestFit', TType.STRUCT, 2)
            self.bestFit.write(oprot)
            oprot.writeFieldEnd()
        if self.crossValidations is not None:
            oprot.writeFieldBegin('crossValidations', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.crossValidations))
            for iter296 in self.crossValidations:
                iter296.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.experimentRunId is not None:
            oprot.writeFieldBegin('experimentRunId', TType.I32, 4)
            oprot.writeI32(self.experimentRunId)
            oprot.writeFieldEnd()
        if self.problemType is not None:
            oprot.writeFieldBegin('problemType', TType.I32, 5)
            oprot.writeI32(self.problemType)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class GridSearchCrossValidationEventResponse(object):
    """
    Attributes:
     - gscveId
     - eventId
     - fitEventResponse
     - crossValidationEventResponses
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'gscveId', None, None, ),  # 1
        (2, TType.I32, 'eventId', None, None, ),  # 2
        (3, TType.STRUCT, 'fitEventResponse', (FitEventResponse, FitEventResponse.thrift_spec), None, ),  # 3
        (4, TType.LIST, 'crossValidationEventResponses', (TType.STRUCT, (CrossValidationEventResponse, CrossValidationEventResponse.thrift_spec), False), None, ),  # 4
    )

    def __init__(self, gscveId=None, eventId=None, fitEventResponse=None, crossValidationEventResponses=None,):
        self.gscveId = gscveId
        self.eventId = eventId
        self.fitEventResponse = fitEventResponse
        self.crossValidationEventResponses = crossValidationEventResponses

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.gscveId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.eventId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRUCT:
                    self.fitEventResponse = FitEventResponse()
                    self.fitEventResponse.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.crossValidationEventResponses = []
                    (_etype300, _size297) = iprot.readListBegin()
                    for _i301 in range(_size297):
                        _elem302 = CrossValidationEventResponse()
                        _elem302.read(iprot)
                        self.crossValidationEventResponses.append(_elem302)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('GridSearchCrossValidationEventResponse')
        if self.gscveId is not None:
            oprot.writeFieldBegin('gscveId', TType.I32, 1)
            oprot.writeI32(self.gscveId)
            oprot.writeFieldEnd()
        if self.eventId is not None:
            oprot.writeFieldBegin('eventId', TType.I32, 2)
            oprot.writeI32(self.eventId)
            oprot.writeFieldEnd()
        if self.fitEventResponse is not None:
            oprot.writeFieldBegin('fitEventResponse', TType.STRUCT, 3)
            self.fitEventResponse.write(oprot)
            oprot.writeFieldEnd()
        if self.crossValidationEventResponses is not None:
            oprot.writeFieldBegin('crossValidationEventResponses', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.crossValidationEventResponses))
            for iter303 in self.crossValidationEventResponses:
                iter303.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TreeNode(object):
    """
    Attributes:
     - prediction
     - impurity
     - gain
     - splitIndex
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'prediction', None, None, ),  # 1
        (2, TType.DOUBLE, 'impurity', None, None, ),  # 2
        (3, TType.DOUBLE, 'gain', None, None, ),  # 3
        (4, TType.I32, 'splitIndex', None, None, ),  # 4
    )

    def __init__(self, prediction=None, impurity=None, gain=None, splitIndex=None,):
        self.prediction = prediction
        self.impurity = impurity
        self.gain = gain
        self.splitIndex = splitIndex

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.prediction = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.impurity = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.gain = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.splitIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TreeNode')
        if self.prediction is not None:
            oprot.writeFieldBegin('prediction', TType.DOUBLE, 1)
            oprot.writeDouble(self.prediction)
            oprot.writeFieldEnd()
        if self.impurity is not None:
            oprot.writeFieldBegin('impurity', TType.DOUBLE, 2)
            oprot.writeDouble(self.impurity)
            oprot.writeFieldEnd()
        if self.gain is not None:
            oprot.writeFieldBegin('gain', TType.DOUBLE, 3)
            oprot.writeDouble(self.gain)
            oprot.writeFieldEnd()
        if self.splitIndex is not None:
            oprot.writeFieldBegin('splitIndex', TType.I32, 4)
            oprot.writeI32(self.splitIndex)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TreeLink(object):
    """
    Attributes:
     - parentIndex
     - childIndex
     - isLeft
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'parentIndex', None, None, ),  # 1
        (2, TType.I32, 'childIndex', None, None, ),  # 2
        (3, TType.BOOL, 'isLeft', None, None, ),  # 3
    )

    def __init__(self, parentIndex=None, childIndex=None, isLeft=None,):
        self.parentIndex = parentIndex
        self.childIndex = childIndex
        self.isLeft = isLeft

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.parentIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.childIndex = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.isLeft = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TreeLink')
        if self.parentIndex is not None:
            oprot.writeFieldBegin('parentIndex', TType.I32, 1)
            oprot.writeI32(self.parentIndex)
            oprot.writeFieldEnd()
        if self.childIndex is not None:
            oprot.writeFieldBegin('childIndex', TType.I32, 2)
            oprot.writeI32(self.childIndex)
            oprot.writeFieldEnd()
        if self.isLeft is not None:
            oprot.writeFieldBegin('isLeft', TType.BOOL, 3)
            oprot.writeBool(self.isLeft)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TreeComponent(object):
    """
    Attributes:
     - weight
     - nodes
     - links
    """

    thrift_spec = (
        None,  # 0
        (1, TType.DOUBLE, 'weight', None, None, ),  # 1
        (2, TType.LIST, 'nodes', (TType.STRUCT, (TreeNode, TreeNode.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'links', (TType.STRUCT, (TreeLink, TreeLink.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, weight=None, nodes=None, links=None,):
        self.weight = weight
        self.nodes = nodes
        self.links = links

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.DOUBLE:
                    self.weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.nodes = []
                    (_etype307, _size304) = iprot.readListBegin()
                    for _i308 in range(_size304):
                        _elem309 = TreeNode()
                        _elem309.read(iprot)
                        self.nodes.append(_elem309)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.links = []
                    (_etype313, _size310) = iprot.readListBegin()
                    for _i314 in range(_size310):
                        _elem315 = TreeLink()
                        _elem315.read(iprot)
                        self.links.append(_elem315)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TreeComponent')
        if self.weight is not None:
            oprot.writeFieldBegin('weight', TType.DOUBLE, 1)
            oprot.writeDouble(self.weight)
            oprot.writeFieldEnd()
        if self.nodes is not None:
            oprot.writeFieldBegin('nodes', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.nodes))
            for iter316 in self.nodes:
                iter316.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.links is not None:
            oprot.writeFieldBegin('links', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.links))
            for iter317 in self.links:
                iter317.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TreeModel(object):
    """
    Attributes:
     - modelType
     - components
     - featureImportances
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'modelType', 'UTF8', None, ),  # 1
        (2, TType.LIST, 'components', (TType.STRUCT, (TreeComponent, TreeComponent.thrift_spec), False), None, ),  # 2
        (3, TType.LIST, 'featureImportances', (TType.DOUBLE, None, False), None, ),  # 3
    )

    def __init__(self, modelType=None, components=None, featureImportances=None,):
        self.modelType = modelType
        self.components = components
        self.featureImportances = featureImportances

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.modelType = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.components = []
                    (_etype321, _size318) = iprot.readListBegin()
                    for _i322 in range(_size318):
                        _elem323 = TreeComponent()
                        _elem323.read(iprot)
                        self.components.append(_elem323)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.featureImportances = []
                    (_etype327, _size324) = iprot.readListBegin()
                    for _i328 in range(_size324):
                        _elem329 = iprot.readDouble()
                        self.featureImportances.append(_elem329)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('TreeModel')
        if self.modelType is not None:
            oprot.writeFieldBegin('modelType', TType.STRING, 1)
            oprot.writeString(self.modelType.encode('utf-8') if sys.version_info[0] == 2 else self.modelType)
            oprot.writeFieldEnd()
        if self.components is not None:
            oprot.writeFieldBegin('components', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.components))
            for iter330 in self.components:
                iter330.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.featureImportances is not None:
            oprot.writeFieldBegin('featureImportances', TType.LIST, 3)
            oprot.writeListBegin(TType.DOUBLE, len(self.featureImportances))
            for iter331 in self.featureImportances:
                oprot.writeDouble(iter331)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ModelAncestryResponse(object):
    """
    Attributes:
     - modelId
     - fitEvent
     - transformEvents
    """

    thrift_spec = (
        None,  # 0
        (1, TType.I32, 'modelId', None, None, ),  # 1
        (2, TType.STRUCT, 'fitEvent', (FitEvent, FitEvent.thrift_spec), None, ),  # 2
        (3, TType.LIST, 'transformEvents', (TType.STRUCT, (TransformEvent, TransformEvent.thrift_spec), False), None, ),  # 3
    )

    def __init__(self, modelId=None, fitEvent=None, transformEvents=None,):
        self.modelId = modelId
        self.fitEvent = fitEvent
        self.transformEvents = transformEvents

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I32:
                    self.modelId = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.fitEvent = FitEvent()
                    self.fitEvent.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.transformEvents = []
                    (_etype335, _size332) = iprot.readListBegin()
                    for _i336 in range(_size332):
                        _elem337 = TransformEvent()
                        _elem337.read(iprot)
                        self.transformEvents.append(_elem337)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ModelAncestryResponse')
        if self.modelId is not None:
            oprot.writeFieldBegin('modelId', TType.I32, 1)
            oprot.writeI32(self.modelId)
            oprot.writeFieldEnd()
        if self.fitEvent is not None:
            oprot.writeFieldBegin('fitEvent', TType.STRUCT, 2)
            self.fitEvent.write(oprot)
            oprot.writeFieldEnd()
        if self.transformEvents is not None:
            oprot.writeFieldBegin('transformEvents', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.transformEvents))
            for iter338 in self.transformEvents:
                iter338.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ExtractedPipelineResponse(object):
    """
    Attributes:
     - transformers
     - specs
    """

    thrift_spec = (
        None,  # 0
        (1, TType.LIST, 'transformers', (TType.STRUCT, (Transformer, Transformer.thrift_spec), False), None, ),  # 1
        (2, TType.LIST, 'specs', (TType.STRUCT, (TransformerSpec, TransformerSpec.thrift_spec), False), None, ),  # 2
    )

    def __init__(self, transformers=None, specs=None,):
        self.transformers = transformers
        self.specs = specs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.LIST:
                    self.transformers = []
                    (_etype342, _size339) = iprot.readListBegin()
                    for _i343 in range(_size339):
                        _elem344 = Transformer()
                        _elem344.read(iprot)
                        self.transformers.append(_elem344)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.specs = []
                    (_etype348, _size345) = iprot.readListBegin()
                    for _i349 in range(_size345):
                        _elem350 = TransformerSpec()
                        _elem350.read(iprot)
                        self.specs.append(_elem350)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ExtractedPipelineResponse')
        if self.transformers is not None:
            oprot.writeFieldBegin('transformers', TType.LIST, 1)
            oprot.writeListBegin(TType.STRUCT, len(self.transformers))
            for iter351 in self.transformers:
                iter351.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.specs is not None:
            oprot.writeFieldBegin('specs', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.specs))
            for iter352 in self.specs:
                iter352.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResourceNotFoundException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ResourceNotFoundException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidFieldException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InvalidFieldException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class BadRequestException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('BadRequestException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class IllegalOperationException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('IllegalOperationException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ServerLogicException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('ServerLogicException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class InvalidExperimentRunException(TException):
    """
    Attributes:
     - message
    """

    thrift_spec = (
        None,  # 0
        (1, TType.STRING, 'message', 'UTF8', None, ),  # 1
    )

    def __init__(self, message=None,):
        self.message = message

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.message = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('InvalidExperimentRunException')
        if self.message is not None:
            oprot.writeFieldBegin('message', TType.STRING, 1)
            oprot.writeString(self.message.encode('utf-8') if sys.version_info[0] == 2 else self.message)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
