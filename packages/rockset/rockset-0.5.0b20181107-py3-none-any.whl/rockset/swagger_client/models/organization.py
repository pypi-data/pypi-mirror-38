# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Organization(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'input_rate_limit_mbs': 'int',
        'size_limit_gb': 'int',
        'user_count': 'int',
        'collection_count': 'int',
        'integration_count': 'int'
    }

    attribute_map = {
        'name': 'name',
        'input_rate_limit_mbs': 'input_rate_limit_mbs',
        'size_limit_gb': 'size_limit_gb',
        'user_count': 'user_count',
        'collection_count': 'collection_count',
        'integration_count': 'integration_count'
    }

    def __init__(self, name, **kwargs):  # noqa: E501
        """Organization - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._input_rate_limit_mbs = None
        self._size_limit_gb = None
        self._user_count = None
        self._collection_count = None
        self._integration_count = None
        self.discriminator = None

        self.name = name
        self.input_rate_limit_mbs = kwargs.pop('input_rate_limit_mbs', None)
        self.size_limit_gb = kwargs.pop('size_limit_gb', None)
        self.user_count = kwargs.pop('user_count', None)
        self.collection_count = kwargs.pop('collection_count', None)
        self.integration_count = kwargs.pop('integration_count', None)

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501

        name of the organization  # noqa: E501

        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        name of the organization  # noqa: E501

        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def input_rate_limit_mbs(self):
        """Gets the input_rate_limit_mbs of this Organization.  # noqa: E501

        input rate limit  # noqa: E501

        :return: The input_rate_limit_mbs of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._input_rate_limit_mbs

    @input_rate_limit_mbs.setter
    def input_rate_limit_mbs(self, input_rate_limit_mbs):
        """Sets the input_rate_limit_mbs of this Organization.

        input rate limit  # noqa: E501

        :param input_rate_limit_mbs: The input_rate_limit_mbs of this Organization.  # noqa: E501
        :type: int
        """

        self._input_rate_limit_mbs = input_rate_limit_mbs

    @property
    def size_limit_gb(self):
        """Gets the size_limit_gb of this Organization.  # noqa: E501

        storage size limit  # noqa: E501

        :return: The size_limit_gb of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._size_limit_gb

    @size_limit_gb.setter
    def size_limit_gb(self, size_limit_gb):
        """Sets the size_limit_gb of this Organization.

        storage size limit  # noqa: E501

        :param size_limit_gb: The size_limit_gb of this Organization.  # noqa: E501
        :type: int
        """

        self._size_limit_gb = size_limit_gb

    @property
    def user_count(self):
        """Gets the user_count of this Organization.  # noqa: E501

        number of users  # noqa: E501

        :return: The user_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count):
        """Sets the user_count of this Organization.

        number of users  # noqa: E501

        :param user_count: The user_count of this Organization.  # noqa: E501
        :type: int
        """

        self._user_count = user_count

    @property
    def collection_count(self):
        """Gets the collection_count of this Organization.  # noqa: E501

        number of collections  # noqa: E501

        :return: The collection_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._collection_count

    @collection_count.setter
    def collection_count(self, collection_count):
        """Sets the collection_count of this Organization.

        number of collections  # noqa: E501

        :param collection_count: The collection_count of this Organization.  # noqa: E501
        :type: int
        """

        self._collection_count = collection_count

    @property
    def integration_count(self):
        """Gets the integration_count of this Organization.  # noqa: E501

        number of integrations  # noqa: E501

        :return: The integration_count of this Organization.  # noqa: E501
        :rtype: int
        """
        return self._integration_count

    @integration_count.setter
    def integration_count(self, integration_count):
        """Sets the integration_count of this Organization.

        number of integrations  # noqa: E501

        :param integration_count: The integration_count of this Organization.  # noqa: E501
        :type: int
        """

        self._integration_count = integration_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Organization, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    def __getitem__(self, item):
        return getattr(self, item)

    def get(self, item):
        return getattr(self, item)

    def items(self):
        return self.to_dict().items()

    def __setitem__(self, item, value):
        return seattr(self, item, value)
