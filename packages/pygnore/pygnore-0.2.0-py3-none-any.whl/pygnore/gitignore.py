import os
import errno

from re import compile
from pygnore.api import get_gitignore, get_templates
from pygnore.exceptions import UnsupportedTemplateError


class Gitignore:
    def __init__(self, stack=None, file=".gitignore"):
        self.filename = file
        self.stack = stack

    @property
    def stack(self):
        return self._stack

    @stack.setter
    def stack(self, value):
        self._raw_stack = [i.lower() for i in value] if value else []
        self._stack = sorted(self._raw_stack)

    @property
    def filename(self):
        return self._filename

    @filename.setter
    def filename(self, value):
        if os.path.isdir(value):
            value = os.path.join(value, ".gitignore")
        else:
            path = os.path.split(value)
            if path[0] and not os.path.isdir(path[0]):
                raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), value)

        self._exist = True if os.path.isfile(value) else False
        self._filename = value

    @property
    def exist(self):
        return self._exist

    def reset_stack(self):
        self._stack = sorted(self._raw_stack)
        return self

    def template_list(self):
        template_stack = get_templates()
        return template_stack

    def template_search(self):
        template = " ".join(self._raw_stack)
        template_stack = self.template_list()
        result = [i for i in template_stack if template in i]
        return result

    def read(self, current=False):
        if current:
            stack = []
        else:
            if not self._raw_stack:
                raise ValueError(list)

            stack = sorted(self._raw_stack)

        if self.exist:
            try:
                with open(self.filename, "r+") as f:
                    stack_list = list(self.template_list())
                    if not current:
                        for supported in stack:
                            if supported not in stack_list:
                                raise UnsupportedTemplateError(supported)
                    stack_list.append("custom")
                    templates = compile(r"###\s(.*)\s###")
                    occurrences = [
                        i.lower()
                        for i in templates.findall(f.read())
                        if i.lower() in stack_list
                    ]
                    for i in occurrences:
                        if current:
                            if i not in stack:
                                stack.append(i)
                        else:
                            if i in stack:
                                stack.remove(i)

                self._stack = sorted(stack)
                return self
            except PermissionError:
                raise

        raise FileNotFoundError(errno.ENOENT, os.strerror(errno.ENOENT), self.filename)

    def generate(self, write=False, mode="w", backup=False):
        stack = self.stack if self.stack else sorted(self._raw_stack)
        if not stack:
            raise ValueError

        try:
            template = "{0}\n{1}".format(
                get_gitignore(stack),
                "# Generated by pygnore - https://github.com/flipee/pygnore",
            )
            template = "\n{}".format(template) if mode == "a" else template
        except UnsupportedTemplateError:
            raise

        if backup:
            os.rename(self.filename, "{}.old".format(self.filename))

        if write:
            template = "{}\n".format(template)
            with open(self.filename, mode) as f:
                f.write(template)

        return template
