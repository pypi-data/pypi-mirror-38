{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/monaco-editor/src/index.tsx"],"names":["MonacoEditor","React","this","componentWillReceiveProps","debounce","monaco","props","onChange","getValue","editor","create","monacoContainerRef","current","value","language","mode","theme","minimap","enabled","autoIndent","editorFocused","focus","onDidChangeModelContent","bind","setValue","model","getModel","getModeId","setModelLanguage","setTheme","nextProps","dispose","react__WEBPACK_IMPORTED_MODULE_7__","className","ref"],"mappings":"mPAYMA,0PAEiBC,mFASnBC,KAAKC,0BAA4BC,mBAC/BF,KAAKC,0BACL,qDAKED,KAAKG,QAAUH,KAAKI,MAAMC,UAC5BL,KAAKI,MAAMC,SAASL,KAAKG,OAAOG,wDAKlCN,KAAKG,OAASI,SAAOC,OAAOR,KAAKS,mBAAmBC,SAClDC,MAAOX,KAAKI,MAAMO,MAClBC,SAAUZ,KAAKI,MAAMS,KACrBC,MAAOd,KAAKI,MAAMU,MAClBC,SACEC,SAAS,GAEXC,YAAY,IAGVjB,KAAKI,MAAMc,eACblB,KAAKG,OAAOgB,QAGdnB,KAAKG,OAAOiB,wBACVpB,KAAKoB,wBAAwBC,KAAKrB,oDAKpC,GAAKA,KAAKG,OAAV,CAIIH,KAAKG,OAAOG,aAAeN,KAAKI,MAAMO,OAExCX,KAAKG,OAAOmB,SAAStB,KAAKI,MAAMO,OAGlC,IAAMY,EAAQvB,KAAKG,OAAOqB,WACtBD,GAASvB,KAAKI,MAAMS,MAAQU,EAAME,cAAgBzB,KAAKI,MAAMS,MAC/DN,SAAOmB,iBAAiBH,EAAOvB,KAAKI,MAAMS,MAGxCb,KAAKI,MAAMU,OACbP,SAAOoB,SAAS3B,KAAKI,MAAMU,0DAILc,GACpB5B,KAAKG,QAAUH,KAAKG,OAAOG,aAAesB,EAAUjB,OAEtDX,KAAKG,OAAOmB,SAASM,EAAUjB,sDAK7BX,KAAKG,QACPH,KAAKG,OAAO0B,2CAKd,OACEC,EAAA,qBAAKC,UAAU,0BAA0BC,IAAKhC,KAAKS,4BA9E9BV,iBAArBD,kBAKFO,SAAU,aACVa,eAAe,EACfL,KAAM,eA4EKf","file":"monaco-editor-5439bca95112d8462bda.bundle.js","sourcesContent":["import * as React from \"react\";\nimport { debounce } from \"lodash\";\nimport { editor } from \"monaco-editor\";\n\nexport interface MonacoEditorProps {\n  theme: string;\n  mode?: string;\n  onChange: (value: string) => void;\n  value: string;\n  editorFocused: boolean;\n}\n\nclass MonacoEditor extends React.Component<MonacoEditorProps> {\n  monaco?: editor.IStandaloneCodeEditor;\n  monacoContainerRef = React.createRef<HTMLDivElement>();\n\n  static defaultProps = {\n    onChange: () => {},\n    editorFocused: false,\n    mode: \"text/plain\"\n  };\n\n  componentWillMount() {\n    this.componentWillReceiveProps = debounce(\n      this.componentWillReceiveProps,\n      0\n    );\n  }\n\n  onDidChangeModelContent() {\n    if (this.monaco && this.props.onChange) {\n      this.props.onChange(this.monaco.getValue());\n    }\n  }\n\n  componentDidMount() {\n    this.monaco = editor.create(this.monacoContainerRef.current!, {\n      value: this.props.value,\n      language: this.props.mode,\n      theme: this.props.theme,\n      minimap: {\n        enabled: false\n      },\n      autoIndent: true\n    });\n\n    if (this.props.editorFocused) {\n      this.monaco.focus();\n    }\n\n    this.monaco.onDidChangeModelContent(\n      this.onDidChangeModelContent.bind(this)\n    );\n  }\n\n  componentDidUpdate() {\n    if (!this.monaco) {\n      return;\n    }\n\n    if (this.monaco.getValue() !== this.props.value) {\n      // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n      this.monaco.setValue(this.props.value);\n    }\n\n    const model = this.monaco.getModel();\n    if (model && this.props.mode && model.getModeId() !== this.props.mode) {\n      editor.setModelLanguage(model, this.props.mode);\n    }\n\n    if (this.props.theme) {\n      editor.setTheme(this.props.theme);\n    }\n  }\n\n  componentWillReceiveProps(nextProps: MonacoEditorProps) {\n    if (this.monaco && this.monaco.getValue() !== nextProps.value) {\n      // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n      this.monaco.setValue(nextProps.value);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.monaco) {\n      this.monaco.dispose();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"monaco cm-s-composition\" ref={this.monacoContainerRef} />\n    );\n  }\n}\n\nexport default MonacoEditor;\n"],"sourceRoot":""}