{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/monaco-editor/src/index.js"],"names":["MonacoEditor","props","_babel_runtime_corejs2_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default","this","_babel_runtime_corejs2_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default","_babel_runtime_corejs2_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default","call","componentWillReceiveProps","debounce","monaco","onChange","getValue","create","monacoContainer","value","language","mode","theme","minimap","enabled","autoIndent","editorFocused","focus","onDidChangeModelContent","bind","setValue","updateOptions","nextProps","dispose","_this","react__WEBPACK_IMPORTED_MODULE_6__","className","ref","container","React"],"mappings":"kOAeMA,cAUJ,SAAAA,EAAYC,GAAgC,OAAAC,IAAAC,KAAAH,GAAAI,IAAAD,KAAAE,IAAAL,GAAAM,KAAAH,KACpCF,sEAILE,KAAWI,0BAA4BC,mBACtCL,KAAKI,0BACL,qDAKEJ,KAAKM,QAAUN,KAAKF,MAAMS,UAC5BP,KAAKF,MAAMS,SAASP,KAAKM,OAAOE,wDAKlCR,KAAKM,OAASA,SAAcG,OAAOT,KAAKU,iBACtCC,MAAOX,KAAKF,MAAMa,MAClBC,SAAUZ,KAAKF,MAAMe,KACrBC,MAAOd,KAAKF,MAAMgB,MAClBC,SACEC,SAAS,GAEXC,YAAY,IAGVjB,KAAKF,MAAMoB,eACblB,KAAKM,OAAOa,QAGdnB,KAAKM,OAAOc,wBACVpB,KAAKoB,wBAAwBC,KAAKrB,oDAK/BA,KAAKM,SAINN,KAAKM,OAAOE,aAAeR,KAAKF,MAAMa,OAGxCX,KAAKM,OAAOgB,SAAStB,KAAKF,MAAMa,OAIlCX,KAAKM,OAAOiB,eACVX,SAAUZ,KAAKF,MAAMe,KACrBC,MAAOd,KAAKF,MAAMgB,2DAIIU,GACpBxB,KAAKM,QAAUN,KAAKM,OAAOE,aAAegB,EAAUb,OAEtDX,KAAKM,OAAOgB,SAASE,EAAUb,sDAK7BX,KAAKM,QACPN,KAAKM,OAAOmB,2CAIa,IAAAC,EAAA1B,KAC3B,OACE2B,EAAA,qBACEC,UAAU,0BACVC,IAAK,SAAAC,GACHJ,EAAKhB,gBAAkBoB,YAnFNC,iBAArBlC,kBAKFU,SAAU,aACVW,eAAe,EACfL,KAAM,eAmFKhB","file":"monaco-editor-081f4770afc190b36459.bundle.js","sourcesContent":["// @flow\n/* eslint-disable class-methods-use-this */\nimport * as React from \"react\";\nimport { debounce } from \"lodash\";\n// $FlowFixMe\nimport * as monaco from \"monaco-editor\";\n\nexport type MonacoEditorProps = {\n  theme: string,\n  mode: ?string,\n  onChange: (value: string) => void,\n  value: string,\n  editorFocused: boolean\n};\n\nclass MonacoEditor extends React.Component<MonacoEditorProps> {\n  monaco: ?monaco.IStandaloneCodeEditor;\n  monacoContainer: ?HTMLElement;\n\n  static defaultProps = {\n    onChange: () => {},\n    editorFocused: false,\n    mode: \"text/plain\"\n  };\n\n  constructor(props: MonacoEditorProps): void {\n    super(props);\n  }\n\n  componentWillMount() {\n    (this: any).componentWillReceiveProps = debounce(\n      this.componentWillReceiveProps,\n      0\n    );\n  }\n\n  onDidChangeModelContent(): void {\n    if (this.monaco && this.props.onChange) {\n      this.props.onChange(this.monaco.getValue());\n    }\n  }\n\n  componentDidMount(): void {\n    this.monaco = monaco.editor.create(this.monacoContainer, {\n      value: this.props.value,\n      language: this.props.mode,\n      theme: this.props.theme,\n      minimap: {\n        enabled: false\n      },\n      autoIndent: true\n    });\n\n    if (this.props.editorFocused) {\n      this.monaco.focus();\n    }\n\n    this.monaco.onDidChangeModelContent(\n      this.onDidChangeModelContent.bind(this)\n    );\n  }\n\n  componentDidUpdate(): void {\n    if (!this.monaco) {\n      return;\n    }\n\n    if (this.monaco.getValue() !== this.props.value) {\n      // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n      // $FlowFixMe: We should be detecting monaco above\n      this.monaco.setValue(this.props.value);\n    }\n\n    // $FlowFixMe: We should be detecting monaco above\n    this.monaco.updateOptions({\n      language: this.props.mode,\n      theme: this.props.theme\n    });\n  }\n\n  componentWillReceiveProps(nextProps: MonacoEditorProps) {\n    if (this.monaco && this.monaco.getValue() !== nextProps.value) {\n      // FIXME: calling setValue resets cursor position in monaco. It shouldn't!\n      this.monaco.setValue(nextProps.value);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.monaco) {\n      this.monaco.dispose();\n    }\n  }\n\n  render(): React$Element<any> {\n    return (\n      <div\n        className=\"monaco cm-s-composition\"\n        ref={container => {\n          this.monacoContainer = container;\n        }}\n      />\n    );\n  }\n}\n\nexport default MonacoEditor;\n"],"sourceRoot":""}