{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/transform-plotly/src/index.js"],"names":["PlotlyNullTransform","MIMETYPE","PlotlyTransform","_React$Component","_getPrototypeOf2","_this","_babel_runtime_corejs2_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default","this","_len","arguments","length","args","Array","_key","_babel_runtime_corejs2_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default","_babel_runtime_corejs2_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default","call","apply","concat","_babel_runtime_corejs2_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default","_babel_runtime_corejs2_helpers_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6___default","plotDiv","figure","props","data","JSON","parse","_babel_runtime_corejs2_core_js_object_is_frozen__WEBPACK_IMPORTED_MODULE_0___default","Object","lodash__WEBPACK_IMPORTED_MODULE_9__","_figure$data","_figure$layout","layout","_babel_runtime_corejs2_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default","_babel_runtime_corejs2_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default","key","value","getFigure","Plotly","__webpack_require__","newPlot","nextProps","redraw","style","height","autosize","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","ref","plotDivRef","Component","__webpack_exports__"],"mappings":"oWAyBMA,EAAsB,kBAAM,MAClCA,EAAoBC,SATE,0BAWf,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,IAAAC,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,EAAAS,IAAAP,MAAAH,EAAAW,IAAAb,IAAAc,KAAAC,MAAAb,GAAAG,MAAAW,OAAAP,KAAAQ,IAAAC,QAAAf,IAAA,aAyBe,SAACgB,GACZhB,EAAKgB,QAAUA,IA1BnBF,IAAAC,QAAAf,IAAA,YA6Bc,WACV,IAAMiB,EAASjB,EAAKkB,MAAMC,KAC1B,GAAsB,iBAAXF,EACT,OAAOG,KAAKC,MAAMJ,GAKpB,GAAIK,IAAgBL,GAClB,OAAOM,OAAAC,EAAA,UAAAD,CAAUN,GATK,IAAAQ,EAYWR,EAA3BE,YAZgB,IAAAM,OAAAC,EAYWT,EAAhBU,OAEnB,OAASR,OAAMQ,YAdS,IAAAD,UA7B5B1B,EAAA,OAAA4B,IAAA/B,EAAAC,GAAA+B,IAAAhC,IAAAiC,IAAA,oBAAAC,MAAA,WAQI,IAAMd,EAASf,KAAK8B,YACpB9B,KAAK+B,OAASC,EAAQ,MACtBhC,KAAK+B,OAAOE,QAAQjC,KAAKc,QAASC,EAAOE,KAAMF,EAAOU,WAV1DG,IAAA,wBAAAC,MAAA,SAawBK,GACpB,OAAOlC,KAAKgB,MAAMC,OAASiB,EAAUjB,QAdzCW,IAAA,qBAAAC,MAAA,WAkBI,IAAMd,EAASf,KAAK8B,YACf9B,KAAKc,UACVd,KAAKc,QAAQG,KAAOF,EAAOE,KAC3BjB,KAAKc,QAAQW,OAASV,EAAOU,OAC7BzB,KAAK+B,OAAOI,OAAOnC,KAAKc,aAtB5Bc,IAAA,SAAAC,MAAA,WA8CgC,IACpBJ,EAAWzB,KAAK8B,YAAhBL,OACFW,KAKN,OAJIX,GAAUA,EAAOY,SAAWZ,EAAOa,WACrCF,EAAMC,OAASZ,EAAOY,QAGjBE,EAAAC,EAAAC,cAAA,OAAKC,IAAK1C,KAAK2C,WAAYP,MAAOA,QArD7CzC,EAAA,CAAqC4C,EAAAC,EAAMI,eAA9BjD,aAVI,kCAoEFkD,EAAA","file":"plotly-49666d455d35bbab7dce.bundle.js","sourcesContent":["/* @flow */\n/* eslint class-methods-use-this: 0 */\nimport React from \"react\";\n\nimport { cloneDeep } from \"lodash\";\n\ntype Props = {\n  data: string | Object\n};\n\ndeclare class PlotlyHTMLElement extends HTMLElement {\n  data: Object;\n  layout: Object;\n  newPlot: () => void;\n  redraw: () => void;\n}\n\nconst NULL_MIMETYPE = \"text/vnd.plotly.v1+html\";\nconst MIMETYPE = \"application/vnd.plotly.v1+json\";\n\n/*\n * As part of the init notebook mode, Plotly sneaks a <script> tag in to load\n * the plotlyjs lib. We have already loaded this though, so we \"handle\" the\n * transform by doing nothing and returning null.\n */\nconst PlotlyNullTransform = () => null;\nPlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;\n\nexport class PlotlyTransform extends React.Component<Props> {\n  plotDiv: ?PlotlyHTMLElement;\n  Plotly: Object;\n\n  static MIMETYPE = MIMETYPE;\n\n  componentDidMount(): void {\n    // Handle case of either string to be `JSON.parse`d or pure object\n    const figure = this.getFigure();\n    this.Plotly = require(\"@nteract/plotly\");\n    this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);\n  }\n\n  shouldComponentUpdate(nextProps: Props): boolean {\n    return this.props.data !== nextProps.data;\n  }\n\n  componentDidUpdate() {\n    const figure = this.getFigure();\n    if (!this.plotDiv) return;\n    this.plotDiv.data = figure.data;\n    this.plotDiv.layout = figure.layout;\n    this.Plotly.redraw(this.plotDiv);\n  }\n\n  plotDivRef = (plotDiv: PlotlyHTMLElement | null): void => {\n    this.plotDiv = plotDiv;\n  };\n\n  getFigure = (): Object => {\n    const figure = this.props.data;\n    if (typeof figure === \"string\") {\n      return JSON.parse(figure);\n    }\n\n    // The Plotly API *mutates* the figure to include a UID, which means\n    // they won't take our frozen objects\n    if (Object.isFrozen(figure)) {\n      return cloneDeep(figure);\n    }\n\n    const { data = {}, layout = {} } = figure;\n\n    return { data, layout };\n  };\n\n  render(): ?React$Element<any> {\n    const { layout } = this.getFigure();\n    const style = {};\n    if (layout && layout.height && !layout.autosize) {\n      style.height = layout.height;\n    }\n    // $FlowFixMe: a normal div doesn't have the properties that plotly puts on it\n    return <div ref={this.plotDivRef} style={style} />;\n  }\n}\n\nexport { PlotlyNullTransform };\nexport default PlotlyTransform;\n"],"sourceRoot":""}