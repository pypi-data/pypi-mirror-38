{"version":3,"sources":["webpack:////Users/kylek/code/src/github.com/nteract/nteract-ext/packages/transform-plotly/src/index.js"],"names":["__webpack_require__","_lodash","PlotlyNullTransform","MIMETYPE","PlotlyTransform","plotDivRef","plotDiv","_this","getFigure","figure","props","data","JSON","parse","Object","isFrozen","cloneDeep","_figure$data","undefined","_figure$layout","layout","React","Component","this","Plotly","newPlot","nextProps","redraw","style","height","autosize","_react2","default","createElement","ref"],"mappings":"ueAEAA,EAAA,IAEAC,EAAAD,EAAA,uKAaA,IAQME,EAAsB,kBAAM,MAClCA,EAAoBC,SATE,8BAWTC,+TAyBXC,WAAa,SAACC,GACZC,EAAKD,QAAUA,KAGjBE,UAAY,WACV,IAAMC,EAASF,EAAKG,MAAMC,KAC1B,GAAsB,iBAAXF,EACT,OAAOG,KAAKC,MAAMJ,GAKpB,GAAIK,OAAOC,SAASN,GAClB,OAAO,EAAAR,EAAAe,WAAUP,GATK,IAAAQ,EAYWR,EAA3BE,YAZgBO,IAAAD,OAAAE,EAYWV,EAAhBW,OAEnB,OAAST,OAAMS,YAdSF,IAAAC,mVA7BSE,UAAMC,0DAQvC,IAAMb,EAASc,KAAKf,YACpBe,KAAKC,OAASxB,EAAQ,MACtBuB,KAAKC,OAAOC,QAAQF,KAAKjB,QAASG,EAAOE,KAAMF,EAAOW,sDAGlCM,GACpB,OAAOH,KAAKb,MAAMC,OAASe,EAAUf,kDAIrC,IAAMF,EAASc,KAAKf,YACfe,KAAKjB,UACViB,KAAKjB,QAAQK,KAAOF,EAAOE,KAC3BY,KAAKjB,QAAQc,OAASX,EAAOW,OAC7BG,KAAKC,OAAOG,OAAOJ,KAAKjB,2CAwBI,IACpBc,EAAWG,KAAKf,YAAhBY,OACFQ,KAKN,OAJIR,GAAUA,EAAOS,SAAWT,EAAOU,WACrCF,EAAMC,OAAST,EAAOS,QAGjBE,EAAAC,QAAAC,cAAA,OAAKC,IAAKX,KAAKlB,WAAYuB,MAAOA,aArDhCxB,EAIJD,SAdQ,mCAmERD,gCACME","file":"plotly-bd1ea62bc32d15d14d08.bundle.js","sourcesContent":["/* @flow */\n/* eslint class-methods-use-this: 0 */\nimport React from \"react\";\n\nimport { cloneDeep } from \"lodash\";\n\ntype Props = {\n  data: string | Object\n};\n\ndeclare class PlotlyHTMLElement extends HTMLElement {\n  data: Object;\n  layout: Object;\n  newPlot: () => void;\n  redraw: () => void;\n}\n\nconst NULL_MIMETYPE = \"text/vnd.plotly.v1+html\";\nconst MIMETYPE = \"application/vnd.plotly.v1+json\";\n\n/*\n * As part of the init notebook mode, Plotly sneaks a <script> tag in to load\n * the plotlyjs lib. We have already loaded this though, so we \"handle\" the\n * transform by doing nothing and returning null.\n */\nconst PlotlyNullTransform = () => null;\nPlotlyNullTransform.MIMETYPE = NULL_MIMETYPE;\n\nexport class PlotlyTransform extends React.Component<Props> {\n  plotDiv: ?PlotlyHTMLElement;\n  Plotly: Object;\n\n  static MIMETYPE = MIMETYPE;\n\n  componentDidMount(): void {\n    // Handle case of either string to be `JSON.parse`d or pure object\n    const figure = this.getFigure();\n    this.Plotly = require(\"@nteract/plotly\");\n    this.Plotly.newPlot(this.plotDiv, figure.data, figure.layout);\n  }\n\n  shouldComponentUpdate(nextProps: Props): boolean {\n    return this.props.data !== nextProps.data;\n  }\n\n  componentDidUpdate() {\n    const figure = this.getFigure();\n    if (!this.plotDiv) return;\n    this.plotDiv.data = figure.data;\n    this.plotDiv.layout = figure.layout;\n    this.Plotly.redraw(this.plotDiv);\n  }\n\n  plotDivRef = (plotDiv: PlotlyHTMLElement | null): void => {\n    this.plotDiv = plotDiv;\n  };\n\n  getFigure = (): Object => {\n    const figure = this.props.data;\n    if (typeof figure === \"string\") {\n      return JSON.parse(figure);\n    }\n\n    // The Plotly API *mutates* the figure to include a UID, which means\n    // they won't take our frozen objects\n    if (Object.isFrozen(figure)) {\n      return cloneDeep(figure);\n    }\n\n    const { data = {}, layout = {} } = figure;\n\n    return { data, layout };\n  };\n\n  render(): ?React$Element<any> {\n    const { layout } = this.getFigure();\n    const style = {};\n    if (layout && layout.height && !layout.autosize) {\n      style.height = layout.height;\n    }\n    // $FlowFixMe: a normal div doesn't have the properties that plotly puts on it\n    return <div ref={this.plotDivRef} style={style} />;\n  }\n}\n\nexport { PlotlyNullTransform };\nexport default PlotlyTransform;\n"],"sourceRoot":""}