# -*- coding: utf-8 -*-

"""
    songkiss

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import songkiss.models.results_1

class ResultsPage1(object):

    """Implementation of the 'ResultsPage1' model.

    TODO: type model description here.

    Attributes:
        status (string): TODO: type description here.
        results (Results1): TODO: type description here.
        per_page (int): TODO: type description here.
        page (int): TODO: type description here.
        total_entries (int): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "status":'status',
        "results":'results',
        "per_page":'perPage',
        "page":'page',
        "total_entries":'totalEntries'
    }

    def __init__(self,
                 status=None,
                 results=None,
                 per_page=None,
                 page=None,
                 total_entries=None):
        """Constructor for the ResultsPage1 class"""

        # Initialize members of the class
        self.status = status
        self.results = results
        self.per_page = per_page
        self.page = page
        self.total_entries = total_entries


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        status = dictionary.get('status')
        results = songkiss.models.results_1.Results1.from_dictionary(dictionary.get('results')) if dictionary.get('results') else None
        per_page = dictionary.get('perPage')
        page = dictionary.get('page')
        total_entries = dictionary.get('totalEntries')

        # Return an object of this model
        return cls(status,
                   results,
                   per_page,
                   page,
                   total_entries)


