# -*- coding: utf-8 -*-

"""
    songkiss

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import songkiss.models.start
import songkiss.models.performance
import songkiss.models.venue
import songkiss.models.location

class Event(object):

    """Implementation of the 'Event' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        display_name (string): TODO: type description here.
        mtype (string): TODO: type description here.
        uri (string): TODO: type description here.
        status (string): TODO: type description here.
        popularity (float): TODO: type description here.
        start (Start): TODO: type description here.
        performance (list of Performance): TODO: type description here.
        age_restriction (string): TODO: type description here.
        flagged_as_ended (bool): TODO: type description here.
        venue (Venue): TODO: type description here.
        location (Location): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "display_name":'displayName',
        "mtype":'type',
        "uri":'uri',
        "status":'status',
        "popularity":'popularity',
        "start":'start',
        "performance":'performance',
        "age_restriction":'ageRestriction',
        "flagged_as_ended":'flaggedAsEnded',
        "venue":'venue',
        "location":'location'
    }

    def __init__(self,
                 id=None,
                 display_name=None,
                 mtype=None,
                 uri=None,
                 status=None,
                 popularity=None,
                 start=None,
                 performance=None,
                 age_restriction=None,
                 flagged_as_ended=None,
                 venue=None,
                 location=None):
        """Constructor for the Event class"""

        # Initialize members of the class
        self.id = id
        self.display_name = display_name
        self.mtype = mtype
        self.uri = uri
        self.status = status
        self.popularity = popularity
        self.start = start
        self.performance = performance
        self.age_restriction = age_restriction
        self.flagged_as_ended = flagged_as_ended
        self.venue = venue
        self.location = location


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        display_name = dictionary.get('displayName')
        mtype = dictionary.get('type')
        uri = dictionary.get('uri')
        status = dictionary.get('status')
        popularity = dictionary.get('popularity')
        start = songkiss.models.start.Start.from_dictionary(dictionary.get('start')) if dictionary.get('start') else None
        performance = None
        if dictionary.get('performance') != None:
            performance = list()
            for structure in dictionary.get('performance'):
                performance.append(songkiss.models.performance.Performance.from_dictionary(structure))
        age_restriction = dictionary.get('ageRestriction')
        flagged_as_ended = dictionary.get('flaggedAsEnded')
        venue = songkiss.models.venue.Venue.from_dictionary(dictionary.get('venue')) if dictionary.get('venue') else None
        location = songkiss.models.location.Location.from_dictionary(dictionary.get('location')) if dictionary.get('location') else None

        # Return an object of this model
        return cls(id,
                   display_name,
                   mtype,
                   uri,
                   status,
                   popularity,
                   start,
                   performance,
                   age_restriction,
                   flagged_as_ended,
                   venue,
                   location)


