# -*- coding: utf-8 -*-

"""
    songkiss

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import songkiss.models.identifier

class Artist(object):

    """Implementation of the 'Artist' model.

    TODO: type model description here.

    Attributes:
        id (int): TODO: type description here.
        display_name (string): TODO: type description here.
        uri (string): TODO: type description here.
        identifier (list of Identifier): TODO: type description here.
        on_tour_until (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "id":'id',
        "display_name":'displayName',
        "uri":'uri',
        "identifier":'identifier',
        "on_tour_until":'onTourUntil'
    }

    def __init__(self,
                 id=None,
                 display_name=None,
                 uri=None,
                 identifier=None,
                 on_tour_until=None):
        """Constructor for the Artist class"""

        # Initialize members of the class
        self.id = id
        self.display_name = display_name
        self.uri = uri
        self.identifier = identifier
        self.on_tour_until = on_tour_until


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        id = dictionary.get('id')
        display_name = dictionary.get('displayName')
        uri = dictionary.get('uri')
        identifier = None
        if dictionary.get('identifier') != None:
            identifier = list()
            for structure in dictionary.get('identifier'):
                identifier.append(songkiss.models.identifier.Identifier.from_dictionary(structure))
        on_tour_until = dictionary.get('onTourUntil')

        # Return an object of this model
        return cls(id,
                   display_name,
                   uri,
                   identifier,
                   on_tour_until)


