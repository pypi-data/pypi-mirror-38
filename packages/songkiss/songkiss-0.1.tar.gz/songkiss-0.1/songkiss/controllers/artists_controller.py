# -*- coding: utf-8 -*-

"""
    songkiss

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.custom_query_auth import CustomQueryAuth
from ..models.get_similar_artists_response import GETSimilarArtistsResponse
from ..models.get_artist_calendar_response import GETArtistCalendarResponse

class ArtistsController(BaseController):

    """A Controller to access Endpoints in the songkiss API."""


    def get_similar_artists(self,
                            artist_id,
                            page=None,
                            per_page=None):
        """Does a GET request to /artists/{artist_id}/similar_artists.json.

        Get artists similar to the one requested.

        Args:
            artist_id (string): TODO: type description here. Example: 
            page (int, optional): This is how it works.
            per_page (int, optional): TODO: type description here. Example: 

        Returns:
            GETSimilarArtistsResponse: Response from the API. List of found
                similar artists

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/artists/{artist_id}/similar_artists.json'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'artist_id': artist_id
        })
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GETSimilarArtistsResponse.from_dictionary)

    def get_artist_calendar(self,
                            artist_id,
                            page=None,
                            per_page=None):
        """Does a GET request to /artists/{artist_id}/calendar.json.

        Get an artist's event calendar

        Args:
            artist_id (float): TODO: type description here. Example: 
            page (int, optional): This is how it works.
            per_page (int, optional): TODO: type description here. Example: 

        Returns:
            GETArtistCalendarResponse: Response from the API. List of artist's
                events

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/artists/{artist_id}/calendar.json'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'artist_id': artist_id
        })
        _query_parameters = {
            'page': page,
            'per_page': per_page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        CustomQueryAuth.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GETArtistCalendarResponse.from_dictionary)
