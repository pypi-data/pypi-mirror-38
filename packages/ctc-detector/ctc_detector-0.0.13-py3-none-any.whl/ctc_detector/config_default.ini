; DEFAULT
[DEFAULT]
; model input size
width = 256

; configure hyperparameters
[ctc_detector]
model = res_unet
learn_rate = 0.0001
gcd_depth = 16
; probability threshold (high, medium, low): (>=180~=0.70, >=120~=0.47, >=60~=0.23)
threshold = 0.2
; attention gate on UpConv layer
attention_gate = True

; configure train.py behavior
[train]
n_epoch = 4000
n_ckpt_epoch = 20
n_cv_epoch = 3
n_batch = 40
n_worker = 4
print_freq = 20
; a name for log description
log_name = myrun

; configure valid.py behavior
[valid]
; set pred_orig_size to True, will not resize input but only add padding to fit model depth
pred_orig_size = True
; print verbose table
print_table = False
; test time augmentation
test_time_augment = True
; ensemble policy
ensemble = avg
inference_batchsize = 50

; data augmentation config
[pre]
; per RGB channels
mean = [0.5, 0.5, 0.5]
std  = [0.5, 0.5, 0.5]
label_to_binary = True
color_jitter = True
elastic_distortion = False
color_equalize = False
min_scale = 0.5
max_scale = 1.5
add_noise = False

; post-process config
[post]
remove_objects = True
min_object_size = 5
policy = rw
n_worker = 5
generate_nuclei_rle = False

[dataset]
cv_ratio = 0.1
; change seed if different shuffle cv required
cv_seed = 666
distribution_policy = Once

; configure model variance
[res_unet]

[unet]
; end of model

[channels]
; for UI rendering, order matter
UI = [
        ["Mixed_EpCam", "Mixed_CK"],
        ["EpCAM", "CK", "CD45", "DAPI"]
    ]
; configure enhance contract mode
enhance_DAPI_only = false
hide_nuclei = true
; which channel to fill gray-scale image
colorize = {"DAPI": 2, "CD45": 1, "EpCAM": 0, "CK": 0}
; 0 imply get first file if no matched filename
DAPI = ["_UV.", "DAPI"]
EpCAM = ["_Green.", "EpCAM"]
CK = ["_Red.", "CK"]
CD45 = ["_Blue.", "CD45"]
; get multiple channel files
Mixed_EpCam = [
        ["_Green.", "EpCAM"],
        ["_Blue.", "CD45"],
        ["_UV.", "DAPI"]
    ]
Mixed_CK = [
        ["_Red.", "CK"],
        ["_Blue.", "CD45"],
        ["_UV.", "DAPI"]
    ]
CTC = [
        ["_Green.", "EpCAM"],
        ["_Red.", "CK"],
        ["_Blue.", "CD45"],
        ["Segment"]
    ]
Nuclei = [
        ["Segment"],
        ["Contour"],
        ["Marker"]
    ]
