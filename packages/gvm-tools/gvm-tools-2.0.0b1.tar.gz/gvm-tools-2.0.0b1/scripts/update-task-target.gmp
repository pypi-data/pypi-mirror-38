# -*- coding: utf-8 -*-
# Description:
# Script for gvm-pyshell
#
# Authors:
# Joshua Schwartz <joshua.schwartz@greenbone.net>
# Junbo Huang <junbo.huang@greenbone.net>
#
# Copyright:
# Copyright (C) 2018 Greenbone Networks GmbH
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import time


def check_args(args):
    len_args = len(args.script) - 1
    if len_args is not 2:
        message = """
        This script will update target hosts information for a desired task.
        Two parameters after the script name is required.

        1. <hosts_file> --.csv file containing desired target hosts
        2. <task_uuid>  --uuid of task to be modified

        Example for starting up the routine:
            $ gvm-pyshell ssh --hostname=hostname --gmp-username=name \
    --gmp-password=pass scripts/update-task-target-hosts.gmp hosts_file.csv \
    "303fa0a6-aa9b-43c4-bac0-66ae0b2d1698"

        """
        print(message)
        quit()

def error_and_exit(msg):
    sys.stderr.write("Error: {}\n".format(msg))
    sys.exit(1)


def load_host_file(filename):
    host_list = []

    try:
        f = open(filename)
        for line in f:
            host = line.split(",")[0]
            host = host.strip()
            if len(host) == 0:
                continue
            host_list.append(host)
    except IOError as e:
        error_and_exit("Failed to read host_file: {} (exit)".format(str(e)))

    if len(host_list) == 0:
        error_and_exit("Host file is empty (exit)")

    return host_list


def copy_send_target(gmp, hosts, old_target_id):
    old_target = gmp.get_target(target_id=old_target_id)[0]
    name = old_target.find('name').text

    comment = 'This target was automatically modified: {}'.format(
        time.strftime("%Y/%m/%d-%H:%M:%S"))

    reverse_lookup_only = old_target.find('reverse_lookup_only').text
    if reverse_lookup_only is '0':
        reverse_lookup_only = ''

    reverse_lookup_unify = old_target.find('reverse_lookup_unify').text
    if reverse_lookup_unify is '0':
        reverse_lookup_unify = ''

    port_list = {}
    port_list['id'] = old_target.xpath('port_list/@id')[0]

    new_target = gmp.create_target(
        name=name,
        make_unique=True,
        hosts=hosts,
        comment=comment,
        reverse_lookup_only=reverse_lookup_only,
        reverse_lookup_unify=reverse_lookup_unify,
        port_list=port_list
    )

    print('\n  New target created!\n')
    print('Target id: {}'.format(new_target.xpath('@id')[0]))
    print('Target name: {}\n'.format(name))

    return new_target


def create_target_hosts(gmp, host_list, task_id, old_target_id):
    map(str.strip, host_list)
    new_target = copy_send_target(gmp, host_list, old_target_id)

    new_target_id = new_target.xpath('@id')[0]
    modify_task_target(gmp, new_target_id, task_id)

    return new_target_id


def modify_task_target(gmp, new_target_id, task_id):
    gmp.modify_task(
        task_id=task_id,
        target_id=new_target_id
    )


def main():
    # pylint: disable=undefined-variable

    check_args(args)

    hosts_file = args.script[1]
    task_id = args.script[2]

    hosts_list = load_host_file(hosts_file)
    task = gmp.get_tasks(task_id=task_id)[1]
    old_target_id = task.xpath('target/@id')[0]

    create_target_hosts(gmp, hosts_list, task_id, old_target_id)

    gmp.delete_target(target_id=old_target_id)


if __name__ == '__gmp__':
    main()
