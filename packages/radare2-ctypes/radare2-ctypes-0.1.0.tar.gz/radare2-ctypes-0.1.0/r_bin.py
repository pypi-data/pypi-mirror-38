# this file has been automatically generated by valabind
import sys
from ctypes import *
from ctypes.util import find_library
if sys.platform.startswith('win'):
	lib = WinDLL (find_library ('r_bin'))
else:
	lib = CDLL (find_library ('r_bin'))
def rlist2array(x,y):
	it = x.iterator ()
	ret = []
	while True:
		data = it.get_data ()
		ds = cast (data, POINTER(y)).contents
		ret.append (ds)
		if it.n == None:
			break
		it = it.get_next ()
	return ret

class AddressHolder(object):
	def __get__(self, obj, type_):
		if getattr(obj, '_address', None) is None:
			obj._address = addressof(obj)
		return obj._address

	def __set__(self, obj, value):
		obj._address = value

class WrappedRMethod(object):
	def __init__(self, cname, args, ret):
		self.cname = cname
		self.args = args
		self.ret = ret
		self.args_set = False
		self.method = getattr(lib, cname)

	def __call__(self, *a):
		if not self.args_set:
			if self.args:
				self.method.argtypes = [eval(x.strip()) for x in self.args.split(',')]
			self.method.restype = eval(self.ret) if self.ret else None
			self.args_set = True
		return self.method(*a)

class WrappedApiMethod(object):
	def __init__(self, method, ret2, last):
		self.method = method
		self._o = None
		self.ret2 = ret2
		self.last = last

	def __call__(self, *a):
		result = self.method(self._o, *a)
		if self.ret2:
			result = eval(self.ret2)(result)
		if self.last:
			return getattr(result, self.last)
		return result

	def __get__(self, obj, type_):
		self._o = obj._o
		return self

def register(cname, args, ret):
	ret2 = last = None
	if ret:
		if ret[0]>='A' and ret[0]<='Z':
			x = ret.find('<')
			if x != -1:
				ret = ret[0:x]
			last = 'contents'
			ret = 'POINTER('+ret+')'
		else:
			last = 'value'
			ret2 = ret
			
	method = WrappedRMethod(cname, args, ret)
	wrapped_method = WrappedApiMethod(method, ret2, last)
	return wrapped_method, method

class RLibStruct(Structure): #0
	_fields_ = [
		("type", c_long),
		("data", c_void_p),
	]
class RBinOptions(Structure): #1
	_fields_ = [
	]
class RBinPlugin(Structure): #4
	_fields_ = [
	]
class RBinDwarfRow(Structure): #5
	_fields_ = [
		("address", c_ulonglong),
		("file", c_char_p),
		("line", c_int),
		("column", c_int),
	]
class RBinClass(Structure): #6
	_fields_ = [
		("name", c_char_p),
		("super", c_char_p),
		("index", c_int),
		("methods", c_void_p),
		("fields", c_void_p),
		("visibility", c_bool),
	]
class RBinAddr(Structure): #8
	_fields_ = [
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
	]
class RBinSection(Structure): #9
	_fields_ = [
		('name', c_char * 512),
		("size", c_ulonglong),
		("vsize", c_ulonglong),
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
		("perm", c_ulonglong),
	]
class RBinSymbol(Structure): #10
	_fields_ = [
		("name", c_char_p),
		("forwarder", c_char_p),
		("bind", c_char_p),
		("type", c_char_p),
		("classname", c_char_p),
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
		("size", c_ulonglong),
		("ordinal", c_ulonglong),
	]
class RBinImport(Structure): #11
	_fields_ = [
		("name", c_char_p),
		("bind", c_char_p),
		("type", c_char_p),
		("classname", c_char_p),
		("descriptor", c_char_p),
		("ordinal", c_ulonglong),
	]
class RBinReloc(Structure): #12
	_fields_ = [
		("type", c_ubyte),
		("additive", c_ubyte),
		("symbol", RBinSymbol),
		("import", RBinImport),
		("addend", c_longlong),
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
		("visibility", c_uint),
	]
class RBinInfo(Structure): #13
	_fields_ = [
		("file", c_char_p),
		("type", c_char_p),
		("bclass", c_char_p),
		("rclass", c_char_p),
		("arch", c_char_p),
		("machine", c_char_p),
		("os", c_char_p),
		("subsystem", c_char_p),
		("rpath", c_char_p),
		("lang", c_char_p),
		("bits", c_int),
		("has_va", c_bool),
		("has_pi", c_bool),
		("big_endian", c_bool),
		("dbg_info", c_ulonglong),
	]
class RBinObject(Structure): #7
	_fields_ = [
		("baddr", c_ulonglong),
		("size", c_int),
		("sections", c_void_p),
		("imports", c_void_p),
		("symbols", c_void_p),
		("entries", c_void_p),
		("fields", c_void_p),
		("libs", c_void_p),
		("relocs", c_void_p),
		("strings", c_void_p),
		("classes", c_void_p),
		("lines", c_void_p),
		("info", RBinInfo),
		('binsym', RBinAddr * 4),
	]
class RBinFile(Structure): #3
	_fields_ = [
		("file", c_char_p),
		("size", c_int),
		("offset", c_ulonglong),
		("o", RBinObject),
		("curplugin", RBinPlugin),
	]
class RBin(Structure): #2
	_fields_ = [
		("file", c_char_p),
		("cur", RBinFile),
		("narch", c_int),
	]
	def __init__(self):
		Structure.__init__(self)
		r_bin_new = lib.r_bin_new
		r_bin_new.restype = c_void_p
		self._o = r_bin_new ()

	_o = AddressHolder()

	wr_scn_resize, r_bin_wr_scn_resize = register('r_bin_wr_scn_resize','c_void_p, c_char_p, c_ulonglong','c_ulonglong')
	wr_rpath_del, r_bin_wr_rpath_del = register('r_bin_wr_rpath_del','c_void_p','c_int')
	wr_output, r_bin_wr_output = register('r_bin_wr_output','c_void_p, c_char_p','c_int')
	open, r_bin_open = register('r_bin_open','c_void_p, c_char_p, RBinOptions','c_int')
	create, r_bin_create = register('r_bin_create','c_void_p, POINTER(c_ubyte), c_int, POINTER(c_ubyte), c_int','RBuffer')
	use_arch, r_bin_use_arch = register('r_bin_use_arch','c_void_p, c_char_p, c_int, c_char_p','c_int')
	select, r_bin_select = register('r_bin_select','c_void_p, c_char_p, c_int, c_char_p','c_int')
	list, r_bin_list = register('r_bin_list','c_void_p, c_int','c_int')
	get_baddr, r_bin_get_baddr = register('r_bin_get_baddr','c_void_p','c_ulonglong')
	get_sym, r_bin_get_sym = register('r_bin_get_sym','c_void_p, c_int','RBinAddr')
	_get_entries, r_bin_get_entries = register('r_bin_get_entries','c_void_p','RList<RBinAddr>')
	_get_fields, r_bin_get_fields = register('r_bin_get_fields','c_void_p','RList<RBinField>')
	_get_imports, r_bin_get_imports = register('r_bin_get_imports','c_void_p','RList<RBinImport>')
	_get_sections, r_bin_get_sections = register('r_bin_get_sections','c_void_p','RList<RBinSection>')
	_get_strings, r_bin_get_strings = register('r_bin_get_strings','c_void_p','RList<RBinString>')
	_get_symbols, r_bin_get_symbols = register('r_bin_get_symbols','c_void_p','RList<RBinSymbol>')
	_get_relocs, r_bin_get_relocs = register('r_bin_get_relocs','c_void_p','RList<RBinReloc>')
	_get_libs, r_bin_get_libs = register('r_bin_get_libs','c_void_p','RList<c_char_p>')
	get_info, r_bin_get_info = register('r_bin_get_info','c_void_p','RBinInfo')
	addr2line, r_bin_addr2line = register('r_bin_addr2line','c_void_p, c_ulonglong, POINTER(c_char_p), c_int, POINTER(c_int)','c_int')
	addr2text, r_bin_addr2text = register('r_bin_addr2text','c_void_p, c_ulonglong, c_bool','c_char_p')
	def get_entries(self):
		return rlist2array(self._get_entries(),RBinAddr)
	def get_fields(self):
		return rlist2array(self._get_fields(),RBinField)
	def get_imports(self):
		return rlist2array(self._get_imports(),RBinImport)
	def get_sections(self):
		return rlist2array(self._get_sections(),RBinSection)
	def get_strings(self):
		return rlist2array(self._get_strings(),RBinString)
	def get_symbols(self):
		return rlist2array(self._get_symbols(),RBinSymbol)
	def get_relocs(self):
		return rlist2array(self._get_relocs(),RBinReloc)
	def get_libs(self):
		return rlist2array(self._get_libs(),c_char_p)

class RBinString(Structure): #14
	_fields_ = [
		("string", c_char_p),
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
		("ordinal", c_ulonglong),
		("size", c_ulonglong),
	]
class RBinField(Structure): #15
	_fields_ = [
		("name", c_char_p),
		("vaddr", c_ulonglong),
		("paddr", c_ulonglong),
	]
class RStrBuf(Structure): #16
	_fields_ = [
	]
	def __init__(self, str):
		Structure.__init__(self)
		r_strbuf_new = lib.r_strbuf_new
		r_strbuf_new.restype = c_void_p
		self._o = r_strbuf_new (str)

	_o = AddressHolder()

	set, r_strbuf_set = register('r_strbuf_set','c_void_p, c_char_p','c_bool')
	setf, r_strbuf_setf = register('r_strbuf_setf','c_void_p, c_char_p','c_bool')
	append, r_strbuf_append = register('r_strbuf_append','c_void_p, c_char_p','c_bool')
	get, r_strbuf_get = register('r_strbuf_get','c_void_p','c_char_p')

class RNum(Structure): #17
	_fields_ = [
	]
	def __init__(self, cb, cb2, user):
		Structure.__init__(self)
		r_num_new = lib.r_num_new
		r_num_new.restype = c_void_p
		self._o = r_num_new (cb, cb2, user)

	_o = AddressHolder()

	get, r_num_get = register('r_num_get','c_void_p, c_char_p','c_ulonglong')
	math, r_num_math = register('r_num_math','c_void_p, c_char_p','c_ulonglong')

class RBuffer(Structure): #18
	_fields_ = [
		("buf", POINTER(c_ubyte)),
		("length", c_int),
		("cur", c_int),
		("base", c_ulonglong),
	]
	def __init__(self):
		Structure.__init__(self)
		r_buf_new = lib.r_buf_new
		r_buf_new.restype = c_void_p
		self._o = r_buf_new ()

	_o = AddressHolder()

	read_at, r_buf_read_at = register('r_buf_read_at','c_void_p, c_ulonglong, POINTER(c_ubyte), c_int','c_int')
	write_at, r_buf_write_at = register('r_buf_write_at','c_void_p, c_ulonglong, POINTER(c_ubyte), c_int','c_int')
	set_bytes, r_buf_set_bytes = register('r_buf_set_bytes','c_void_p, POINTER(c_ubyte), c_int','c_bool')

class RList(Structure): #19
	_fields_ = [
	]
	def __init__(self):
		Structure.__init__(self)
		r_list_new = lib.r_list_new
		r_list_new.restype = c_void_p
		self._o = r_list_new ()
	def to_list(self,type):
		return rlist2array(self,type)

	_o = AddressHolder()

	append, r_list_append = register('r_list_append','c_void_p, c_void_p',None)
	prepend, r_list_prepend = register('r_list_prepend','c_void_p, c_void_p',None)
	iterator, r_list_iterator = register('r_list_iterator','c_void_p','RListIter')
	length, r_list_length = register('r_list_length','c_void_p','c_int')
	del_n, r_list_del_n = register('r_list_del_n','c_void_p, c_int','c_bool')
	get_top, r_list_get_top = register('r_list_get_top','c_void_p','c_bool')
	pop, r_list_pop = register('r_list_pop','c_void_p','c_void_p')

class RListIter(Structure): #20
	_fields_ = [
		("data", c_void_p),
		("n", c_void_p),
		("p", c_void_p),
	]
	def __init__(self):
		Structure.__init__(self)

	_o = AddressHolder()

	get_data, r_list_iter_get_data = register('r_list_iter_get_data','c_void_p','c_void_p')
	get_next, r_list_iter_get_next = register('r_list_iter_get_next','c_void_p','RListIter')

class RRange(Structure): #21
	_fields_ = [
	]
	def __init__(self):
		Structure.__init__(self)
		r_range_new = lib.r_range_new
		r_range_new.restype = c_void_p
		self._o = r_range_new ()
		r_range_new_from_string = lib.r_range_new_from_string
		r_range_new_from_string.restype = c_void_p
		self._o = r_range_new_from_string (str)

	_o = AddressHolder()

	item_get, r_range_item_get = register('r_range_item_get','c_void_p, c_ulonglong','POINTER(RRangeItem)')
	size, r_range_size = register('r_range_size','c_void_p','c_ulonglong')
	add_from_string, r_range_add_from_string = register('r_range_add_from_string','c_void_p, c_char_p','c_ulonglong')
	contains, r_range_contains = register('r_range_contains','c_void_p, c_ulonglong','c_bool')
	sort, r_range_sort = register('r_range_sort','c_void_p','c_bool')
	list, r_range_list = register('r_range_list','c_void_p, c_bool','c_bool')
	get_n, r_range_get_n = register('r_range_get_n','c_void_p, c_int, POINTER(c_ulonglong), POINTER(c_ulonglong)','c_bool')
	inverse, r_range_inverse = register('r_range_inverse','c_void_p, c_ulonglong, c_ulonglong, c_int','POINTER(RRange)')

class RRangeItem(Structure): #22
	_fields_ = [
		("fr", c_ulonglong),
		("to", c_ulonglong),
		("data", POINTER(c_ubyte)),
		("datalen", c_int),
	]
class RLib(Structure): #23
	_fields_ = [
	]
	def __init__(self, symname):
		Structure.__init__(self)
		r_lib_new = lib.r_lib_new
		r_lib_new.restype = c_void_p
		self._o = r_lib_new (symname)

	_o = AddressHolder()

	close, r_lib_close = register('r_lib_close','c_void_p, c_char_p','c_bool')
	opendir, r_lib_opendir = register('r_lib_opendir','c_void_p, c_char_p','c_int')
	path, r_lib_path = register('r_lib_path','c_char_p','c_char_p')
	dl_open, r_lib_dl_open = register('r_lib_dl_open','c_char_p','c_void_p')
	dl_sym, r_lib_dl_sym = register('r_lib_dl_sym','c_void_p, c_char_p','c_void_p')
	dl_close, r_lib_dl_close = register('r_lib_dl_close','c_void_p','c_bool')
	dl_check_filename, r_lib_dl_check_filename = register('r_lib_dl_check_filename','c_char_p','c_bool')
	del_handler, r_lib_del_handler = register('r_lib_del_handler','c_void_p, c_int','c_bool')

class RDiff(Structure): #24
	_fields_ = [
	]
	def __init__(self):
		Structure.__init__(self)
		r_diff_new = lib.r_diff_new
		r_diff_new.restype = c_void_p
		self._o = r_diff_new ()

	_o = AddressHolder()

	buffers, r_diff_buffers = register('r_diff_buffers','c_void_p, POINTER(c_ubyte), c_int, POINTER(c_ubyte), c_int','c_int')
	buffers_distance, r_diff_buffers_distance = register('r_diff_buffers_distance','c_void_p, POINTER(c_ubyte), c_int, POINTER(c_ubyte), c_int, POINTER(c_uint), POINTER(double)','c_int')
	set_delta, r_diff_set_delta = register('r_diff_set_delta','c_void_p, c_int','c_bool')

class RDiffOp(Structure): #25
	_fields_ = [
		("a_off", c_ulonglong),
		("a_buf", POINTER(c_ubyte)),
		("a_len", c_int),
		("b_off", c_ulonglong),
		("b_buf", POINTER(c_ubyte)),
		("b_len", c_int),
	]
class RIO(Structure): #26
	_fields_ = [
		("off", c_ulonglong),
		("debug", c_bool),
		("va", c_ulonglong),
	]
	def __init__(self):
		Structure.__init__(self)
		r_io_new = lib.r_io_new
		r_io_new.restype = c_void_p
		self._o = r_io_new ()

	_o = AddressHolder()

	free, r_io_free = register('r_io_free','c_void_p',None)
	set_write_mask, r_io_set_write_mask = register('r_io_set_write_mask','c_void_p, POINTER(c_ubyte), c_int','c_bool')
	undo_init, r_io_undo_init = register('r_io_undo_init','c_void_p','c_bool')
	undo_enable, r_io_undo_enable = register('r_io_undo_enable','c_void_p, c_bool, c_bool',None)
	sundo, r_io_sundo = register('r_io_sundo','c_void_p, c_ulonglong','RIOUndos')
	sundo_redo, r_io_sundo_redo = register('r_io_sundo_redo','c_void_p','RIOUndos')
	sundo_push, r_io_sundo_push = register('r_io_sundo_push','c_void_p, c_ulonglong, c_int',None)
	sundo_reset, r_io_sundo_reset = register('r_io_sundo_reset','c_void_p',None)
	sundo_list, r_io_sundo_list = register('r_io_sundo_list','c_void_p, c_int',None)
	wundo_new, r_io_wundo_new = register('r_io_wundo_new','c_void_p, c_ulonglong, POINTER(c_ubyte), c_int',None)
	wundo_clear, r_io_wundo_clear = register('r_io_wundo_clear','c_void_p',None)
	wundo_size, r_io_wundo_size = register('r_io_wundo_size','c_void_p','c_int')
	wundo_list, r_io_wundo_list = register('r_io_wundo_list','c_void_p',None)
	wundo_apply, r_io_wundo_apply = register('r_io_wundo_apply','c_void_p, POINTER(RIOUndoWrite), c_int','c_int')
	wundo_apply_all, r_io_wundo_apply_all = register('r_io_wundo_apply_all','c_void_p, c_int',None)
	wundo_set, r_io_wundo_set = register('r_io_wundo_set','c_void_p, c_int, c_int','c_int')
	plugin_add, r_io_plugin_add = register('r_io_plugin_add','c_void_p, RIOPlugin','c_bool')
	plugin_list, r_io_plugin_list = register('r_io_plugin_list','c_void_p',None)

class RIOUndos(Structure): #27
	_fields_ = [
	]
class RIOUndoWrite(Structure): #28
	_fields_ = [
	]
class RIOPlugin(Structure): #29
	_fields_ = [
	]
class RIOSection(Structure): #30
	_fields_ = [
	]
class RIODesc(Structure): #31
	_fields_ = [
		("fd", c_int),
		("perm", c_int),
		("name", c_char_p),
	]
