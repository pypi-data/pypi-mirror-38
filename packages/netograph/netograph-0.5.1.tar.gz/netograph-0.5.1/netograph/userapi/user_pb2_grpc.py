# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from netograph.userapi import user_pb2 as userapi_dot_user__pb2


class UserStub(object):
  """Methods that operate at the level of the user account.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.TempCapture = channel.unary_unary(
        '/io.netograph.user.User/TempCapture',
        request_serializer=userapi_dot_user__pb2.TempCaptureRequest.SerializeToString,
        response_deserializer=userapi_dot_user__pb2.TempCaptureResult.FromString,
        )
    self.Datasets = channel.unary_stream(
        '/io.netograph.user.User/Datasets',
        request_serializer=userapi_dot_user__pb2.DatasetsRequest.SerializeToString,
        response_deserializer=userapi_dot_user__pb2.Dataset.FromString,
        )


class UserServicer(object):
  """Methods that operate at the level of the user account.
  """

  def TempCapture(self, request, context):
    """Request a temporary capture. Temporary captures are not stored in a
    dataset, and the capture assets will be available for download for 24
    hours before being deleted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Datasets(self, request, context):
    """List all datasets to which the authorizing account has access. This
    includes public datasets, which will be marked readonly.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UserServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'TempCapture': grpc.unary_unary_rpc_method_handler(
          servicer.TempCapture,
          request_deserializer=userapi_dot_user__pb2.TempCaptureRequest.FromString,
          response_serializer=userapi_dot_user__pb2.TempCaptureResult.SerializeToString,
      ),
      'Datasets': grpc.unary_stream_rpc_method_handler(
          servicer.Datasets,
          request_deserializer=userapi_dot_user__pb2.DatasetsRequest.FromString,
          response_serializer=userapi_dot_user__pb2.Dataset.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.netograph.user.User', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
