# -*- coding: utf-8 -*-

"""
    pythondemomessaging1

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from .base_controller import BaseController
from ..api_helper import APIHelper
from ..configuration import Configuration
from ..http.auth.basic_auth import BasicAuth
from ..exceptions.api_exception import APIException

class MessagesController(BaseController):

    """A Controller to access Endpoints in the pythondemomessaging1 API."""


    def create_send_messages(self,
                             body):
        """Does a POST request to /v1/messages.

        Submit one or more (up to 100 per request) SMS or text to voice
        messages for delivery.

        Args:
            body (SendMessagesRequest): TODO: type description here. Example:
                
        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/v1/messages'
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'content-type': 'application/json; charset=utf-8'
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('Something went wrong. Please try again later.', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def get_message_status(self,
                           message_id):
        """Does a GET request to /v1/messages/{messageId}.

        Retrieve the current status of a message using the message ID returned
        in the send messages end point.
        A successful request to the get message status endpoint will return a
        response body as follows:
        ```json
        {
            "format": "SMS",
            "content": "My first message!",
            "metadata": {
                "key1": "value1",
                "key2": "value2"
            },
            "message_id": "877c19ef-fa2e-4cec-827a-e1df9b5509f7",
            "callback_url": "https://my.callback.url.com",
            "delivery_report": true,
            "destination_number": "+61401760575",
            "scheduled": "2016-11-03T11:49:02.807Z",
            "source_number": "+61491570157",
            "source_number_type": "INTERNATIONAL"
            "message_expiry_timestamp": "2016-11-03T11:49:02.807Z",
            "status": "enroute"
        }
        ```
        The status property of the response indicates the current status of
        the message. See the Delivery
        Reports section of this documentation for more information on message
        statues.
        *Note: If an invalid or non existent message ID parameter is specified
        in the request, then
        a HTTP 404 Not Found response will be returned*

        Args:
            message_id (string): TODO: type description here. Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/v1/messages/{messageId}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'messageId': message_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 404:
            raise APIException('Message not found', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)

    def update_cancel_scheduled_message(self,
                                        message_id,
                                        content_type,
                                        body):
        """Does a PUT request to /v1/messages/{messageId}.

        Cancel a scheduled message that has not yet been delivered.
        A scheduled message can be cancelled by updating the status of a
        message from ```scheduled```
        to ```cancelled```. This is done by submitting a PUT request to the
        messages endpoint using
        the message ID as a parameter (the same endpoint used above to
        retrieve the status of a message).
        The body of the request simply needs to contain a ```status```
        property with the value set
        to ```cancelled```.
        ```json
        {
            "status": "cancelled"
        }
        ```
        *Note: Only messages with a status of scheduled can be cancelled. If
        an invalid or non existent
        message ID parameter is specified in the request, then a HTTP 404 Not
        Found response will be
        returned*

        Args:
            message_id (string): TODO: type description here. Example: 
            content_type (string): TODO: type description here. Example: 
            body (CancelScheduledMessageRequest): TODO: type description here.
                Example: 

        Returns:
            mixed: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _query_builder = Configuration.base_uri
        _query_builder += '/v1/messages/{messageId}'
        _query_builder = APIHelper.append_url_with_template_parameters(_query_builder, { 
            'messageId': message_id
        })
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': content_type
        }

        # Prepare and execute request
        _request = self.http_client.put(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        BasicAuth.apply(_request)
        _context = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _context.response.status_code == 400:
            raise APIException('', _context)
        elif _context.response.status_code == 404:
            raise APIException('', _context)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body)
