# -*- coding: utf-8 -*-

"""
    pythondemomessaging1

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from pythondemomessaging1.api_helper import APIHelper

class Message(object):

    """Implementation of the 'Message' model.

    TODO: type model description here.

    Attributes:
        callback_url (string): TODO: type description here.
        content (string): This will be the content of the message
        destination_number (string): This is the number on which message is
            going to get delivered
        delivery_report (bool): Delivery reports can be requested with each
            message. If delivery reports are requested, a webhook will be
            submitted to the callback_url property specified for the message
            (or to the webhooks) specified for the account every time the
            status of the message changes as it is processed.
        format (FormatEnum): The format specifies which format the message
            will be sent as, SMS (text message), MMS (multimedia message) or
            TTS (text to speech).
        media (string): The media is used to specify the url of the media file
            that you are trying to send.
        message_expiry_timestamp (datetime): A message expiry timestamp can be
            provided to specify the latest time at which the message should be
            delivered.
        scheduled (datetime): A message can be scheduled for delivery in the
            future by setting the scheduled property.
        source_number (string): A source number may be specified for the
            message, this will be the number that the message appears from on
            the handset.
        source_number_type (SourceNumberTypeEnum): If a source number is
            specified, the type of source number may also be specified. This
            is recommended when using a source address type that is not an
            internationally formatted number.
        subject (string): The subject field is used to denote subject of the
            MMS message and has a maximum size of 64 characters long.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "content":'content',
        "destination_number":'destination_number',
        "callback_url":'callback_url',
        "delivery_report":'delivery_report',
        "format":'format',
        "media":'media',
        "message_expiry_timestamp":'message_expiry_timestamp',
        "scheduled":'scheduled',
        "source_number":'source_number',
        "source_number_type":'source_number_type',
        "subject":'subject'
    }

    def __init__(self,
                 content=None,
                 destination_number=None,
                 callback_url=None,
                 delivery_report=False,
                 format=None,
                 media=None,
                 message_expiry_timestamp=None,
                 scheduled=None,
                 source_number=None,
                 source_number_type=None,
                 subject=None):
        """Constructor for the Message class"""

        # Initialize members of the class
        self.callback_url = callback_url
        self.content = content
        self.destination_number = destination_number
        self.delivery_report = delivery_report
        self.format = format
        self.media = media
        self.message_expiry_timestamp = APIHelper.RFC3339DateTime(message_expiry_timestamp) if message_expiry_timestamp else None
        self.scheduled = APIHelper.RFC3339DateTime(scheduled) if scheduled else None
        self.source_number = source_number
        self.source_number_type = source_number_type
        self.subject = subject


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        content = dictionary.get('content')
        destination_number = dictionary.get('destination_number')
        callback_url = dictionary.get('callback_url')
        delivery_report = dictionary.get("delivery_report") if dictionary.get("delivery_report") else False
        format = dictionary.get('format')
        media = dictionary.get('media')
        message_expiry_timestamp = APIHelper.RFC3339DateTime.from_value(dictionary.get("message_expiry_timestamp")).datetime if dictionary.get("message_expiry_timestamp") else None
        scheduled = APIHelper.RFC3339DateTime.from_value(dictionary.get("scheduled")).datetime if dictionary.get("scheduled") else None
        source_number = dictionary.get('source_number')
        source_number_type = dictionary.get('source_number_type')
        subject = dictionary.get('subject')

        # Return an object of this model
        return cls(content,
                   destination_number,
                   callback_url,
                   delivery_report,
                   format,
                   media,
                   message_expiry_timestamp,
                   scheduled,
                   source_number,
                   source_number_type,
                   subject)


